
MuxWork.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cd8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08005e68  08005e68  00015e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ef8  08005ef8  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08005ef8  08005ef8  00015ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f00  08005f00  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f00  08005f00  00015f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f04  08005f04  00015f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08005f08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d4  2**0
                  CONTENTS
 10 .bss          00000390  200001d4  200001d4  000201d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000564  20000564  000201d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011de5  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023f0  00000000  00000000  00031fe9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e40  00000000  00000000  000343e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d68  00000000  00000000  00035220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000230d8  00000000  00000000  00035f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010e11  00000000  00000000  00059060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8d50  00000000  00000000  00069e71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00142bc1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003fa8  00000000  00000000  00142c14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005e50 	.word	0x08005e50

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08005e50 	.word	0x08005e50

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <setup_bb>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
	void setup_bb() {
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
		CS_HIGH;
 800057c:	2201      	movs	r2, #1
 800057e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000582:	4805      	ldr	r0, [pc, #20]	; (8000598 <setup_bb+0x20>)
 8000584:	f002 fb52 	bl	8002c2c <HAL_GPIO_WritePin>
		CLK_LOW;
 8000588:	2200      	movs	r2, #0
 800058a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800058e:	4802      	ldr	r0, [pc, #8]	; (8000598 <setup_bb+0x20>)
 8000590:	f002 fb4c 	bl	8002c2c <HAL_GPIO_WritePin>
	}
 8000594:	bf00      	nop
 8000596:	bd80      	pop	{r7, pc}
 8000598:	40020400 	.word	0x40020400

0800059c <small_delay>:

	void small_delay() {
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
		HAL_Delay(1);
 80005a0:	2001      	movs	r0, #1
 80005a2:	f001 fa19 	bl	80019d8 <HAL_Delay>
	}
 80005a6:	bf00      	nop
 80005a8:	bd80      	pop	{r7, pc}
	...

080005ac <bb_write_bit>:

	void bb_write_bit(int b) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
		if (b) DATA_HIGH;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d006      	beq.n	80005c8 <bb_write_bit+0x1c>
 80005ba:	2201      	movs	r2, #1
 80005bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005c0:	480e      	ldr	r0, [pc, #56]	; (80005fc <bb_write_bit+0x50>)
 80005c2:	f002 fb33 	bl	8002c2c <HAL_GPIO_WritePin>
 80005c6:	e005      	b.n	80005d4 <bb_write_bit+0x28>
		else   DATA_LOW;
 80005c8:	2200      	movs	r2, #0
 80005ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005ce:	480b      	ldr	r0, [pc, #44]	; (80005fc <bb_write_bit+0x50>)
 80005d0:	f002 fb2c 	bl	8002c2c <HAL_GPIO_WritePin>
		small_delay();
 80005d4:	f7ff ffe2 	bl	800059c <small_delay>
		CLK_HIGH;
 80005d8:	2201      	movs	r2, #1
 80005da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005de:	4807      	ldr	r0, [pc, #28]	; (80005fc <bb_write_bit+0x50>)
 80005e0:	f002 fb24 	bl	8002c2c <HAL_GPIO_WritePin>
		small_delay();
 80005e4:	f7ff ffda 	bl	800059c <small_delay>
		CLK_LOW;
 80005e8:	2200      	movs	r2, #0
 80005ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ee:	4803      	ldr	r0, [pc, #12]	; (80005fc <bb_write_bit+0x50>)
 80005f0:	f002 fb1c 	bl	8002c2c <HAL_GPIO_WritePin>
	}
 80005f4:	bf00      	nop
 80005f6:	3708      	adds	r7, #8
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	40020400 	.word	0x40020400

08000600 <bb_write_byte>:

	void bb_write_byte(int b) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
		for (int i = 7; i >= 0; --i) bb_write_bit((b >> i) & 1);
 8000608:	2307      	movs	r3, #7
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	e00b      	b.n	8000626 <bb_write_byte+0x26>
 800060e:	687a      	ldr	r2, [r7, #4]
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	fa42 f303 	asr.w	r3, r2, r3
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	4618      	mov	r0, r3
 800061c:	f7ff ffc6 	bl	80005ac <bb_write_bit>
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	3b01      	subs	r3, #1
 8000624:	60fb      	str	r3, [r7, #12]
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	2b00      	cmp	r3, #0
 800062a:	daf0      	bge.n	800060e <bb_write_byte+0xe>
	}
 800062c:	bf00      	nop
 800062e:	bf00      	nop
 8000630:	3710      	adds	r7, #16
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
	...

08000638 <bb_cmd>:

	void bb_cmd(int data) {
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
		CS_LOW;
 8000640:	2200      	movs	r2, #0
 8000642:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000646:	480e      	ldr	r0, [pc, #56]	; (8000680 <bb_cmd+0x48>)
 8000648:	f002 faf0 	bl	8002c2c <HAL_GPIO_WritePin>
		small_delay();
 800064c:	f7ff ffa6 	bl	800059c <small_delay>
		bb_write_bit(0);
 8000650:	2000      	movs	r0, #0
 8000652:	f7ff ffab 	bl	80005ac <bb_write_bit>
		bb_write_bit(0);
 8000656:	2000      	movs	r0, #0
 8000658:	f7ff ffa8 	bl	80005ac <bb_write_bit>
		bb_write_byte(data);
 800065c:	6878      	ldr	r0, [r7, #4]
 800065e:	f7ff ffcf 	bl	8000600 <bb_write_byte>
		small_delay();
 8000662:	f7ff ff9b 	bl	800059c <small_delay>
		CS_HIGH;
 8000666:	2201      	movs	r2, #1
 8000668:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800066c:	4804      	ldr	r0, [pc, #16]	; (8000680 <bb_cmd+0x48>)
 800066e:	f002 fadd 	bl	8002c2c <HAL_GPIO_WritePin>
		small_delay();
 8000672:	f7ff ff93 	bl	800059c <small_delay>
	}
 8000676:	bf00      	nop
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40020400 	.word	0x40020400

08000684 <bb_data>:

	void bb_data(int data) {
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
		CS_LOW;
 800068c:	2200      	movs	r2, #0
 800068e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000692:	480e      	ldr	r0, [pc, #56]	; (80006cc <bb_data+0x48>)
 8000694:	f002 faca 	bl	8002c2c <HAL_GPIO_WritePin>
		small_delay();
 8000698:	f7ff ff80 	bl	800059c <small_delay>
		bb_write_bit(1);
 800069c:	2001      	movs	r0, #1
 800069e:	f7ff ff85 	bl	80005ac <bb_write_bit>
		bb_write_bit(0);
 80006a2:	2000      	movs	r0, #0
 80006a4:	f7ff ff82 	bl	80005ac <bb_write_bit>
		bb_write_byte(data);
 80006a8:	6878      	ldr	r0, [r7, #4]
 80006aa:	f7ff ffa9 	bl	8000600 <bb_write_byte>
		small_delay();
 80006ae:	f7ff ff75 	bl	800059c <small_delay>
		CS_HIGH;
 80006b2:	2201      	movs	r2, #1
 80006b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006b8:	4804      	ldr	r0, [pc, #16]	; (80006cc <bb_data+0x48>)
 80006ba:	f002 fab7 	bl	8002c2c <HAL_GPIO_WritePin>
		small_delay();
 80006be:	f7ff ff6d 	bl	800059c <small_delay>
	}
 80006c2:	bf00      	nop
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40020400 	.word	0x40020400

080006d0 <bb_init_oled>:

	void bb_init_oled() {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
		HAL_Delay(1); // 1 ms
 80006d4:	2001      	movs	r0, #1
 80006d6:	f001 f97f 	bl	80019d8 <HAL_Delay>
		bb_cmd(0x38);
 80006da:	2038      	movs	r0, #56	; 0x38
 80006dc:	f7ff ffac 	bl	8000638 <bb_cmd>
		bb_cmd(0x08);
 80006e0:	2008      	movs	r0, #8
 80006e2:	f7ff ffa9 	bl	8000638 <bb_cmd>
		bb_cmd(0x01);
 80006e6:	2001      	movs	r0, #1
 80006e8:	f7ff ffa6 	bl	8000638 <bb_cmd>
		HAL_Delay(2); // 2 ms
 80006ec:	2002      	movs	r0, #2
 80006ee:	f001 f973 	bl	80019d8 <HAL_Delay>
		bb_cmd(0x06);
 80006f2:	2006      	movs	r0, #6
 80006f4:	f7ff ffa0 	bl	8000638 <bb_cmd>
		bb_cmd(0x02);
 80006f8:	2002      	movs	r0, #2
 80006fa:	f7ff ff9d 	bl	8000638 <bb_cmd>
		bb_cmd(0x0c);
 80006fe:	200c      	movs	r0, #12
 8000700:	f7ff ff9a 	bl	8000638 <bb_cmd>
	}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}

08000708 <bb_display1>:

	void bb_display1 (const char* str) {
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
		bb_cmd(0x02);
 8000710:	2002      	movs	r0, #2
 8000712:	f7ff ff91 	bl	8000638 <bb_cmd>
		for (int i = 0; i < strlen(str); ++i) if (str[i] != '\0') bb_data(str[i]);
 8000716:	2300      	movs	r3, #0
 8000718:	60fb      	str	r3, [r7, #12]
 800071a:	e00f      	b.n	800073c <bb_display1+0x34>
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	687a      	ldr	r2, [r7, #4]
 8000720:	4413      	add	r3, r2
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d006      	beq.n	8000736 <bb_display1+0x2e>
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	687a      	ldr	r2, [r7, #4]
 800072c:	4413      	add	r3, r2
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff ffa7 	bl	8000684 <bb_data>
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	3301      	adds	r3, #1
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	6878      	ldr	r0, [r7, #4]
 800073e:	f7ff fd47 	bl	80001d0 <strlen>
 8000742:	4602      	mov	r2, r0
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	429a      	cmp	r2, r3
 8000748:	d8e8      	bhi.n	800071c <bb_display1+0x14>
	}
 800074a:	bf00      	nop
 800074c:	bf00      	nop
 800074e:	3710      	adds	r7, #16
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <bb_display2>:

	void bb_display2 (const char* str) {
 8000754:	b580      	push	{r7, lr}
 8000756:	b086      	sub	sp, #24
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
		bb_cmd(0xc0);
 800075c:	20c0      	movs	r0, #192	; 0xc0
 800075e:	f7ff ff6b 	bl	8000638 <bb_cmd>
//		for (int i = 0; i < 6; ++i) if (str[i] != '\0') bb_data(str[i]);
		int flag = 0;
 8000762:	2300      	movs	r3, #0
 8000764:	617b      	str	r3, [r7, #20]
		int i = 0;
 8000766:	2300      	movs	r3, #0
 8000768:	613b      	str	r3, [r7, #16]
		int count = 0;
 800076a:	2300      	movs	r3, #0
 800076c:	60fb      	str	r3, [r7, #12]

		while(count < 6){
 800076e:	e022      	b.n	80007b6 <bb_display2+0x62>
			if (str[i] != '\0' && (str[i] == '+'|| flag)){
 8000770:	693b      	ldr	r3, [r7, #16]
 8000772:	687a      	ldr	r2, [r7, #4]
 8000774:	4413      	add	r3, r2
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d014      	beq.n	80007a6 <bb_display2+0x52>
 800077c:	693b      	ldr	r3, [r7, #16]
 800077e:	687a      	ldr	r2, [r7, #4]
 8000780:	4413      	add	r3, r2
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	2b2b      	cmp	r3, #43	; 0x2b
 8000786:	d002      	beq.n	800078e <bb_display2+0x3a>
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d00b      	beq.n	80007a6 <bb_display2+0x52>
				flag = 1;
 800078e:	2301      	movs	r3, #1
 8000790:	617b      	str	r3, [r7, #20]
				bb_data(str[i]);
 8000792:	693b      	ldr	r3, [r7, #16]
 8000794:	687a      	ldr	r2, [r7, #4]
 8000796:	4413      	add	r3, r2
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff ff72 	bl	8000684 <bb_data>
				count++;
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	3301      	adds	r3, #1
 80007a4:	60fb      	str	r3, [r7, #12]
			}
			i++;
 80007a6:	693b      	ldr	r3, [r7, #16]
 80007a8:	3301      	adds	r3, #1
 80007aa:	613b      	str	r3, [r7, #16]
			if(i == 6){
 80007ac:	693b      	ldr	r3, [r7, #16]
 80007ae:	2b06      	cmp	r3, #6
 80007b0:	d101      	bne.n	80007b6 <bb_display2+0x62>
				i = 0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	613b      	str	r3, [r7, #16]
		while(count < 6){
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	2b05      	cmp	r3, #5
 80007ba:	ddd9      	ble.n	8000770 <bb_display2+0x1c>
			}
		}
	}
 80007bc:	bf00      	nop
 80007be:	bf00      	nop
 80007c0:	3718      	adds	r7, #24
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
	...

080007c8 <choseSelectLineMux>:
		}
	}

	//Works
	void choseSelectLineMux(int muxPin)
	{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
		//Reset all pins:
		for(int i=0;i<3;i++){
 80007d0:	2300      	movs	r3, #0
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	e00c      	b.n	80007f0 <choseSelectLineMux+0x28>
			HAL_GPIO_WritePin(GPIOD, selectPins[i], GPIO_PIN_RESET);
 80007d6:	4a19      	ldr	r2, [pc, #100]	; (800083c <choseSelectLineMux+0x74>)
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007de:	b29b      	uxth	r3, r3
 80007e0:	2200      	movs	r2, #0
 80007e2:	4619      	mov	r1, r3
 80007e4:	4816      	ldr	r0, [pc, #88]	; (8000840 <choseSelectLineMux+0x78>)
 80007e6:	f002 fa21 	bl	8002c2c <HAL_GPIO_WritePin>
		for(int i=0;i<3;i++){
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	3301      	adds	r3, #1
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	2b02      	cmp	r3, #2
 80007f4:	ddef      	ble.n	80007d6 <choseSelectLineMux+0xe>
		}

		//Turn on correct pins:
		for(int i=2;i>=0;i--){
 80007f6:	2302      	movs	r3, #2
 80007f8:	60bb      	str	r3, [r7, #8]
 80007fa:	e017      	b.n	800082c <choseSelectLineMux+0x64>
			if(onPins[muxPin][i]){
 80007fc:	4911      	ldr	r1, [pc, #68]	; (8000844 <choseSelectLineMux+0x7c>)
 80007fe:	687a      	ldr	r2, [r7, #4]
 8000800:	4613      	mov	r3, r2
 8000802:	005b      	lsls	r3, r3, #1
 8000804:	4413      	add	r3, r2
 8000806:	68ba      	ldr	r2, [r7, #8]
 8000808:	4413      	add	r3, r2
 800080a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d009      	beq.n	8000826 <choseSelectLineMux+0x5e>
				HAL_GPIO_WritePin(GPIOD, selectPins[i], GPIO_PIN_SET);
 8000812:	4a0a      	ldr	r2, [pc, #40]	; (800083c <choseSelectLineMux+0x74>)
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800081a:	b29b      	uxth	r3, r3
 800081c:	2201      	movs	r2, #1
 800081e:	4619      	mov	r1, r3
 8000820:	4807      	ldr	r0, [pc, #28]	; (8000840 <choseSelectLineMux+0x78>)
 8000822:	f002 fa03 	bl	8002c2c <HAL_GPIO_WritePin>
		for(int i=2;i>=0;i--){
 8000826:	68bb      	ldr	r3, [r7, #8]
 8000828:	3b01      	subs	r3, #1
 800082a:	60bb      	str	r3, [r7, #8]
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	2b00      	cmp	r3, #0
 8000830:	dae4      	bge.n	80007fc <choseSelectLineMux+0x34>
			}
		}
	}
 8000832:	bf00      	nop
 8000834:	bf00      	nop
 8000836:	3710      	adds	r7, #16
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	08005e8c 	.word	0x08005e8c
 8000840:	40020c00 	.word	0x40020c00
 8000844:	20000100 	.word	0x20000100

08000848 <choseSelectLineSuper>:

	//Works
	void choseSelectLineSuper(int muxPin)
		{
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
			//Reset all pins:
			for(int i=0;i<3;i++){
 8000850:	2300      	movs	r3, #0
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	e00c      	b.n	8000870 <choseSelectLineSuper+0x28>
				HAL_GPIO_WritePin(GPIOC, superPins[i], GPIO_PIN_RESET);
 8000856:	4a1a      	ldr	r2, [pc, #104]	; (80008c0 <choseSelectLineSuper+0x78>)
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800085e:	b29b      	uxth	r3, r3
 8000860:	2200      	movs	r2, #0
 8000862:	4619      	mov	r1, r3
 8000864:	4817      	ldr	r0, [pc, #92]	; (80008c4 <choseSelectLineSuper+0x7c>)
 8000866:	f002 f9e1 	bl	8002c2c <HAL_GPIO_WritePin>
			for(int i=0;i<3;i++){
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	3301      	adds	r3, #1
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	2b02      	cmp	r3, #2
 8000874:	ddef      	ble.n	8000856 <choseSelectLineSuper+0xe>
			}

			//Turn on correct pins:
			for(int i=2;i>=0;i--){
 8000876:	2302      	movs	r3, #2
 8000878:	60bb      	str	r3, [r7, #8]
 800087a:	e019      	b.n	80008b0 <choseSelectLineSuper+0x68>
				if(onPins[muxPin][2-i]){
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	f1c3 0102 	rsb	r1, r3, #2
 8000882:	4811      	ldr	r0, [pc, #68]	; (80008c8 <choseSelectLineSuper+0x80>)
 8000884:	687a      	ldr	r2, [r7, #4]
 8000886:	4613      	mov	r3, r2
 8000888:	005b      	lsls	r3, r3, #1
 800088a:	4413      	add	r3, r2
 800088c:	440b      	add	r3, r1
 800088e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d009      	beq.n	80008aa <choseSelectLineSuper+0x62>
					HAL_GPIO_WritePin(GPIOC, superPins[i], GPIO_PIN_SET);
 8000896:	4a0a      	ldr	r2, [pc, #40]	; (80008c0 <choseSelectLineSuper+0x78>)
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800089e:	b29b      	uxth	r3, r3
 80008a0:	2201      	movs	r2, #1
 80008a2:	4619      	mov	r1, r3
 80008a4:	4807      	ldr	r0, [pc, #28]	; (80008c4 <choseSelectLineSuper+0x7c>)
 80008a6:	f002 f9c1 	bl	8002c2c <HAL_GPIO_WritePin>
			for(int i=2;i>=0;i--){
 80008aa:	68bb      	ldr	r3, [r7, #8]
 80008ac:	3b01      	subs	r3, #1
 80008ae:	60bb      	str	r3, [r7, #8]
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	dae2      	bge.n	800087c <choseSelectLineSuper+0x34>
				}
			}
		}
 80008b6:	bf00      	nop
 80008b8:	bf00      	nop
 80008ba:	3710      	adds	r7, #16
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	08005e98 	.word	0x08005e98
 80008c4:	40020800 	.word	0x40020800
 80008c8:	20000100 	.word	0x20000100

080008cc <readSuperMux>:

	//To be verified
	void readSuperMux(){
 80008cc:	b5b0      	push	{r4, r5, r7, lr}
 80008ce:	b09a      	sub	sp, #104	; 0x68
 80008d0:	af00      	add	r7, sp, #0
		//MIGHT WANT TO NOT USE A GLOBAL SOURCE!
		int dest_row=-1, dest_hall=-1, source_row=-1, source_hall=-1; //x,y coordinates for source and destination of piece
 80008d2:	f04f 33ff 	mov.w	r3, #4294967295
 80008d6:	667b      	str	r3, [r7, #100]	; 0x64
 80008d8:	f04f 33ff 	mov.w	r3, #4294967295
 80008dc:	663b      	str	r3, [r7, #96]	; 0x60
 80008de:	f04f 33ff 	mov.w	r3, #4294967295
 80008e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80008e4:	f04f 33ff 	mov.w	r3, #4294967295
 80008e8:	65bb      	str	r3, [r7, #88]	; 0x58

		int change_detected = 0; //0 means no, 1 means yes
 80008ea:	2300      	movs	r3, #0
 80008ec:	657b      	str	r3, [r7, #84]	; 0x54

//		bb_display2("reading hall");

		for(int row=0;row<8;row++){
 80008ee:	2300      	movs	r3, #0
 80008f0:	653b      	str	r3, [r7, #80]	; 0x50
 80008f2:	e03d      	b.n	8000970 <readSuperMux+0xa4>
			//Iterate through each ROW BOARD (line below selects 1 row at a time)
			choseSelectLineSuper(row);
 80008f4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80008f6:	f7ff ffa7 	bl	8000848 <choseSelectLineSuper>

			for(int hall=0;hall<8;hall++){
 80008fa:	2300      	movs	r3, #0
 80008fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80008fe:	e031      	b.n	8000964 <readSuperMux+0x98>
				//Iterate through each HALL SENSOR (line below selects 1 hall at a time)
				choseSelectLineMux(hall);
 8000900:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000902:	f7ff ff61 	bl	80007c8 <choseSelectLineMux>
				 * - (HAL_GPIO_ReadPin(GPIOD, SUPER_MUX_DATA)): 1 means piece NOT detected
				 * - boardData[row][col] == 0: Means position at {row, col} previously had a piece
				 * */

				//If the current location is nonzero, but the previous state is 0, we are moving a piece here
				if((!(HAL_GPIO_ReadPin(GPIOD, SUPER_MUX_DATA))) && boardData[row][hall] == 0){
 8000906:	2108      	movs	r1, #8
 8000908:	4893      	ldr	r0, [pc, #588]	; (8000b58 <readSuperMux+0x28c>)
 800090a:	f002 f977 	bl	8002bfc <HAL_GPIO_ReadPin>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d10e      	bne.n	8000932 <readSuperMux+0x66>
 8000914:	4991      	ldr	r1, [pc, #580]	; (8000b5c <readSuperMux+0x290>)
 8000916:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000918:	00da      	lsls	r2, r3, #3
 800091a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800091c:	4413      	add	r3, r2
 800091e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d105      	bne.n	8000932 <readSuperMux+0x66>
					change_detected = 1;
 8000926:	2301      	movs	r3, #1
 8000928:	657b      	str	r3, [r7, #84]	; 0x54
					dest_row = row;
 800092a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800092c:	667b      	str	r3, [r7, #100]	; 0x64
					dest_hall = hall;
 800092e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000930:	663b      	str	r3, [r7, #96]	; 0x60
				}

				//If the current location is zero, but the previous state is nonzero, we are taking a piece from here
				if((HAL_GPIO_ReadPin(GPIOD, SUPER_MUX_DATA)) && boardData[row][hall] != 0){
 8000932:	2108      	movs	r1, #8
 8000934:	4888      	ldr	r0, [pc, #544]	; (8000b58 <readSuperMux+0x28c>)
 8000936:	f002 f961 	bl	8002bfc <HAL_GPIO_ReadPin>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d00e      	beq.n	800095e <readSuperMux+0x92>
 8000940:	4986      	ldr	r1, [pc, #536]	; (8000b5c <readSuperMux+0x290>)
 8000942:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000944:	00da      	lsls	r2, r3, #3
 8000946:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000948:	4413      	add	r3, r2
 800094a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d005      	beq.n	800095e <readSuperMux+0x92>
					change_detected = 1;
 8000952:	2301      	movs	r3, #1
 8000954:	657b      	str	r3, [r7, #84]	; 0x54
					source_row = row;
 8000956:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000958:	65fb      	str	r3, [r7, #92]	; 0x5c
					source_hall = hall;
 800095a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800095c:	65bb      	str	r3, [r7, #88]	; 0x58
			for(int hall=0;hall<8;hall++){
 800095e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000960:	3301      	adds	r3, #1
 8000962:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000964:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000966:	2b07      	cmp	r3, #7
 8000968:	ddca      	ble.n	8000900 <readSuperMux+0x34>
		for(int row=0;row<8;row++){
 800096a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800096c:	3301      	adds	r3, #1
 800096e:	653b      	str	r3, [r7, #80]	; 0x50
 8000970:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000972:	2b07      	cmp	r3, #7
 8000974:	ddbe      	ble.n	80008f4 <readSuperMux+0x28>
		}

		//If a change was detected (flag was raised)

//		bb_display2("             ");
		if(change_detected){ //Continue here...
 8000976:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000978:	2b00      	cmp	r3, #0
 800097a:	f000 80e9 	beq.w	8000b50 <readSuperMux+0x284>
			change_detected = 0; //Reset value (redundant)
 800097e:	2300      	movs	r3, #0
 8000980:	657b      	str	r3, [r7, #84]	; 0x54

			char move_to_send[2]; //The array of information to send
			char test_with_display[3];

			int ready_to_receive = 0;
 8000982:	2300      	movs	r3, #0
 8000984:	643b      	str	r3, [r7, #64]	; 0x40

			if(dest_row != -1){ //Destination changed
 8000986:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800098c:	d01f      	beq.n	80009ce <readSuperMux+0x102>
				move_to_send[0] = (char)(((8*dest_row) + dest_hall) + 40);
 800098e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000990:	b2db      	uxtb	r3, r3
 8000992:	00db      	lsls	r3, r3, #3
 8000994:	b2da      	uxtb	r2, r3
 8000996:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000998:	b2db      	uxtb	r3, r3
 800099a:	4413      	add	r3, r2
 800099c:	b2db      	uxtb	r3, r3
 800099e:	3328      	adds	r3, #40	; 0x28
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
				sprintf(test_with_display, "%2d", ((8*dest_row) + dest_hall));
 80009a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80009a8:	00da      	lsls	r2, r3, #3
 80009aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80009ac:	441a      	add	r2, r3
 80009ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009b2:	496b      	ldr	r1, [pc, #428]	; (8000b60 <readSuperMux+0x294>)
 80009b4:	4618      	mov	r0, r3
 80009b6:	f004 fe1d 	bl	80055f4 <siprintf>
				move_to_send[1] = test_with_display[2] = 'd';
 80009ba:	2364      	movs	r3, #100	; 0x64
 80009bc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80009c0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80009c4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
				ready_to_receive = 1;
 80009c8:	2301      	movs	r3, #1
 80009ca:	643b      	str	r3, [r7, #64]	; 0x40
 80009cc:	e01c      	b.n	8000a08 <readSuperMux+0x13c>
			}else{ //Source changed
				move_to_send[0] = (char)(((8*source_row) + source_hall) + 40);
 80009ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	00db      	lsls	r3, r3, #3
 80009d4:	b2da      	uxtb	r2, r3
 80009d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	4413      	add	r3, r2
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	3328      	adds	r3, #40	; 0x28
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
				sprintf(test_with_display, "%2d", ((8*source_row) + source_hall));
 80009e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80009e8:	00da      	lsls	r2, r3, #3
 80009ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80009ec:	441a      	add	r2, r3
 80009ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009f2:	495b      	ldr	r1, [pc, #364]	; (8000b60 <readSuperMux+0x294>)
 80009f4:	4618      	mov	r0, r3
 80009f6:	f004 fdfd 	bl	80055f4 <siprintf>
				move_to_send[1] = test_with_display[2] = 's';
 80009fa:	2373      	movs	r3, #115	; 0x73
 80009fc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8000a00:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8000a04:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
			}


			//comment this out
			bb_display1(move_to_send);
 8000a08:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f7ff fe7b 	bl	8000708 <bb_display1>
//			bb_display1(test_with_display);
//			Send to Vik via USB UART code ...

		    HAL_UART_AbortReceive(&huart2);
 8000a12:	4854      	ldr	r0, [pc, #336]	; (8000b64 <readSuperMux+0x298>)
 8000a14:	f004 fae3 	bl	8004fde <HAL_UART_AbortReceive>
		    HAL_UART_Transmit(&huart2, move_to_send, sizeof(move_to_send), 10);
 8000a18:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000a1c:	230a      	movs	r3, #10
 8000a1e:	2202      	movs	r2, #2
 8000a20:	4850      	ldr	r0, [pc, #320]	; (8000b64 <readSuperMux+0x298>)
 8000a22:	f004 f940 	bl	8004ca6 <HAL_UART_Transmit>

		    //Wait to recieve squares to light up from Vik...
		    char squares_to_light[2];

		    //Initially render all LEDs black
		    all_black_render();
 8000a26:	f000 fb13 	bl	8001050 <all_black_render>

		    HAL_UART_AbortTransmit(&huart2);
 8000a2a:	484e      	ldr	r0, [pc, #312]	; (8000b64 <readSuperMux+0x298>)
 8000a2c:	f004 fa6f 	bl	8004f0e <HAL_UART_AbortTransmit>
		    HAL_UART_Receive(&huart2, squares_to_light, sizeof(squares_to_light), 10000000);
 8000a30:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000a34:	4b4c      	ldr	r3, [pc, #304]	; (8000b68 <readSuperMux+0x29c>)
 8000a36:	2202      	movs	r2, #2
 8000a38:	484a      	ldr	r0, [pc, #296]	; (8000b64 <readSuperMux+0x298>)
 8000a3a:	f004 f9c6 	bl	8004dca <HAL_UART_Receive>
//		    bb_display1("received");
		    bb_display1(squares_to_light);
 8000a3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff fe60 	bl	8000708 <bb_display1>

		    for(int i = 0;i < 28;i++){
 8000a48:	2300      	movs	r3, #0
 8000a4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8000a4c:	e04b      	b.n	8000ae6 <readSuperMux+0x21a>
		    	int square = ((int)squares_to_light[i]) - 40;
 8000a4e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000a52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000a54:	4413      	add	r3, r2
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	3b28      	subs	r3, #40	; 0x28
 8000a5a:	63fb      	str	r3, [r7, #60]	; 0x3c

		    	if(square < 0 || square > 63){
 8000a5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	db44      	blt.n	8000aec <readSuperMux+0x220>
 8000a62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a64:	2b3f      	cmp	r3, #63	; 0x3f
 8000a66:	dc41      	bgt.n	8000aec <readSuperMux+0x220>
		    		break;
		    	}else{
		    		 int square_to_light;
		    		 //1. As there are 15 LEDs/row, determine which specific LED goes on
		    		 if(square > 7){
 8000a68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a6a:	2b07      	cmp	r3, #7
 8000a6c:	dd09      	ble.n	8000a82 <readSuperMux+0x1b6>
		    			 square_to_light = (square*2) - (int)(8/square); //The first component accounts for 1 'working' LED for every 'hidden' LED.  The second component accounts for the fact that there are 15/row, not 16/row
 8000a6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a70:	005a      	lsls	r2, r3, #1
 8000a72:	f06f 0107 	mvn.w	r1, #7
 8000a76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a78:	fb91 f3f3 	sdiv	r3, r1, r3
 8000a7c:	4413      	add	r3, r2
 8000a7e:	647b      	str	r3, [r7, #68]	; 0x44
 8000a80:	e002      	b.n	8000a88 <readSuperMux+0x1bc>

		    		 }else{
		    			 square_to_light = (square*2);
 8000a82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a84:	005b      	lsls	r3, r3, #1
 8000a86:	647b      	str	r3, [r7, #68]	; 0x44
		    		 }

					 //2. With how LEDs are wired, odd # rows (starting at 0) are 'backwards'
					 int row = (int)square/8;
 8000a88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	da00      	bge.n	8000a90 <readSuperMux+0x1c4>
 8000a8e:	3307      	adds	r3, #7
 8000a90:	10db      	asrs	r3, r3, #3
 8000a92:	63bb      	str	r3, [r7, #56]	; 0x38

					 if(row % 2){ //If the row is odd...
 8000a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a96:	f003 0301 	and.w	r3, r3, #1
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d01a      	beq.n	8000ad4 <readSuperMux+0x208>
						 int flip_key[8] = {7, 5, 3, 1, -1, -3, -5, -7};
 8000a9e:	4b33      	ldr	r3, [pc, #204]	; (8000b6c <readSuperMux+0x2a0>)
 8000aa0:	1d3c      	adds	r4, r7, #4
 8000aa2:	461d      	mov	r5, r3
 8000aa4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000aa6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000aa8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000aac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

						 square_to_light += (2*flip_key[square % 8]);
 8000ab0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ab2:	425a      	negs	r2, r3
 8000ab4:	f003 0307 	and.w	r3, r3, #7
 8000ab8:	f002 0207 	and.w	r2, r2, #7
 8000abc:	bf58      	it	pl
 8000abe:	4253      	negpl	r3, r2
 8000ac0:	009b      	lsls	r3, r3, #2
 8000ac2:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000ac6:	4413      	add	r3, r2
 8000ac8:	f853 3c64 	ldr.w	r3, [r3, #-100]
 8000acc:	005b      	lsls	r3, r3, #1
 8000ace:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000ad0:	4413      	add	r3, r2
 8000ad2:	647b      	str	r3, [r7, #68]	; 0x44
					 }

					 render_one_led(square, 50, 50, 0); //Render LED purple
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	2232      	movs	r2, #50	; 0x32
 8000ad8:	2132      	movs	r1, #50	; 0x32
 8000ada:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000adc:	f000 fae6 	bl	80010ac <render_one_led>
		    for(int i = 0;i < 28;i++){
 8000ae0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ae2:	3301      	adds	r3, #1
 8000ae4:	64bb      	str	r3, [r7, #72]	; 0x48
 8000ae6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ae8:	2b1b      	cmp	r3, #27
 8000aea:	ddb0      	ble.n	8000a4e <readSuperMux+0x182>
		    	}
		    }

		    render_neopixel();
 8000aec:	f000 fb10 	bl	8001110 <render_neopixel>
//		    //BREAK (stuff below here works as expected)
//
//		    //RECEIVE EVALUATION FROM VIK & DISPLAY (CODE FROM RYAN):
		    char evaluation[6];
//		    bb_display2("abort transm");
		    HAL_UART_AbortTransmit(&huart2);
 8000af0:	481c      	ldr	r0, [pc, #112]	; (8000b64 <readSuperMux+0x298>)
 8000af2:	f004 fa0c 	bl	8004f0e <HAL_UART_AbortTransmit>
//		    bb_display2("waiting 4 eval  ");
			HAL_UART_Receive(&huart2, evaluation, sizeof(evaluation), 10000000);
 8000af6:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000afa:	4b1b      	ldr	r3, [pc, #108]	; (8000b68 <readSuperMux+0x29c>)
 8000afc:	2206      	movs	r2, #6
 8000afe:	4819      	ldr	r0, [pc, #100]	; (8000b64 <readSuperMux+0x298>)
 8000b00:	f004 f963 	bl	8004dca <HAL_UART_Receive>

////			bb_display1("Evaluation:");
			bb_display2(evaluation);
 8000b04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff fe23 	bl	8000754 <bb_display2>

		    //If the destination changed, update array representation of board:
			if(dest_row != -1 && dest_hall != -1){
 8000b0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b14:	d00b      	beq.n	8000b2e <readSuperMux+0x262>
 8000b16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b1c:	d007      	beq.n	8000b2e <readSuperMux+0x262>
				boardData[dest_row][dest_hall] = 1; //findMissingPiece(); //boardData[SOURCE_X][SOURCE_Y];
 8000b1e:	490f      	ldr	r1, [pc, #60]	; (8000b5c <readSuperMux+0x290>)
 8000b20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000b22:	00da      	lsls	r2, r3, #3
 8000b24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000b26:	4413      	add	r3, r2
 8000b28:	2201      	movs	r2, #1
 8000b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			}

			//If the source changed, update array representation of board:
			if(source_row != -1 && source_hall != -1){
 8000b2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b34:	d00c      	beq.n	8000b50 <readSuperMux+0x284>
 8000b36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b3c:	d008      	beq.n	8000b50 <readSuperMux+0x284>
				boardData[source_row][source_hall] = 0;
 8000b3e:	4907      	ldr	r1, [pc, #28]	; (8000b5c <readSuperMux+0x290>)
 8000b40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b42:	00da      	lsls	r2, r3, #3
 8000b44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b46:	4413      	add	r3, r2
 8000b48:	2200      	movs	r2, #0
 8000b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			}
		}

		return boardData;
 8000b4e:	bf00      	nop
 8000b50:	bf00      	nop
	}
 8000b52:	3768      	adds	r7, #104	; 0x68
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bdb0      	pop	{r4, r5, r7, pc}
 8000b58:	40020c00 	.word	0x40020c00
 8000b5c:	20000000 	.word	0x20000000
 8000b60:	08005e68 	.word	0x08005e68
 8000b64:	200002f0 	.word	0x200002f0
 8000b68:	00989680 	.word	0x00989680
 8000b6c:	08005e6c 	.word	0x08005e6c

08000b70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b76:	f000 feed 	bl	8001954 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b7a:	f000 f813 	bl	8000ba4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b7e:	f000 f9b7 	bl	8000ef0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000b82:	f000 f879 	bl	8000c78 <MX_ADC1_Init>
  MX_DMA_Init();
 8000b86:	f000 f993 	bl	8000eb0 <MX_DMA_Init>
  MX_TIM8_Init();
 8000b8a:	f000 f8c7 	bl	8000d1c <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8000b8e:	f000 f965 	bl	8000e5c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  setup_bb();
 8000b92:	f7ff fcf1 	bl	8000578 <setup_bb>
  bb_init_oled();
 8000b96:	f7ff fd9b 	bl	80006d0 <bb_init_oled>
//  init_neopixel(WS2812B);
  all_black_render();
 8000b9a:	f000 fa59 	bl	8001050 <all_black_render>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  readSuperMux();
 8000b9e:	f7ff fe95 	bl	80008cc <readSuperMux>
 8000ba2:	e7fc      	b.n	8000b9e <main+0x2e>

08000ba4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b094      	sub	sp, #80	; 0x50
 8000ba8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000baa:	f107 0320 	add.w	r3, r7, #32
 8000bae:	2230      	movs	r2, #48	; 0x30
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f004 fd16 	bl	80055e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb8:	f107 030c 	add.w	r3, r7, #12
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc8:	2300      	movs	r3, #0
 8000bca:	60bb      	str	r3, [r7, #8]
 8000bcc:	4b28      	ldr	r3, [pc, #160]	; (8000c70 <SystemClock_Config+0xcc>)
 8000bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd0:	4a27      	ldr	r2, [pc, #156]	; (8000c70 <SystemClock_Config+0xcc>)
 8000bd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd6:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd8:	4b25      	ldr	r3, [pc, #148]	; (8000c70 <SystemClock_Config+0xcc>)
 8000bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000be0:	60bb      	str	r3, [r7, #8]
 8000be2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000be4:	2300      	movs	r3, #0
 8000be6:	607b      	str	r3, [r7, #4]
 8000be8:	4b22      	ldr	r3, [pc, #136]	; (8000c74 <SystemClock_Config+0xd0>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a21      	ldr	r2, [pc, #132]	; (8000c74 <SystemClock_Config+0xd0>)
 8000bee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bf2:	6013      	str	r3, [r2, #0]
 8000bf4:	4b1f      	ldr	r3, [pc, #124]	; (8000c74 <SystemClock_Config+0xd0>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bfc:	607b      	str	r3, [r7, #4]
 8000bfe:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c00:	2302      	movs	r3, #2
 8000c02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c04:	2301      	movs	r3, #1
 8000c06:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c08:	2310      	movs	r3, #16
 8000c0a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c10:	2300      	movs	r3, #0
 8000c12:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c14:	2308      	movs	r3, #8
 8000c16:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000c18:	2332      	movs	r3, #50	; 0x32
 8000c1a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000c20:	2307      	movs	r3, #7
 8000c22:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c24:	f107 0320 	add.w	r3, r7, #32
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f002 f819 	bl	8002c60 <HAL_RCC_OscConfig>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c34:	f000 fa06 	bl	8001044 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c38:	230f      	movs	r3, #15
 8000c3a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c44:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c48:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000c4a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c4e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c50:	f107 030c 	add.w	r3, r7, #12
 8000c54:	2101      	movs	r1, #1
 8000c56:	4618      	mov	r0, r3
 8000c58:	f002 fa7a 	bl	8003150 <HAL_RCC_ClockConfig>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000c62:	f000 f9ef 	bl	8001044 <Error_Handler>
  }
}
 8000c66:	bf00      	nop
 8000c68:	3750      	adds	r7, #80	; 0x50
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40023800 	.word	0x40023800
 8000c74:	40007000 	.word	0x40007000

08000c78 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c7e:	463b      	mov	r3, r7
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c8a:	4b21      	ldr	r3, [pc, #132]	; (8000d10 <MX_ADC1_Init+0x98>)
 8000c8c:	4a21      	ldr	r2, [pc, #132]	; (8000d14 <MX_ADC1_Init+0x9c>)
 8000c8e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000c90:	4b1f      	ldr	r3, [pc, #124]	; (8000d10 <MX_ADC1_Init+0x98>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c96:	4b1e      	ldr	r3, [pc, #120]	; (8000d10 <MX_ADC1_Init+0x98>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000c9c:	4b1c      	ldr	r3, [pc, #112]	; (8000d10 <MX_ADC1_Init+0x98>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ca2:	4b1b      	ldr	r3, [pc, #108]	; (8000d10 <MX_ADC1_Init+0x98>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ca8:	4b19      	ldr	r3, [pc, #100]	; (8000d10 <MX_ADC1_Init+0x98>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cb0:	4b17      	ldr	r3, [pc, #92]	; (8000d10 <MX_ADC1_Init+0x98>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cb6:	4b16      	ldr	r3, [pc, #88]	; (8000d10 <MX_ADC1_Init+0x98>)
 8000cb8:	4a17      	ldr	r2, [pc, #92]	; (8000d18 <MX_ADC1_Init+0xa0>)
 8000cba:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cbc:	4b14      	ldr	r3, [pc, #80]	; (8000d10 <MX_ADC1_Init+0x98>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000cc2:	4b13      	ldr	r3, [pc, #76]	; (8000d10 <MX_ADC1_Init+0x98>)
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000cc8:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <MX_ADC1_Init+0x98>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cd0:	4b0f      	ldr	r3, [pc, #60]	; (8000d10 <MX_ADC1_Init+0x98>)
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cd6:	480e      	ldr	r0, [pc, #56]	; (8000d10 <MX_ADC1_Init+0x98>)
 8000cd8:	f000 fea2 	bl	8001a20 <HAL_ADC_Init>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000ce2:	f000 f9af 	bl	8001044 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000cea:	2301      	movs	r3, #1
 8000cec:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cf2:	463b      	mov	r3, r7
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4806      	ldr	r0, [pc, #24]	; (8000d10 <MX_ADC1_Init+0x98>)
 8000cf8:	f000 fed6 	bl	8001aa8 <HAL_ADC_ConfigChannel>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000d02:	f000 f99f 	bl	8001044 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d06:	bf00      	nop
 8000d08:	3710      	adds	r7, #16
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	200002a8 	.word	0x200002a8
 8000d14:	40012000 	.word	0x40012000
 8000d18:	0f000001 	.word	0x0f000001

08000d1c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b096      	sub	sp, #88	; 0x58
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d22:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	605a      	str	r2, [r3, #4]
 8000d2c:	609a      	str	r2, [r3, #8]
 8000d2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d30:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	605a      	str	r2, [r3, #4]
 8000d44:	609a      	str	r2, [r3, #8]
 8000d46:	60da      	str	r2, [r3, #12]
 8000d48:	611a      	str	r2, [r3, #16]
 8000d4a:	615a      	str	r2, [r3, #20]
 8000d4c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d4e:	1d3b      	adds	r3, r7, #4
 8000d50:	2220      	movs	r2, #32
 8000d52:	2100      	movs	r1, #0
 8000d54:	4618      	mov	r0, r3
 8000d56:	f004 fc45 	bl	80055e4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000d5a:	4b3e      	ldr	r3, [pc, #248]	; (8000e54 <MX_TIM8_Init+0x138>)
 8000d5c:	4a3e      	ldr	r2, [pc, #248]	; (8000e58 <MX_TIM8_Init+0x13c>)
 8000d5e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000d60:	4b3c      	ldr	r3, [pc, #240]	; (8000e54 <MX_TIM8_Init+0x138>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d66:	4b3b      	ldr	r3, [pc, #236]	; (8000e54 <MX_TIM8_Init+0x138>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 104;
 8000d6c:	4b39      	ldr	r3, [pc, #228]	; (8000e54 <MX_TIM8_Init+0x138>)
 8000d6e:	2268      	movs	r2, #104	; 0x68
 8000d70:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d72:	4b38      	ldr	r3, [pc, #224]	; (8000e54 <MX_TIM8_Init+0x138>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000d78:	4b36      	ldr	r3, [pc, #216]	; (8000e54 <MX_TIM8_Init+0x138>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d7e:	4b35      	ldr	r3, [pc, #212]	; (8000e54 <MX_TIM8_Init+0x138>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000d84:	4833      	ldr	r0, [pc, #204]	; (8000e54 <MX_TIM8_Init+0x138>)
 8000d86:	f002 fc11 	bl	80035ac <HAL_TIM_Base_Init>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8000d90:	f000 f958 	bl	8001044 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d98:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000d9a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000d9e:	4619      	mov	r1, r3
 8000da0:	482c      	ldr	r0, [pc, #176]	; (8000e54 <MX_TIM8_Init+0x138>)
 8000da2:	f003 f981 	bl	80040a8 <HAL_TIM_ConfigClockSource>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8000dac:	f000 f94a 	bl	8001044 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000db0:	4828      	ldr	r0, [pc, #160]	; (8000e54 <MX_TIM8_Init+0x138>)
 8000db2:	f002 fcbb 	bl	800372c <HAL_TIM_PWM_Init>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8000dbc:	f000 f942 	bl	8001044 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000dc8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4821      	ldr	r0, [pc, #132]	; (8000e54 <MX_TIM8_Init+0x138>)
 8000dd0:	f003 fe3a 	bl	8004a48 <HAL_TIMEx_MasterConfigSynchronization>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8000dda:	f000 f933 	bl	8001044 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dde:	2360      	movs	r3, #96	; 0x60
 8000de0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000de2:	2300      	movs	r3, #0
 8000de4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000de6:	2300      	movs	r3, #0
 8000de8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000dea:	2300      	movs	r3, #0
 8000dec:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dee:	2300      	movs	r3, #0
 8000df0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000df2:	2300      	movs	r3, #0
 8000df4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000df6:	2300      	movs	r3, #0
 8000df8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dfe:	2200      	movs	r2, #0
 8000e00:	4619      	mov	r1, r3
 8000e02:	4814      	ldr	r0, [pc, #80]	; (8000e54 <MX_TIM8_Init+0x138>)
 8000e04:	f003 f88e 	bl	8003f24 <HAL_TIM_PWM_ConfigChannel>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 8000e0e:	f000 f919 	bl	8001044 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e12:	2300      	movs	r3, #0
 8000e14:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e16:	2300      	movs	r3, #0
 8000e18:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e22:	2300      	movs	r3, #0
 8000e24:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e2a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000e30:	1d3b      	adds	r3, r7, #4
 8000e32:	4619      	mov	r1, r3
 8000e34:	4807      	ldr	r0, [pc, #28]	; (8000e54 <MX_TIM8_Init+0x138>)
 8000e36:	f003 fe83 	bl	8004b40 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8000e40:	f000 f900 	bl	8001044 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000e44:	4803      	ldr	r0, [pc, #12]	; (8000e54 <MX_TIM8_Init+0x138>)
 8000e46:	f000 fbf7 	bl	8001638 <HAL_TIM_MspPostInit>

}
 8000e4a:	bf00      	nop
 8000e4c:	3758      	adds	r7, #88	; 0x58
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20000200 	.word	0x20000200
 8000e58:	40010400 	.word	0x40010400

08000e5c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e60:	4b11      	ldr	r3, [pc, #68]	; (8000ea8 <MX_USART2_UART_Init+0x4c>)
 8000e62:	4a12      	ldr	r2, [pc, #72]	; (8000eac <MX_USART2_UART_Init+0x50>)
 8000e64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e66:	4b10      	ldr	r3, [pc, #64]	; (8000ea8 <MX_USART2_UART_Init+0x4c>)
 8000e68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ea8 <MX_USART2_UART_Init+0x4c>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e74:	4b0c      	ldr	r3, [pc, #48]	; (8000ea8 <MX_USART2_UART_Init+0x4c>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ea8 <MX_USART2_UART_Init+0x4c>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e80:	4b09      	ldr	r3, [pc, #36]	; (8000ea8 <MX_USART2_UART_Init+0x4c>)
 8000e82:	220c      	movs	r2, #12
 8000e84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e86:	4b08      	ldr	r3, [pc, #32]	; (8000ea8 <MX_USART2_UART_Init+0x4c>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e8c:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <MX_USART2_UART_Init+0x4c>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e92:	4805      	ldr	r0, [pc, #20]	; (8000ea8 <MX_USART2_UART_Init+0x4c>)
 8000e94:	f003 feba 	bl	8004c0c <HAL_UART_Init>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e9e:	f000 f8d1 	bl	8001044 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ea2:	bf00      	nop
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	200002f0 	.word	0x200002f0
 8000eac:	40004400 	.word	0x40004400

08000eb0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	607b      	str	r3, [r7, #4]
 8000eba:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <MX_DMA_Init+0x3c>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	4a0b      	ldr	r2, [pc, #44]	; (8000eec <MX_DMA_Init+0x3c>)
 8000ec0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec6:	4b09      	ldr	r3, [pc, #36]	; (8000eec <MX_DMA_Init+0x3c>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ece:	607b      	str	r3, [r7, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	203a      	movs	r0, #58	; 0x3a
 8000ed8:	f001 f8bc 	bl	8002054 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000edc:	203a      	movs	r0, #58	; 0x3a
 8000ede:	f001 f8d5 	bl	800208c <HAL_NVIC_EnableIRQ>

}
 8000ee2:	bf00      	nop
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40023800 	.word	0x40023800

08000ef0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08a      	sub	sp, #40	; 0x28
 8000ef4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef6:	f107 0314 	add.w	r3, r7, #20
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	605a      	str	r2, [r3, #4]
 8000f00:	609a      	str	r2, [r3, #8]
 8000f02:	60da      	str	r2, [r3, #12]
 8000f04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	613b      	str	r3, [r7, #16]
 8000f0a:	4b41      	ldr	r3, [pc, #260]	; (8001010 <MX_GPIO_Init+0x120>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	4a40      	ldr	r2, [pc, #256]	; (8001010 <MX_GPIO_Init+0x120>)
 8000f10:	f043 0301 	orr.w	r3, r3, #1
 8000f14:	6313      	str	r3, [r2, #48]	; 0x30
 8000f16:	4b3e      	ldr	r3, [pc, #248]	; (8001010 <MX_GPIO_Init+0x120>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	613b      	str	r3, [r7, #16]
 8000f20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	4b3a      	ldr	r3, [pc, #232]	; (8001010 <MX_GPIO_Init+0x120>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	4a39      	ldr	r2, [pc, #228]	; (8001010 <MX_GPIO_Init+0x120>)
 8000f2c:	f043 0302 	orr.w	r3, r3, #2
 8000f30:	6313      	str	r3, [r2, #48]	; 0x30
 8000f32:	4b37      	ldr	r3, [pc, #220]	; (8001010 <MX_GPIO_Init+0x120>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	f003 0302 	and.w	r3, r3, #2
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60bb      	str	r3, [r7, #8]
 8000f42:	4b33      	ldr	r3, [pc, #204]	; (8001010 <MX_GPIO_Init+0x120>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	4a32      	ldr	r2, [pc, #200]	; (8001010 <MX_GPIO_Init+0x120>)
 8000f48:	f043 0304 	orr.w	r3, r3, #4
 8000f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4e:	4b30      	ldr	r3, [pc, #192]	; (8001010 <MX_GPIO_Init+0x120>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	f003 0304 	and.w	r3, r3, #4
 8000f56:	60bb      	str	r3, [r7, #8]
 8000f58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	607b      	str	r3, [r7, #4]
 8000f5e:	4b2c      	ldr	r3, [pc, #176]	; (8001010 <MX_GPIO_Init+0x120>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	4a2b      	ldr	r2, [pc, #172]	; (8001010 <MX_GPIO_Init+0x120>)
 8000f64:	f043 0308 	orr.w	r3, r3, #8
 8000f68:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6a:	4b29      	ldr	r3, [pc, #164]	; (8001010 <MX_GPIO_Init+0x120>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	f003 0308 	and.w	r3, r3, #8
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);
 8000f76:	2200      	movs	r2, #0
 8000f78:	f44f 4130 	mov.w	r1, #45056	; 0xb000
 8000f7c:	4825      	ldr	r0, [pc, #148]	; (8001014 <MX_GPIO_Init+0x124>)
 8000f7e:	f001 fe55 	bl	8002c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, S0_Super_Pin|S1_Super_Pin|S2_Super_Pin, GPIO_PIN_RESET);
 8000f82:	2200      	movs	r2, #0
 8000f84:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000f88:	4823      	ldr	r0, [pc, #140]	; (8001018 <MX_GPIO_Init+0x128>)
 8000f8a:	f001 fe4f 	bl	8002c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, S0_Pin_Pin|S1_Pin_Pin|S2_Pin_Pin, GPIO_PIN_RESET);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2107      	movs	r1, #7
 8000f92:	4822      	ldr	r0, [pc, #136]	; (800101c <MX_GPIO_Init+0x12c>)
 8000f94:	f001 fe4a 	bl	8002c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8000f98:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8000f9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000faa:	f107 0314 	add.w	r3, r7, #20
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4818      	ldr	r0, [pc, #96]	; (8001014 <MX_GPIO_Init+0x124>)
 8000fb2:	f001 fc87 	bl	80028c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : S0_Super_Pin S1_Super_Pin S2_Super_Pin */
  GPIO_InitStruct.Pin = S0_Super_Pin|S1_Super_Pin|S2_Super_Pin;
 8000fb6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000fba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4812      	ldr	r0, [pc, #72]	; (8001018 <MX_GPIO_Init+0x128>)
 8000fd0:	f001 fc78 	bl	80028c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : S0_Pin_Pin S1_Pin_Pin S2_Pin_Pin */
  GPIO_InitStruct.Pin = S0_Pin_Pin|S1_Pin_Pin|S2_Pin_Pin;
 8000fd4:	2307      	movs	r3, #7
 8000fd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fe4:	f107 0314 	add.w	r3, r7, #20
 8000fe8:	4619      	mov	r1, r3
 8000fea:	480c      	ldr	r0, [pc, #48]	; (800101c <MX_GPIO_Init+0x12c>)
 8000fec:	f001 fc6a 	bl	80028c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Mux_Input_Pin */
  GPIO_InitStruct.Pin = Mux_Input_Pin;
 8000ff0:	2308      	movs	r3, #8
 8000ff2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Mux_Input_GPIO_Port, &GPIO_InitStruct);
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	4619      	mov	r1, r3
 8001002:	4806      	ldr	r0, [pc, #24]	; (800101c <MX_GPIO_Init+0x12c>)
 8001004:	f001 fc5e 	bl	80028c4 <HAL_GPIO_Init>

}
 8001008:	bf00      	nop
 800100a:	3728      	adds	r7, #40	; 0x28
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40023800 	.word	0x40023800
 8001014:	40020400 	.word	0x40020400
 8001018:	40020800 	.word	0x40020800
 800101c:	40020c00 	.word	0x40020c00

08001020 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a04      	ldr	r2, [pc, #16]	; (8001040 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d101      	bne.n	8001036 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001032:	f000 fcb1 	bl	8001998 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40010000 	.word	0x40010000

08001044 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001048:	b672      	cpsid	i
}
 800104a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800104c:	e7fe      	b.n	800104c <Error_Handler+0x8>
	...

08001050 <all_black_render>:
	}
	all_black_render();
}

void all_black_render(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
	uint_fast16_t var;
	for (var = 0; var < ENDBUFFERLED; ++var)
 8001056:	2300      	movs	r3, #0
 8001058:	607b      	str	r3, [r7, #4]
 800105a:	e01c      	b.n	8001096 <all_black_render+0x46>
	{
		allrgb[var].blue=0;
 800105c:	4912      	ldr	r1, [pc, #72]	; (80010a8 <all_black_render+0x58>)
 800105e:	687a      	ldr	r2, [r7, #4]
 8001060:	4613      	mov	r3, r2
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	4413      	add	r3, r2
 8001066:	440b      	add	r3, r1
 8001068:	3301      	adds	r3, #1
 800106a:	2200      	movs	r2, #0
 800106c:	701a      	strb	r2, [r3, #0]
		allrgb[var].red=0;
 800106e:	490e      	ldr	r1, [pc, #56]	; (80010a8 <all_black_render+0x58>)
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	4613      	mov	r3, r2
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	4413      	add	r3, r2
 8001078:	440b      	add	r3, r1
 800107a:	2200      	movs	r2, #0
 800107c:	701a      	strb	r2, [r3, #0]
		allrgb[var].green=0;
 800107e:	490a      	ldr	r1, [pc, #40]	; (80010a8 <all_black_render+0x58>)
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	4613      	mov	r3, r2
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	4413      	add	r3, r2
 8001088:	440b      	add	r3, r1
 800108a:	3302      	adds	r3, #2
 800108c:	2200      	movs	r2, #0
 800108e:	701a      	strb	r2, [r3, #0]
	for (var = 0; var < ENDBUFFERLED; ++var)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3301      	adds	r3, #1
 8001094:	607b      	str	r3, [r7, #4]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2b79      	cmp	r3, #121	; 0x79
 800109a:	d9df      	bls.n	800105c <all_black_render+0xc>
	}
	render_neopixel();
 800109c:	f000 f838 	bl	8001110 <render_neopixel>
}
 80010a0:	bf00      	nop
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20000334 	.word	0x20000334

080010ac <render_one_led>:

void render_one_led(int index,uint8_t blue,uint8_t red,uint8_t green)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	4608      	mov	r0, r1
 80010b6:	4611      	mov	r1, r2
 80010b8:	461a      	mov	r2, r3
 80010ba:	4603      	mov	r3, r0
 80010bc:	70fb      	strb	r3, [r7, #3]
 80010be:	460b      	mov	r3, r1
 80010c0:	70bb      	strb	r3, [r7, #2]
 80010c2:	4613      	mov	r3, r2
 80010c4:	707b      	strb	r3, [r7, #1]
	allrgb[STARTBUFFERLED + index].blue=blue;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	1c9a      	adds	r2, r3, #2
 80010ca:	4910      	ldr	r1, [pc, #64]	; (800110c <render_one_led+0x60>)
 80010cc:	4613      	mov	r3, r2
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	4413      	add	r3, r2
 80010d2:	440b      	add	r3, r1
 80010d4:	3301      	adds	r3, #1
 80010d6:	78fa      	ldrb	r2, [r7, #3]
 80010d8:	701a      	strb	r2, [r3, #0]
	allrgb[STARTBUFFERLED + index].red=red;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	1c9a      	adds	r2, r3, #2
 80010de:	490b      	ldr	r1, [pc, #44]	; (800110c <render_one_led+0x60>)
 80010e0:	4613      	mov	r3, r2
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	4413      	add	r3, r2
 80010e6:	440b      	add	r3, r1
 80010e8:	78ba      	ldrb	r2, [r7, #2]
 80010ea:	701a      	strb	r2, [r3, #0]
	allrgb[STARTBUFFERLED + index].green=green;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	1c9a      	adds	r2, r3, #2
 80010f0:	4906      	ldr	r1, [pc, #24]	; (800110c <render_one_led+0x60>)
 80010f2:	4613      	mov	r3, r2
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	4413      	add	r3, r2
 80010f8:	440b      	add	r3, r1
 80010fa:	3302      	adds	r3, #2
 80010fc:	787a      	ldrb	r2, [r7, #1]
 80010fe:	701a      	strb	r2, [r3, #0]
//	render_neopixel();
}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	20000334 	.word	0x20000334

08001110 <render_neopixel>:
		render_neopixel();
	}
}

void render_neopixel()
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
	mode=START;
 8001116:	4b21      	ldr	r3, [pc, #132]	; (800119c <render_neopixel+0x8c>)
 8001118:	2201      	movs	r2, #1
 800111a:	701a      	strb	r2, [r3, #0]
	uint_fast16_t var;
	if(type_of_led!=NOTDEFINE)
 800111c:	4b20      	ldr	r3, [pc, #128]	; (80011a0 <render_neopixel+0x90>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d035      	beq.n	8001190 <render_neopixel+0x80>
	{
		present_led_counting=0;
 8001124:	4b1f      	ldr	r3, [pc, #124]	; (80011a4 <render_neopixel+0x94>)
 8001126:	2200      	movs	r2, #0
 8001128:	701a      	strb	r2, [r3, #0]
		for (var = 0; var < 8; ++var)
 800112a:	2300      	movs	r3, #0
 800112c:	607b      	str	r3, [r7, #4]
 800112e:	e025      	b.n	800117c <render_neopixel+0x6c>
		{
			buffer[var]=0<<(((allrgb[0].green<<var)&0x80)>0);
 8001130:	4a1d      	ldr	r2, [pc, #116]	; (80011a8 <render_neopixel+0x98>)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2100      	movs	r1, #0
 8001136:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			buffer[var+8]=0<<(((allrgb[0].red<<var)&0x80)>0);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	3308      	adds	r3, #8
 800113e:	4a1a      	ldr	r2, [pc, #104]	; (80011a8 <render_neopixel+0x98>)
 8001140:	2100      	movs	r1, #0
 8001142:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			buffer[var+16]=0<<(((allrgb[0].blue<<var)&0x80)>0);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	3310      	adds	r3, #16
 800114a:	4a17      	ldr	r2, [pc, #92]	; (80011a8 <render_neopixel+0x98>)
 800114c:	2100      	movs	r1, #0
 800114e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			buffer[var+24]=0<<(((allrgb[1].green<<var)&0x80)>0);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	3318      	adds	r3, #24
 8001156:	4a14      	ldr	r2, [pc, #80]	; (80011a8 <render_neopixel+0x98>)
 8001158:	2100      	movs	r1, #0
 800115a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			buffer[var+32]=0<<(((allrgb[1].red<<var)&0x80)>0);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	3320      	adds	r3, #32
 8001162:	4a11      	ldr	r2, [pc, #68]	; (80011a8 <render_neopixel+0x98>)
 8001164:	2100      	movs	r1, #0
 8001166:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			buffer[var+40]=0<<(((allrgb[1].blue<<var)&0x80)>0);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	3328      	adds	r3, #40	; 0x28
 800116e:	4a0e      	ldr	r2, [pc, #56]	; (80011a8 <render_neopixel+0x98>)
 8001170:	2100      	movs	r1, #0
 8001172:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (var = 0; var < 8; ++var)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	3301      	adds	r3, #1
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2b07      	cmp	r3, #7
 8001180:	d9d6      	bls.n	8001130 <render_neopixel+0x20>
		}
		HAL_TIM_PWM_Start_DMA(&htim8, TIM_CHANNEL_1, (uint32_t *)buffer, 48);
 8001182:	2330      	movs	r3, #48	; 0x30
 8001184:	4a08      	ldr	r2, [pc, #32]	; (80011a8 <render_neopixel+0x98>)
 8001186:	2100      	movs	r1, #0
 8001188:	4808      	ldr	r0, [pc, #32]	; (80011ac <render_neopixel+0x9c>)
 800118a:	f002 fb29 	bl	80037e0 <HAL_TIM_PWM_Start_DMA>
	}
	else
	{
		__NOP();
	}
}
 800118e:	e000      	b.n	8001192 <render_neopixel+0x82>
		__NOP();
 8001190:	bf00      	nop
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	200001f1 	.word	0x200001f1
 80011a0:	200001f0 	.word	0x200001f0
 80011a4:	200001f2 	.word	0x200001f2
 80011a8:	200004a4 	.word	0x200004a4
 80011ac:	20000200 	.word	0x20000200

080011b0 <prepare_next_led>:

void prepare_next_led(uint16_t position,uint8_t alpha)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	460a      	mov	r2, r1
 80011ba:	80fb      	strh	r3, [r7, #6]
 80011bc:	4613      	mov	r3, r2
 80011be:	717b      	strb	r3, [r7, #5]
	uint_fast8_t var;
	++position;
 80011c0:	88fb      	ldrh	r3, [r7, #6]
 80011c2:	3301      	adds	r3, #1
 80011c4:	80fb      	strh	r3, [r7, #6]
	if(alpha==1)
 80011c6:	797b      	ldrb	r3, [r7, #5]
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d161      	bne.n	8001290 <prepare_next_led+0xe0>
	{
		for (var = 0; var < 8; ++var) {
 80011cc:	2300      	movs	r3, #0
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	e05a      	b.n	8001288 <prepare_next_led+0xd8>
			buffer[var]=dutyoff<<(((allrgb[position].green<<var)&0x80)>0);
 80011d2:	4b63      	ldr	r3, [pc, #396]	; (8001360 <prepare_next_led+0x1b0>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	4618      	mov	r0, r3
 80011d8:	88fa      	ldrh	r2, [r7, #6]
 80011da:	4962      	ldr	r1, [pc, #392]	; (8001364 <prepare_next_led+0x1b4>)
 80011dc:	4613      	mov	r3, r2
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	4413      	add	r3, r2
 80011e2:	440b      	add	r3, r1
 80011e4:	3302      	adds	r3, #2
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	461a      	mov	r2, r3
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	bfcc      	ite	gt
 80011f8:	2301      	movgt	r3, #1
 80011fa:	2300      	movle	r3, #0
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	fa00 f303 	lsl.w	r3, r0, r3
 8001202:	b299      	uxth	r1, r3
 8001204:	4a58      	ldr	r2, [pc, #352]	; (8001368 <prepare_next_led+0x1b8>)
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			buffer[var+8]=dutyoff<<(((allrgb[position].red<<var)&0x80)>0);
 800120c:	4b54      	ldr	r3, [pc, #336]	; (8001360 <prepare_next_led+0x1b0>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	4618      	mov	r0, r3
 8001212:	88fa      	ldrh	r2, [r7, #6]
 8001214:	4953      	ldr	r1, [pc, #332]	; (8001364 <prepare_next_led+0x1b4>)
 8001216:	4613      	mov	r3, r2
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	4413      	add	r3, r2
 800121c:	440b      	add	r3, r1
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	461a      	mov	r2, r3
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800122c:	2b00      	cmp	r3, #0
 800122e:	bfcc      	ite	gt
 8001230:	2301      	movgt	r3, #1
 8001232:	2300      	movle	r3, #0
 8001234:	b2db      	uxtb	r3, r3
 8001236:	fa00 f203 	lsl.w	r2, r0, r3
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	3308      	adds	r3, #8
 800123e:	b291      	uxth	r1, r2
 8001240:	4a49      	ldr	r2, [pc, #292]	; (8001368 <prepare_next_led+0x1b8>)
 8001242:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			buffer[var+16]=dutyoff<<(((allrgb[position].blue<<var)&0x80)>0);
 8001246:	4b46      	ldr	r3, [pc, #280]	; (8001360 <prepare_next_led+0x1b0>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	4618      	mov	r0, r3
 800124c:	88fa      	ldrh	r2, [r7, #6]
 800124e:	4945      	ldr	r1, [pc, #276]	; (8001364 <prepare_next_led+0x1b4>)
 8001250:	4613      	mov	r3, r2
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	4413      	add	r3, r2
 8001256:	440b      	add	r3, r1
 8001258:	3301      	adds	r3, #1
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	461a      	mov	r2, r3
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001268:	2b00      	cmp	r3, #0
 800126a:	bfcc      	ite	gt
 800126c:	2301      	movgt	r3, #1
 800126e:	2300      	movle	r3, #0
 8001270:	b2db      	uxtb	r3, r3
 8001272:	fa00 f203 	lsl.w	r2, r0, r3
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	3310      	adds	r3, #16
 800127a:	b291      	uxth	r1, r2
 800127c:	4a3a      	ldr	r2, [pc, #232]	; (8001368 <prepare_next_led+0x1b8>)
 800127e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (var = 0; var < 8; ++var) {
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	3301      	adds	r3, #1
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	2b07      	cmp	r3, #7
 800128c:	d9a1      	bls.n	80011d2 <prepare_next_led+0x22>
			buffer[var+24]=dutyoff<<(((allrgb[position].green<<var)&0x80)>0);
			buffer[var+32]=dutyoff<<(((allrgb[position].red<<var)&0x80)>0);
			buffer[var+40]=dutyoff<<(((allrgb[position].blue<<var)&0x80)>0);
		}
	}
}
 800128e:	e061      	b.n	8001354 <prepare_next_led+0x1a4>
		for (var = 0; var < 8; ++var) {
 8001290:	2300      	movs	r3, #0
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	e05b      	b.n	800134e <prepare_next_led+0x19e>
			buffer[var+24]=dutyoff<<(((allrgb[position].green<<var)&0x80)>0);
 8001296:	4b32      	ldr	r3, [pc, #200]	; (8001360 <prepare_next_led+0x1b0>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	4618      	mov	r0, r3
 800129c:	88fa      	ldrh	r2, [r7, #6]
 800129e:	4931      	ldr	r1, [pc, #196]	; (8001364 <prepare_next_led+0x1b4>)
 80012a0:	4613      	mov	r3, r2
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	4413      	add	r3, r2
 80012a6:	440b      	add	r3, r1
 80012a8:	3302      	adds	r3, #2
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	461a      	mov	r2, r3
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	bfcc      	ite	gt
 80012bc:	2301      	movgt	r3, #1
 80012be:	2300      	movle	r3, #0
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	fa00 f203 	lsl.w	r2, r0, r3
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	3318      	adds	r3, #24
 80012ca:	b291      	uxth	r1, r2
 80012cc:	4a26      	ldr	r2, [pc, #152]	; (8001368 <prepare_next_led+0x1b8>)
 80012ce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			buffer[var+32]=dutyoff<<(((allrgb[position].red<<var)&0x80)>0);
 80012d2:	4b23      	ldr	r3, [pc, #140]	; (8001360 <prepare_next_led+0x1b0>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	4618      	mov	r0, r3
 80012d8:	88fa      	ldrh	r2, [r7, #6]
 80012da:	4922      	ldr	r1, [pc, #136]	; (8001364 <prepare_next_led+0x1b4>)
 80012dc:	4613      	mov	r3, r2
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	4413      	add	r3, r2
 80012e2:	440b      	add	r3, r1
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	461a      	mov	r2, r3
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	bfcc      	ite	gt
 80012f6:	2301      	movgt	r3, #1
 80012f8:	2300      	movle	r3, #0
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	fa00 f203 	lsl.w	r2, r0, r3
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	3320      	adds	r3, #32
 8001304:	b291      	uxth	r1, r2
 8001306:	4a18      	ldr	r2, [pc, #96]	; (8001368 <prepare_next_led+0x1b8>)
 8001308:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			buffer[var+40]=dutyoff<<(((allrgb[position].blue<<var)&0x80)>0);
 800130c:	4b14      	ldr	r3, [pc, #80]	; (8001360 <prepare_next_led+0x1b0>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	4618      	mov	r0, r3
 8001312:	88fa      	ldrh	r2, [r7, #6]
 8001314:	4913      	ldr	r1, [pc, #76]	; (8001364 <prepare_next_led+0x1b4>)
 8001316:	4613      	mov	r3, r2
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	4413      	add	r3, r2
 800131c:	440b      	add	r3, r1
 800131e:	3301      	adds	r3, #1
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	461a      	mov	r2, r3
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800132e:	2b00      	cmp	r3, #0
 8001330:	bfcc      	ite	gt
 8001332:	2301      	movgt	r3, #1
 8001334:	2300      	movle	r3, #0
 8001336:	b2db      	uxtb	r3, r3
 8001338:	fa00 f203 	lsl.w	r2, r0, r3
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	3328      	adds	r3, #40	; 0x28
 8001340:	b291      	uxth	r1, r2
 8001342:	4a09      	ldr	r2, [pc, #36]	; (8001368 <prepare_next_led+0x1b8>)
 8001344:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (var = 0; var < 8; ++var) {
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	3301      	adds	r3, #1
 800134c:	60fb      	str	r3, [r7, #12]
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	2b07      	cmp	r3, #7
 8001352:	d9a0      	bls.n	8001296 <prepare_next_led+0xe6>
}
 8001354:	bf00      	nop
 8001356:	3714      	adds	r7, #20
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	20000162 	.word	0x20000162
 8001364:	20000334 	.word	0x20000334
 8001368:	200004a4 	.word	0x200004a4

0800136c <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
	uint_fast8_t var;
	if(present_led_counting+2<numbers_of_led)
 8001374:	4b25      	ldr	r3, [pc, #148]	; (800140c <HAL_TIM_PWM_PulseFinishedCallback+0xa0>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	3302      	adds	r3, #2
 800137a:	4a25      	ldr	r2, [pc, #148]	; (8001410 <HAL_TIM_PWM_PulseFinishedCallback+0xa4>)
 800137c:	8812      	ldrh	r2, [r2, #0]
 800137e:	4293      	cmp	r3, r2
 8001380:	da0d      	bge.n	800139e <HAL_TIM_PWM_PulseFinishedCallback+0x32>
	{
		++present_led_counting;
 8001382:	4b22      	ldr	r3, [pc, #136]	; (800140c <HAL_TIM_PWM_PulseFinishedCallback+0xa0>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	3301      	adds	r3, #1
 8001388:	b2da      	uxtb	r2, r3
 800138a:	4b20      	ldr	r3, [pc, #128]	; (800140c <HAL_TIM_PWM_PulseFinishedCallback+0xa0>)
 800138c:	701a      	strb	r2, [r3, #0]
		prepare_next_led(present_led_counting,0);
 800138e:	4b1f      	ldr	r3, [pc, #124]	; (800140c <HAL_TIM_PWM_PulseFinishedCallback+0xa0>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	b29b      	uxth	r3, r3
 8001394:	2100      	movs	r1, #0
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff ff0a 	bl	80011b0 <prepare_next_led>
	{
		enable_transmit=0;
		mode=HALT;
		HAL_TIM_PWM_Stop_DMA(&htim8, TIM_CHANNEL_1);
	}
}
 800139c:	e032      	b.n	8001404 <HAL_TIM_PWM_PulseFinishedCallback+0x98>
	else if(present_led_counting<numbers_of_led)
 800139e:	4b1b      	ldr	r3, [pc, #108]	; (800140c <HAL_TIM_PWM_PulseFinishedCallback+0xa0>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	b29a      	uxth	r2, r3
 80013a4:	4b1a      	ldr	r3, [pc, #104]	; (8001410 <HAL_TIM_PWM_PulseFinishedCallback+0xa4>)
 80013a6:	881b      	ldrh	r3, [r3, #0]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d221      	bcs.n	80013f0 <HAL_TIM_PWM_PulseFinishedCallback+0x84>
		++present_led_counting;
 80013ac:	4b17      	ldr	r3, [pc, #92]	; (800140c <HAL_TIM_PWM_PulseFinishedCallback+0xa0>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	3301      	adds	r3, #1
 80013b2:	b2da      	uxtb	r2, r3
 80013b4:	4b15      	ldr	r3, [pc, #84]	; (800140c <HAL_TIM_PWM_PulseFinishedCallback+0xa0>)
 80013b6:	701a      	strb	r2, [r3, #0]
		for (var = 0; var < 8; ++var) {
 80013b8:	2300      	movs	r3, #0
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	e014      	b.n	80013e8 <HAL_TIM_PWM_PulseFinishedCallback+0x7c>
			buffer[var+24]=0;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	3318      	adds	r3, #24
 80013c2:	4a14      	ldr	r2, [pc, #80]	; (8001414 <HAL_TIM_PWM_PulseFinishedCallback+0xa8>)
 80013c4:	2100      	movs	r1, #0
 80013c6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			buffer[var+32]=0;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	3320      	adds	r3, #32
 80013ce:	4a11      	ldr	r2, [pc, #68]	; (8001414 <HAL_TIM_PWM_PulseFinishedCallback+0xa8>)
 80013d0:	2100      	movs	r1, #0
 80013d2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			buffer[var+40]=0;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	3328      	adds	r3, #40	; 0x28
 80013da:	4a0e      	ldr	r2, [pc, #56]	; (8001414 <HAL_TIM_PWM_PulseFinishedCallback+0xa8>)
 80013dc:	2100      	movs	r1, #0
 80013de:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (var = 0; var < 8; ++var) {
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	3301      	adds	r3, #1
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	2b07      	cmp	r3, #7
 80013ec:	d9e7      	bls.n	80013be <HAL_TIM_PWM_PulseFinishedCallback+0x52>
}
 80013ee:	e009      	b.n	8001404 <HAL_TIM_PWM_PulseFinishedCallback+0x98>
		enable_transmit=0;
 80013f0:	4b09      	ldr	r3, [pc, #36]	; (8001418 <HAL_TIM_PWM_PulseFinishedCallback+0xac>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	701a      	strb	r2, [r3, #0]
		mode=HALT;
 80013f6:	4b09      	ldr	r3, [pc, #36]	; (800141c <HAL_TIM_PWM_PulseFinishedCallback+0xb0>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	701a      	strb	r2, [r3, #0]
		HAL_TIM_PWM_Stop_DMA(&htim8, TIM_CHANNEL_1);
 80013fc:	2100      	movs	r1, #0
 80013fe:	4808      	ldr	r0, [pc, #32]	; (8001420 <HAL_TIM_PWM_PulseFinishedCallback+0xb4>)
 8001400:	f002 fbb6 	bl	8003b70 <HAL_TIM_PWM_Stop_DMA>
}
 8001404:	bf00      	nop
 8001406:	3710      	adds	r7, #16
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	200001f2 	.word	0x200001f2
 8001410:	20000160 	.word	0x20000160
 8001414:	200004a4 	.word	0x200004a4
 8001418:	200001f3 	.word	0x200001f3
 800141c:	200001f1 	.word	0x200001f1
 8001420:	20000200 	.word	0x20000200

08001424 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:

void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	uint_fast8_t var;
	if(present_led_counting+2<numbers_of_led)
 800142c:	4b1f      	ldr	r3, [pc, #124]	; (80014ac <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x88>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	3302      	adds	r3, #2
 8001432:	4a1f      	ldr	r2, [pc, #124]	; (80014b0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x8c>)
 8001434:	8812      	ldrh	r2, [r2, #0]
 8001436:	4293      	cmp	r3, r2
 8001438:	da0d      	bge.n	8001456 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x32>
	{
		++present_led_counting;
 800143a:	4b1c      	ldr	r3, [pc, #112]	; (80014ac <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x88>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	3301      	adds	r3, #1
 8001440:	b2da      	uxtb	r2, r3
 8001442:	4b1a      	ldr	r3, [pc, #104]	; (80014ac <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x88>)
 8001444:	701a      	strb	r2, [r3, #0]
		prepare_next_led(present_led_counting,1);
 8001446:	4b19      	ldr	r3, [pc, #100]	; (80014ac <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x88>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	b29b      	uxth	r3, r3
 800144c:	2101      	movs	r1, #1
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff feae 	bl	80011b0 <prepare_next_led>
			buffer[var]=0;
			buffer[var+8]=0;
			buffer[var+16]=0;
		}
	}
}
 8001454:	e026      	b.n	80014a4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x80>
	else if(present_led_counting<numbers_of_led)
 8001456:	4b15      	ldr	r3, [pc, #84]	; (80014ac <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x88>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	b29a      	uxth	r2, r3
 800145c:	4b14      	ldr	r3, [pc, #80]	; (80014b0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x8c>)
 800145e:	881b      	ldrh	r3, [r3, #0]
 8001460:	429a      	cmp	r2, r3
 8001462:	d21f      	bcs.n	80014a4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x80>
		++present_led_counting;
 8001464:	4b11      	ldr	r3, [pc, #68]	; (80014ac <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x88>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	3301      	adds	r3, #1
 800146a:	b2da      	uxtb	r2, r3
 800146c:	4b0f      	ldr	r3, [pc, #60]	; (80014ac <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x88>)
 800146e:	701a      	strb	r2, [r3, #0]
		for (var = 0; var < 8; ++var) {
 8001470:	2300      	movs	r3, #0
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	e013      	b.n	800149e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x7a>
			buffer[var]=0;
 8001476:	4a0f      	ldr	r2, [pc, #60]	; (80014b4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x90>)
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	2100      	movs	r1, #0
 800147c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			buffer[var+8]=0;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	3308      	adds	r3, #8
 8001484:	4a0b      	ldr	r2, [pc, #44]	; (80014b4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x90>)
 8001486:	2100      	movs	r1, #0
 8001488:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			buffer[var+16]=0;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	3310      	adds	r3, #16
 8001490:	4a08      	ldr	r2, [pc, #32]	; (80014b4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x90>)
 8001492:	2100      	movs	r1, #0
 8001494:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (var = 0; var < 8; ++var) {
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	3301      	adds	r3, #1
 800149c:	60fb      	str	r3, [r7, #12]
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	2b07      	cmp	r3, #7
 80014a2:	d9e8      	bls.n	8001476 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x52>
}
 80014a4:	bf00      	nop
 80014a6:	3710      	adds	r7, #16
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	200001f2 	.word	0x200001f2
 80014b0:	20000160 	.word	0x20000160
 80014b4:	200004a4 	.word	0x200004a4

080014b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	607b      	str	r3, [r7, #4]
 80014c2:	4b10      	ldr	r3, [pc, #64]	; (8001504 <HAL_MspInit+0x4c>)
 80014c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c6:	4a0f      	ldr	r2, [pc, #60]	; (8001504 <HAL_MspInit+0x4c>)
 80014c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014cc:	6453      	str	r3, [r2, #68]	; 0x44
 80014ce:	4b0d      	ldr	r3, [pc, #52]	; (8001504 <HAL_MspInit+0x4c>)
 80014d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014d6:	607b      	str	r3, [r7, #4]
 80014d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	603b      	str	r3, [r7, #0]
 80014de:	4b09      	ldr	r3, [pc, #36]	; (8001504 <HAL_MspInit+0x4c>)
 80014e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e2:	4a08      	ldr	r2, [pc, #32]	; (8001504 <HAL_MspInit+0x4c>)
 80014e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e8:	6413      	str	r3, [r2, #64]	; 0x40
 80014ea:	4b06      	ldr	r3, [pc, #24]	; (8001504 <HAL_MspInit+0x4c>)
 80014ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f2:	603b      	str	r3, [r7, #0]
 80014f4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80014f6:	2007      	movs	r0, #7
 80014f8:	f000 fda1 	bl	800203e <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014fc:	bf00      	nop
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40023800 	.word	0x40023800

08001508 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b08a      	sub	sp, #40	; 0x28
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001510:	f107 0314 	add.w	r3, r7, #20
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	60da      	str	r2, [r3, #12]
 800151e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a17      	ldr	r2, [pc, #92]	; (8001584 <HAL_ADC_MspInit+0x7c>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d127      	bne.n	800157a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	613b      	str	r3, [r7, #16]
 800152e:	4b16      	ldr	r3, [pc, #88]	; (8001588 <HAL_ADC_MspInit+0x80>)
 8001530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001532:	4a15      	ldr	r2, [pc, #84]	; (8001588 <HAL_ADC_MspInit+0x80>)
 8001534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001538:	6453      	str	r3, [r2, #68]	; 0x44
 800153a:	4b13      	ldr	r3, [pc, #76]	; (8001588 <HAL_ADC_MspInit+0x80>)
 800153c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001542:	613b      	str	r3, [r7, #16]
 8001544:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	60fb      	str	r3, [r7, #12]
 800154a:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <HAL_ADC_MspInit+0x80>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	4a0e      	ldr	r2, [pc, #56]	; (8001588 <HAL_ADC_MspInit+0x80>)
 8001550:	f043 0301 	orr.w	r3, r3, #1
 8001554:	6313      	str	r3, [r2, #48]	; 0x30
 8001556:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <HAL_ADC_MspInit+0x80>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001562:	2302      	movs	r3, #2
 8001564:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001566:	2303      	movs	r3, #3
 8001568:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156e:	f107 0314 	add.w	r3, r7, #20
 8001572:	4619      	mov	r1, r3
 8001574:	4805      	ldr	r0, [pc, #20]	; (800158c <HAL_ADC_MspInit+0x84>)
 8001576:	f001 f9a5 	bl	80028c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800157a:	bf00      	nop
 800157c:	3728      	adds	r7, #40	; 0x28
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40012000 	.word	0x40012000
 8001588:	40023800 	.word	0x40023800
 800158c:	40020000 	.word	0x40020000

08001590 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a22      	ldr	r2, [pc, #136]	; (8001628 <HAL_TIM_Base_MspInit+0x98>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d13e      	bne.n	8001620 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	4b21      	ldr	r3, [pc, #132]	; (800162c <HAL_TIM_Base_MspInit+0x9c>)
 80015a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015aa:	4a20      	ldr	r2, [pc, #128]	; (800162c <HAL_TIM_Base_MspInit+0x9c>)
 80015ac:	f043 0302 	orr.w	r3, r3, #2
 80015b0:	6453      	str	r3, [r2, #68]	; 0x44
 80015b2:	4b1e      	ldr	r3, [pc, #120]	; (800162c <HAL_TIM_Base_MspInit+0x9c>)
 80015b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]

    /* TIM8 DMA Init */
    /* TIM8_CH1 Init */
    hdma_tim8_ch1.Instance = DMA2_Stream2;
 80015be:	4b1c      	ldr	r3, [pc, #112]	; (8001630 <HAL_TIM_Base_MspInit+0xa0>)
 80015c0:	4a1c      	ldr	r2, [pc, #112]	; (8001634 <HAL_TIM_Base_MspInit+0xa4>)
 80015c2:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch1.Init.Channel = DMA_CHANNEL_7;
 80015c4:	4b1a      	ldr	r3, [pc, #104]	; (8001630 <HAL_TIM_Base_MspInit+0xa0>)
 80015c6:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80015ca:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015cc:	4b18      	ldr	r3, [pc, #96]	; (8001630 <HAL_TIM_Base_MspInit+0xa0>)
 80015ce:	2240      	movs	r2, #64	; 0x40
 80015d0:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80015d2:	4b17      	ldr	r3, [pc, #92]	; (8001630 <HAL_TIM_Base_MspInit+0xa0>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80015d8:	4b15      	ldr	r3, [pc, #84]	; (8001630 <HAL_TIM_Base_MspInit+0xa0>)
 80015da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015de:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015e0:	4b13      	ldr	r3, [pc, #76]	; (8001630 <HAL_TIM_Base_MspInit+0xa0>)
 80015e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015e6:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015e8:	4b11      	ldr	r3, [pc, #68]	; (8001630 <HAL_TIM_Base_MspInit+0xa0>)
 80015ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015ee:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch1.Init.Mode = DMA_NORMAL;
 80015f0:	4b0f      	ldr	r3, [pc, #60]	; (8001630 <HAL_TIM_Base_MspInit+0xa0>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 80015f6:	4b0e      	ldr	r3, [pc, #56]	; (8001630 <HAL_TIM_Base_MspInit+0xa0>)
 80015f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015fc:	621a      	str	r2, [r3, #32]
    hdma_tim8_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015fe:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <HAL_TIM_Base_MspInit+0xa0>)
 8001600:	2200      	movs	r2, #0
 8001602:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim8_ch1) != HAL_OK)
 8001604:	480a      	ldr	r0, [pc, #40]	; (8001630 <HAL_TIM_Base_MspInit+0xa0>)
 8001606:	f000 fd4f 	bl	80020a8 <HAL_DMA_Init>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8001610:	f7ff fd18 	bl	8001044 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim8_ch1);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4a06      	ldr	r2, [pc, #24]	; (8001630 <HAL_TIM_Base_MspInit+0xa0>)
 8001618:	625a      	str	r2, [r3, #36]	; 0x24
 800161a:	4a05      	ldr	r2, [pc, #20]	; (8001630 <HAL_TIM_Base_MspInit+0xa0>)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001620:	bf00      	nop
 8001622:	3710      	adds	r7, #16
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	40010400 	.word	0x40010400
 800162c:	40023800 	.word	0x40023800
 8001630:	20000248 	.word	0x20000248
 8001634:	40026440 	.word	0x40026440

08001638 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b088      	sub	sp, #32
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001640:	f107 030c 	add.w	r3, r7, #12
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
 800164e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a12      	ldr	r2, [pc, #72]	; (80016a0 <HAL_TIM_MspPostInit+0x68>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d11d      	bne.n	8001696 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	60bb      	str	r3, [r7, #8]
 800165e:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <HAL_TIM_MspPostInit+0x6c>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	4a10      	ldr	r2, [pc, #64]	; (80016a4 <HAL_TIM_MspPostInit+0x6c>)
 8001664:	f043 0304 	orr.w	r3, r3, #4
 8001668:	6313      	str	r3, [r2, #48]	; 0x30
 800166a:	4b0e      	ldr	r3, [pc, #56]	; (80016a4 <HAL_TIM_MspPostInit+0x6c>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	f003 0304 	and.w	r3, r3, #4
 8001672:	60bb      	str	r3, [r7, #8]
 8001674:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001676:	2340      	movs	r3, #64	; 0x40
 8001678:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167a:	2302      	movs	r3, #2
 800167c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167e:	2300      	movs	r3, #0
 8001680:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001682:	2300      	movs	r3, #0
 8001684:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001686:	2303      	movs	r3, #3
 8001688:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800168a:	f107 030c 	add.w	r3, r7, #12
 800168e:	4619      	mov	r1, r3
 8001690:	4805      	ldr	r0, [pc, #20]	; (80016a8 <HAL_TIM_MspPostInit+0x70>)
 8001692:	f001 f917 	bl	80028c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001696:	bf00      	nop
 8001698:	3720      	adds	r7, #32
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40010400 	.word	0x40010400
 80016a4:	40023800 	.word	0x40023800
 80016a8:	40020800 	.word	0x40020800

080016ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b08a      	sub	sp, #40	; 0x28
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b4:	f107 0314 	add.w	r3, r7, #20
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]
 80016c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a19      	ldr	r2, [pc, #100]	; (8001730 <HAL_UART_MspInit+0x84>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d12b      	bne.n	8001726 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	613b      	str	r3, [r7, #16]
 80016d2:	4b18      	ldr	r3, [pc, #96]	; (8001734 <HAL_UART_MspInit+0x88>)
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	4a17      	ldr	r2, [pc, #92]	; (8001734 <HAL_UART_MspInit+0x88>)
 80016d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016dc:	6413      	str	r3, [r2, #64]	; 0x40
 80016de:	4b15      	ldr	r3, [pc, #84]	; (8001734 <HAL_UART_MspInit+0x88>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e6:	613b      	str	r3, [r7, #16]
 80016e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	4b11      	ldr	r3, [pc, #68]	; (8001734 <HAL_UART_MspInit+0x88>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	4a10      	ldr	r2, [pc, #64]	; (8001734 <HAL_UART_MspInit+0x88>)
 80016f4:	f043 0301 	orr.w	r3, r3, #1
 80016f8:	6313      	str	r3, [r2, #48]	; 0x30
 80016fa:	4b0e      	ldr	r3, [pc, #56]	; (8001734 <HAL_UART_MspInit+0x88>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001706:	230c      	movs	r3, #12
 8001708:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170a:	2302      	movs	r3, #2
 800170c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001712:	2303      	movs	r3, #3
 8001714:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001716:	2307      	movs	r3, #7
 8001718:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800171a:	f107 0314 	add.w	r3, r7, #20
 800171e:	4619      	mov	r1, r3
 8001720:	4805      	ldr	r0, [pc, #20]	; (8001738 <HAL_UART_MspInit+0x8c>)
 8001722:	f001 f8cf 	bl	80028c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001726:	bf00      	nop
 8001728:	3728      	adds	r7, #40	; 0x28
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40004400 	.word	0x40004400
 8001734:	40023800 	.word	0x40023800
 8001738:	40020000 	.word	0x40020000

0800173c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b08c      	sub	sp, #48	; 0x30
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001744:	2300      	movs	r3, #0
 8001746:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001748:	2300      	movs	r3, #0
 800174a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 800174c:	2200      	movs	r2, #0
 800174e:	6879      	ldr	r1, [r7, #4]
 8001750:	2019      	movs	r0, #25
 8001752:	f000 fc7f 	bl	8002054 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001756:	2019      	movs	r0, #25
 8001758:	f000 fc98 	bl	800208c <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800175c:	2300      	movs	r3, #0
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	4b1f      	ldr	r3, [pc, #124]	; (80017e0 <HAL_InitTick+0xa4>)
 8001762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001764:	4a1e      	ldr	r2, [pc, #120]	; (80017e0 <HAL_InitTick+0xa4>)
 8001766:	f043 0301 	orr.w	r3, r3, #1
 800176a:	6453      	str	r3, [r2, #68]	; 0x44
 800176c:	4b1c      	ldr	r3, [pc, #112]	; (80017e0 <HAL_InitTick+0xa4>)
 800176e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001770:	f003 0301 	and.w	r3, r3, #1
 8001774:	60fb      	str	r3, [r7, #12]
 8001776:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001778:	f107 0210 	add.w	r2, r7, #16
 800177c:	f107 0314 	add.w	r3, r7, #20
 8001780:	4611      	mov	r1, r2
 8001782:	4618      	mov	r0, r3
 8001784:	f001 fee0 	bl	8003548 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001788:	f001 feca 	bl	8003520 <HAL_RCC_GetPCLK2Freq>
 800178c:	4603      	mov	r3, r0
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001794:	4a13      	ldr	r2, [pc, #76]	; (80017e4 <HAL_InitTick+0xa8>)
 8001796:	fba2 2303 	umull	r2, r3, r2, r3
 800179a:	0c9b      	lsrs	r3, r3, #18
 800179c:	3b01      	subs	r3, #1
 800179e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80017a0:	4b11      	ldr	r3, [pc, #68]	; (80017e8 <HAL_InitTick+0xac>)
 80017a2:	4a12      	ldr	r2, [pc, #72]	; (80017ec <HAL_InitTick+0xb0>)
 80017a4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80017a6:	4b10      	ldr	r3, [pc, #64]	; (80017e8 <HAL_InitTick+0xac>)
 80017a8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017ac:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80017ae:	4a0e      	ldr	r2, [pc, #56]	; (80017e8 <HAL_InitTick+0xac>)
 80017b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017b2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80017b4:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <HAL_InitTick+0xac>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ba:	4b0b      	ldr	r3, [pc, #44]	; (80017e8 <HAL_InitTick+0xac>)
 80017bc:	2200      	movs	r2, #0
 80017be:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80017c0:	4809      	ldr	r0, [pc, #36]	; (80017e8 <HAL_InitTick+0xac>)
 80017c2:	f001 fef3 	bl	80035ac <HAL_TIM_Base_Init>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d104      	bne.n	80017d6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80017cc:	4806      	ldr	r0, [pc, #24]	; (80017e8 <HAL_InitTick+0xac>)
 80017ce:	f001 ff3d 	bl	800364c <HAL_TIM_Base_Start_IT>
 80017d2:	4603      	mov	r3, r0
 80017d4:	e000      	b.n	80017d8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3730      	adds	r7, #48	; 0x30
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40023800 	.word	0x40023800
 80017e4:	431bde83 	.word	0x431bde83
 80017e8:	20000508 	.word	0x20000508
 80017ec:	40010000 	.word	0x40010000

080017f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017f4:	e7fe      	b.n	80017f4 <NMI_Handler+0x4>

080017f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017f6:	b480      	push	{r7}
 80017f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017fa:	e7fe      	b.n	80017fa <HardFault_Handler+0x4>

080017fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001800:	e7fe      	b.n	8001800 <MemManage_Handler+0x4>

08001802 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001802:	b480      	push	{r7}
 8001804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001806:	e7fe      	b.n	8001806 <BusFault_Handler+0x4>

08001808 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800180c:	e7fe      	b.n	800180c <UsageFault_Handler+0x4>

0800180e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800180e:	b480      	push	{r7}
 8001810:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr

0800182a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800182a:	b480      	push	{r7}
 800182c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800183c:	bf00      	nop
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
	...

08001848 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800184c:	4802      	ldr	r0, [pc, #8]	; (8001858 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800184e:	f002 fa61 	bl	8003d14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	20000508 	.word	0x20000508

0800185c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch1);
 8001860:	4802      	ldr	r0, [pc, #8]	; (800186c <DMA2_Stream2_IRQHandler+0x10>)
 8001862:	f000 fdb9 	bl	80023d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	20000248 	.word	0x20000248

08001870 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001878:	4a14      	ldr	r2, [pc, #80]	; (80018cc <_sbrk+0x5c>)
 800187a:	4b15      	ldr	r3, [pc, #84]	; (80018d0 <_sbrk+0x60>)
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001884:	4b13      	ldr	r3, [pc, #76]	; (80018d4 <_sbrk+0x64>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d102      	bne.n	8001892 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800188c:	4b11      	ldr	r3, [pc, #68]	; (80018d4 <_sbrk+0x64>)
 800188e:	4a12      	ldr	r2, [pc, #72]	; (80018d8 <_sbrk+0x68>)
 8001890:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001892:	4b10      	ldr	r3, [pc, #64]	; (80018d4 <_sbrk+0x64>)
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4413      	add	r3, r2
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	429a      	cmp	r2, r3
 800189e:	d207      	bcs.n	80018b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018a0:	f003 fe76 	bl	8005590 <__errno>
 80018a4:	4603      	mov	r3, r0
 80018a6:	220c      	movs	r2, #12
 80018a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018aa:	f04f 33ff 	mov.w	r3, #4294967295
 80018ae:	e009      	b.n	80018c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018b0:	4b08      	ldr	r3, [pc, #32]	; (80018d4 <_sbrk+0x64>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018b6:	4b07      	ldr	r3, [pc, #28]	; (80018d4 <_sbrk+0x64>)
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4413      	add	r3, r2
 80018be:	4a05      	ldr	r2, [pc, #20]	; (80018d4 <_sbrk+0x64>)
 80018c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018c2:	68fb      	ldr	r3, [r7, #12]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3718      	adds	r7, #24
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	20020000 	.word	0x20020000
 80018d0:	00000400 	.word	0x00000400
 80018d4:	200001f4 	.word	0x200001f4
 80018d8:	20000568 	.word	0x20000568

080018dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018e0:	4b06      	ldr	r3, [pc, #24]	; (80018fc <SystemInit+0x20>)
 80018e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018e6:	4a05      	ldr	r2, [pc, #20]	; (80018fc <SystemInit+0x20>)
 80018e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018f0:	bf00      	nop
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	e000ed00 	.word	0xe000ed00

08001900 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001900:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001938 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001904:	480d      	ldr	r0, [pc, #52]	; (800193c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001906:	490e      	ldr	r1, [pc, #56]	; (8001940 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001908:	4a0e      	ldr	r2, [pc, #56]	; (8001944 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800190a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800190c:	e002      	b.n	8001914 <LoopCopyDataInit>

0800190e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800190e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001910:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001912:	3304      	adds	r3, #4

08001914 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001914:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001916:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001918:	d3f9      	bcc.n	800190e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800191a:	4a0b      	ldr	r2, [pc, #44]	; (8001948 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800191c:	4c0b      	ldr	r4, [pc, #44]	; (800194c <LoopFillZerobss+0x26>)
  movs r3, #0
 800191e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001920:	e001      	b.n	8001926 <LoopFillZerobss>

08001922 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001922:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001924:	3204      	adds	r2, #4

08001926 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001926:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001928:	d3fb      	bcc.n	8001922 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800192a:	f7ff ffd7 	bl	80018dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800192e:	f003 fe35 	bl	800559c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001932:	f7ff f91d 	bl	8000b70 <main>
  bx  lr    
 8001936:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001938:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800193c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001940:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001944:	08005f08 	.word	0x08005f08
  ldr r2, =_sbss
 8001948:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800194c:	20000564 	.word	0x20000564

08001950 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001950:	e7fe      	b.n	8001950 <ADC_IRQHandler>
	...

08001954 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001958:	4b0e      	ldr	r3, [pc, #56]	; (8001994 <HAL_Init+0x40>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a0d      	ldr	r2, [pc, #52]	; (8001994 <HAL_Init+0x40>)
 800195e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001962:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001964:	4b0b      	ldr	r3, [pc, #44]	; (8001994 <HAL_Init+0x40>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a0a      	ldr	r2, [pc, #40]	; (8001994 <HAL_Init+0x40>)
 800196a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800196e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001970:	4b08      	ldr	r3, [pc, #32]	; (8001994 <HAL_Init+0x40>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a07      	ldr	r2, [pc, #28]	; (8001994 <HAL_Init+0x40>)
 8001976:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800197a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800197c:	2003      	movs	r0, #3
 800197e:	f000 fb5e 	bl	800203e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001982:	2000      	movs	r0, #0
 8001984:	f7ff feda 	bl	800173c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001988:	f7ff fd96 	bl	80014b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40023c00 	.word	0x40023c00

08001998 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800199c:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <HAL_IncTick+0x20>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	461a      	mov	r2, r3
 80019a2:	4b06      	ldr	r3, [pc, #24]	; (80019bc <HAL_IncTick+0x24>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4413      	add	r3, r2
 80019a8:	4a04      	ldr	r2, [pc, #16]	; (80019bc <HAL_IncTick+0x24>)
 80019aa:	6013      	str	r3, [r2, #0]
}
 80019ac:	bf00      	nop
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	2000016c 	.word	0x2000016c
 80019bc:	20000550 	.word	0x20000550

080019c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  return uwTick;
 80019c4:	4b03      	ldr	r3, [pc, #12]	; (80019d4 <HAL_GetTick+0x14>)
 80019c6:	681b      	ldr	r3, [r3, #0]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	20000550 	.word	0x20000550

080019d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019e0:	f7ff ffee 	bl	80019c0 <HAL_GetTick>
 80019e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019f0:	d005      	beq.n	80019fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019f2:	4b0a      	ldr	r3, [pc, #40]	; (8001a1c <HAL_Delay+0x44>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	461a      	mov	r2, r3
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	4413      	add	r3, r2
 80019fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019fe:	bf00      	nop
 8001a00:	f7ff ffde 	bl	80019c0 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	68fa      	ldr	r2, [r7, #12]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d8f7      	bhi.n	8001a00 <HAL_Delay+0x28>
  {
  }
}
 8001a10:	bf00      	nop
 8001a12:	bf00      	nop
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	2000016c 	.word	0x2000016c

08001a20 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d101      	bne.n	8001a36 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e033      	b.n	8001a9e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d109      	bne.n	8001a52 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f7ff fd62 	bl	8001508 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a56:	f003 0310 	and.w	r3, r3, #16
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d118      	bne.n	8001a90 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a62:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a66:	f023 0302 	bic.w	r3, r3, #2
 8001a6a:	f043 0202 	orr.w	r2, r3, #2
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 f93a 	bl	8001cec <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a82:	f023 0303 	bic.w	r3, r3, #3
 8001a86:	f043 0201 	orr.w	r2, r3, #1
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	641a      	str	r2, [r3, #64]	; 0x40
 8001a8e:	e001      	b.n	8001a94 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
	...

08001aa8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d101      	bne.n	8001ac4 <HAL_ADC_ConfigChannel+0x1c>
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	e105      	b.n	8001cd0 <HAL_ADC_ConfigChannel+0x228>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2b09      	cmp	r3, #9
 8001ad2:	d925      	bls.n	8001b20 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	68d9      	ldr	r1, [r3, #12]
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	4413      	add	r3, r2
 8001ae8:	3b1e      	subs	r3, #30
 8001aea:	2207      	movs	r2, #7
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	43da      	mvns	r2, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	400a      	ands	r2, r1
 8001af8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	68d9      	ldr	r1, [r3, #12]
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	689a      	ldr	r2, [r3, #8]
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	4403      	add	r3, r0
 8001b12:	3b1e      	subs	r3, #30
 8001b14:	409a      	lsls	r2, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	60da      	str	r2, [r3, #12]
 8001b1e:	e022      	b.n	8001b66 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	6919      	ldr	r1, [r3, #16]
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	4613      	mov	r3, r2
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	4413      	add	r3, r2
 8001b34:	2207      	movs	r2, #7
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	43da      	mvns	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	400a      	ands	r2, r1
 8001b42:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	6919      	ldr	r1, [r3, #16]
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	689a      	ldr	r2, [r3, #8]
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	4618      	mov	r0, r3
 8001b56:	4603      	mov	r3, r0
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	4403      	add	r3, r0
 8001b5c:	409a      	lsls	r2, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	430a      	orrs	r2, r1
 8001b64:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	2b06      	cmp	r3, #6
 8001b6c:	d824      	bhi.n	8001bb8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685a      	ldr	r2, [r3, #4]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	4413      	add	r3, r2
 8001b7e:	3b05      	subs	r3, #5
 8001b80:	221f      	movs	r2, #31
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	43da      	mvns	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	400a      	ands	r2, r1
 8001b8e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685a      	ldr	r2, [r3, #4]
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	4413      	add	r3, r2
 8001ba8:	3b05      	subs	r3, #5
 8001baa:	fa00 f203 	lsl.w	r2, r0, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	635a      	str	r2, [r3, #52]	; 0x34
 8001bb6:	e04c      	b.n	8001c52 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	2b0c      	cmp	r3, #12
 8001bbe:	d824      	bhi.n	8001c0a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685a      	ldr	r2, [r3, #4]
 8001bca:	4613      	mov	r3, r2
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	4413      	add	r3, r2
 8001bd0:	3b23      	subs	r3, #35	; 0x23
 8001bd2:	221f      	movs	r2, #31
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	43da      	mvns	r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	400a      	ands	r2, r1
 8001be0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	4618      	mov	r0, r3
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685a      	ldr	r2, [r3, #4]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4413      	add	r3, r2
 8001bfa:	3b23      	subs	r3, #35	; 0x23
 8001bfc:	fa00 f203 	lsl.w	r2, r0, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	430a      	orrs	r2, r1
 8001c06:	631a      	str	r2, [r3, #48]	; 0x30
 8001c08:	e023      	b.n	8001c52 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685a      	ldr	r2, [r3, #4]
 8001c14:	4613      	mov	r3, r2
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	4413      	add	r3, r2
 8001c1a:	3b41      	subs	r3, #65	; 0x41
 8001c1c:	221f      	movs	r2, #31
 8001c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c22:	43da      	mvns	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	400a      	ands	r2, r1
 8001c2a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	4618      	mov	r0, r3
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685a      	ldr	r2, [r3, #4]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	4413      	add	r3, r2
 8001c44:	3b41      	subs	r3, #65	; 0x41
 8001c46:	fa00 f203 	lsl.w	r2, r0, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c52:	4b22      	ldr	r3, [pc, #136]	; (8001cdc <HAL_ADC_ConfigChannel+0x234>)
 8001c54:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a21      	ldr	r2, [pc, #132]	; (8001ce0 <HAL_ADC_ConfigChannel+0x238>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d109      	bne.n	8001c74 <HAL_ADC_ConfigChannel+0x1cc>
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2b12      	cmp	r3, #18
 8001c66:	d105      	bne.n	8001c74 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a19      	ldr	r2, [pc, #100]	; (8001ce0 <HAL_ADC_ConfigChannel+0x238>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d123      	bne.n	8001cc6 <HAL_ADC_ConfigChannel+0x21e>
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2b10      	cmp	r3, #16
 8001c84:	d003      	beq.n	8001c8e <HAL_ADC_ConfigChannel+0x1e6>
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2b11      	cmp	r3, #17
 8001c8c:	d11b      	bne.n	8001cc6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2b10      	cmp	r3, #16
 8001ca0:	d111      	bne.n	8001cc6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ca2:	4b10      	ldr	r3, [pc, #64]	; (8001ce4 <HAL_ADC_ConfigChannel+0x23c>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a10      	ldr	r2, [pc, #64]	; (8001ce8 <HAL_ADC_ConfigChannel+0x240>)
 8001ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8001cac:	0c9a      	lsrs	r2, r3, #18
 8001cae:	4613      	mov	r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	4413      	add	r3, r2
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001cb8:	e002      	b.n	8001cc0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	3b01      	subs	r3, #1
 8001cbe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1f9      	bne.n	8001cba <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001cce:	2300      	movs	r3, #0
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3714      	adds	r7, #20
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	40012300 	.word	0x40012300
 8001ce0:	40012000 	.word	0x40012000
 8001ce4:	20000164 	.word	0x20000164
 8001ce8:	431bde83 	.word	0x431bde83

08001cec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cf4:	4b79      	ldr	r3, [pc, #484]	; (8001edc <ADC_Init+0x1f0>)
 8001cf6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	685a      	ldr	r2, [r3, #4]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	431a      	orrs	r2, r3
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	685a      	ldr	r2, [r3, #4]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d20:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	6859      	ldr	r1, [r3, #4]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	691b      	ldr	r3, [r3, #16]
 8001d2c:	021a      	lsls	r2, r3, #8
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	430a      	orrs	r2, r1
 8001d34:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	685a      	ldr	r2, [r3, #4]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001d44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	6859      	ldr	r1, [r3, #4]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689a      	ldr	r2, [r3, #8]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	430a      	orrs	r2, r1
 8001d56:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	689a      	ldr	r2, [r3, #8]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	6899      	ldr	r1, [r3, #8]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	68da      	ldr	r2, [r3, #12]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	430a      	orrs	r2, r1
 8001d78:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d7e:	4a58      	ldr	r2, [pc, #352]	; (8001ee0 <ADC_Init+0x1f4>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d022      	beq.n	8001dca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	689a      	ldr	r2, [r3, #8]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d92:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	6899      	ldr	r1, [r3, #8]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	430a      	orrs	r2, r1
 8001da4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	689a      	ldr	r2, [r3, #8]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001db4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	6899      	ldr	r1, [r3, #8]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	609a      	str	r2, [r3, #8]
 8001dc8:	e00f      	b.n	8001dea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	689a      	ldr	r2, [r3, #8]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001dd8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	689a      	ldr	r2, [r3, #8]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001de8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	689a      	ldr	r2, [r3, #8]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f022 0202 	bic.w	r2, r2, #2
 8001df8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	6899      	ldr	r1, [r3, #8]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	7e1b      	ldrb	r3, [r3, #24]
 8001e04:	005a      	lsls	r2, r3, #1
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	430a      	orrs	r2, r1
 8001e0c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d01b      	beq.n	8001e50 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	685a      	ldr	r2, [r3, #4]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e26:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	685a      	ldr	r2, [r3, #4]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001e36:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	6859      	ldr	r1, [r3, #4]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e42:	3b01      	subs	r3, #1
 8001e44:	035a      	lsls	r2, r3, #13
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	605a      	str	r2, [r3, #4]
 8001e4e:	e007      	b.n	8001e60 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	685a      	ldr	r2, [r3, #4]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e5e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001e6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	69db      	ldr	r3, [r3, #28]
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	051a      	lsls	r2, r3, #20
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	430a      	orrs	r2, r1
 8001e84:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	689a      	ldr	r2, [r3, #8]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	6899      	ldr	r1, [r3, #8]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ea2:	025a      	lsls	r2, r3, #9
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	689a      	ldr	r2, [r3, #8]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001eba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	6899      	ldr	r1, [r3, #8]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	695b      	ldr	r3, [r3, #20]
 8001ec6:	029a      	lsls	r2, r3, #10
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	609a      	str	r2, [r3, #8]
}
 8001ed0:	bf00      	nop
 8001ed2:	3714      	adds	r7, #20
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr
 8001edc:	40012300 	.word	0x40012300
 8001ee0:	0f000001 	.word	0x0f000001

08001ee4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f003 0307 	and.w	r3, r3, #7
 8001ef2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ef4:	4b0c      	ldr	r3, [pc, #48]	; (8001f28 <__NVIC_SetPriorityGrouping+0x44>)
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001efa:	68ba      	ldr	r2, [r7, #8]
 8001efc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f00:	4013      	ands	r3, r2
 8001f02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f16:	4a04      	ldr	r2, [pc, #16]	; (8001f28 <__NVIC_SetPriorityGrouping+0x44>)
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	60d3      	str	r3, [r2, #12]
}
 8001f1c:	bf00      	nop
 8001f1e:	3714      	adds	r7, #20
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	e000ed00 	.word	0xe000ed00

08001f2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f30:	4b04      	ldr	r3, [pc, #16]	; (8001f44 <__NVIC_GetPriorityGrouping+0x18>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	0a1b      	lsrs	r3, r3, #8
 8001f36:	f003 0307 	and.w	r3, r3, #7
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr
 8001f44:	e000ed00 	.word	0xe000ed00

08001f48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4603      	mov	r3, r0
 8001f50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	db0b      	blt.n	8001f72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f5a:	79fb      	ldrb	r3, [r7, #7]
 8001f5c:	f003 021f 	and.w	r2, r3, #31
 8001f60:	4907      	ldr	r1, [pc, #28]	; (8001f80 <__NVIC_EnableIRQ+0x38>)
 8001f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f66:	095b      	lsrs	r3, r3, #5
 8001f68:	2001      	movs	r0, #1
 8001f6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f72:	bf00      	nop
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	e000e100 	.word	0xe000e100

08001f84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	6039      	str	r1, [r7, #0]
 8001f8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	db0a      	blt.n	8001fae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	b2da      	uxtb	r2, r3
 8001f9c:	490c      	ldr	r1, [pc, #48]	; (8001fd0 <__NVIC_SetPriority+0x4c>)
 8001f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa2:	0112      	lsls	r2, r2, #4
 8001fa4:	b2d2      	uxtb	r2, r2
 8001fa6:	440b      	add	r3, r1
 8001fa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fac:	e00a      	b.n	8001fc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	b2da      	uxtb	r2, r3
 8001fb2:	4908      	ldr	r1, [pc, #32]	; (8001fd4 <__NVIC_SetPriority+0x50>)
 8001fb4:	79fb      	ldrb	r3, [r7, #7]
 8001fb6:	f003 030f 	and.w	r3, r3, #15
 8001fba:	3b04      	subs	r3, #4
 8001fbc:	0112      	lsls	r2, r2, #4
 8001fbe:	b2d2      	uxtb	r2, r2
 8001fc0:	440b      	add	r3, r1
 8001fc2:	761a      	strb	r2, [r3, #24]
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	e000e100 	.word	0xe000e100
 8001fd4:	e000ed00 	.word	0xe000ed00

08001fd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b089      	sub	sp, #36	; 0x24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f003 0307 	and.w	r3, r3, #7
 8001fea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	f1c3 0307 	rsb	r3, r3, #7
 8001ff2:	2b04      	cmp	r3, #4
 8001ff4:	bf28      	it	cs
 8001ff6:	2304      	movcs	r3, #4
 8001ff8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	3304      	adds	r3, #4
 8001ffe:	2b06      	cmp	r3, #6
 8002000:	d902      	bls.n	8002008 <NVIC_EncodePriority+0x30>
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	3b03      	subs	r3, #3
 8002006:	e000      	b.n	800200a <NVIC_EncodePriority+0x32>
 8002008:	2300      	movs	r3, #0
 800200a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800200c:	f04f 32ff 	mov.w	r2, #4294967295
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	43da      	mvns	r2, r3
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	401a      	ands	r2, r3
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002020:	f04f 31ff 	mov.w	r1, #4294967295
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	fa01 f303 	lsl.w	r3, r1, r3
 800202a:	43d9      	mvns	r1, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002030:	4313      	orrs	r3, r2
         );
}
 8002032:	4618      	mov	r0, r3
 8002034:	3724      	adds	r7, #36	; 0x24
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b082      	sub	sp, #8
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f7ff ff4c 	bl	8001ee4 <__NVIC_SetPriorityGrouping>
}
 800204c:	bf00      	nop
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0
 800205a:	4603      	mov	r3, r0
 800205c:	60b9      	str	r1, [r7, #8]
 800205e:	607a      	str	r2, [r7, #4]
 8002060:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002062:	2300      	movs	r3, #0
 8002064:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002066:	f7ff ff61 	bl	8001f2c <__NVIC_GetPriorityGrouping>
 800206a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	68b9      	ldr	r1, [r7, #8]
 8002070:	6978      	ldr	r0, [r7, #20]
 8002072:	f7ff ffb1 	bl	8001fd8 <NVIC_EncodePriority>
 8002076:	4602      	mov	r2, r0
 8002078:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800207c:	4611      	mov	r1, r2
 800207e:	4618      	mov	r0, r3
 8002080:	f7ff ff80 	bl	8001f84 <__NVIC_SetPriority>
}
 8002084:	bf00      	nop
 8002086:	3718      	adds	r7, #24
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	4603      	mov	r3, r0
 8002094:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209a:	4618      	mov	r0, r3
 800209c:	f7ff ff54 	bl	8001f48 <__NVIC_EnableIRQ>
}
 80020a0:	bf00      	nop
 80020a2:	3708      	adds	r7, #8
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b086      	sub	sp, #24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80020b0:	2300      	movs	r3, #0
 80020b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80020b4:	f7ff fc84 	bl	80019c0 <HAL_GetTick>
 80020b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d101      	bne.n	80020c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e099      	b.n	80021f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2202      	movs	r2, #2
 80020c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f022 0201 	bic.w	r2, r2, #1
 80020e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020e4:	e00f      	b.n	8002106 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020e6:	f7ff fc6b 	bl	80019c0 <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	2b05      	cmp	r3, #5
 80020f2:	d908      	bls.n	8002106 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2220      	movs	r2, #32
 80020f8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2203      	movs	r2, #3
 80020fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e078      	b.n	80021f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0301 	and.w	r3, r3, #1
 8002110:	2b00      	cmp	r3, #0
 8002112:	d1e8      	bne.n	80020e6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800211c:	697a      	ldr	r2, [r7, #20]
 800211e:	4b38      	ldr	r3, [pc, #224]	; (8002200 <HAL_DMA_Init+0x158>)
 8002120:	4013      	ands	r3, r2
 8002122:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685a      	ldr	r2, [r3, #4]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002132:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800213e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800214a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6a1b      	ldr	r3, [r3, #32]
 8002150:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002152:	697a      	ldr	r2, [r7, #20]
 8002154:	4313      	orrs	r3, r2
 8002156:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215c:	2b04      	cmp	r3, #4
 800215e:	d107      	bne.n	8002170 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002168:	4313      	orrs	r3, r2
 800216a:	697a      	ldr	r2, [r7, #20]
 800216c:	4313      	orrs	r3, r2
 800216e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	697a      	ldr	r2, [r7, #20]
 8002176:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	695b      	ldr	r3, [r3, #20]
 800217e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	f023 0307 	bic.w	r3, r3, #7
 8002186:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218c:	697a      	ldr	r2, [r7, #20]
 800218e:	4313      	orrs	r3, r2
 8002190:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002196:	2b04      	cmp	r3, #4
 8002198:	d117      	bne.n	80021ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800219e:	697a      	ldr	r2, [r7, #20]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d00e      	beq.n	80021ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f000 fb0d 	bl	80027cc <DMA_CheckFifoParam>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d008      	beq.n	80021ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2240      	movs	r2, #64	; 0x40
 80021bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2201      	movs	r2, #1
 80021c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80021c6:	2301      	movs	r3, #1
 80021c8:	e016      	b.n	80021f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	697a      	ldr	r2, [r7, #20]
 80021d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 fac4 	bl	8002760 <DMA_CalcBaseAndBitshift>
 80021d8:	4603      	mov	r3, r0
 80021da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e0:	223f      	movs	r2, #63	; 0x3f
 80021e2:	409a      	lsls	r2, r3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2201      	movs	r2, #1
 80021f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3718      	adds	r7, #24
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	f010803f 	.word	0xf010803f

08002204 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	607a      	str	r2, [r7, #4]
 8002210:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002212:	2300      	movs	r3, #0
 8002214:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002222:	2b01      	cmp	r3, #1
 8002224:	d101      	bne.n	800222a <HAL_DMA_Start_IT+0x26>
 8002226:	2302      	movs	r3, #2
 8002228:	e040      	b.n	80022ac <HAL_DMA_Start_IT+0xa8>
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2201      	movs	r2, #1
 800222e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b01      	cmp	r3, #1
 800223c:	d12f      	bne.n	800229e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2202      	movs	r2, #2
 8002242:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2200      	movs	r2, #0
 800224a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	68b9      	ldr	r1, [r7, #8]
 8002252:	68f8      	ldr	r0, [r7, #12]
 8002254:	f000 fa56 	bl	8002704 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800225c:	223f      	movs	r2, #63	; 0x3f
 800225e:	409a      	lsls	r2, r3
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f042 0216 	orr.w	r2, r2, #22
 8002272:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002278:	2b00      	cmp	r3, #0
 800227a:	d007      	beq.n	800228c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f042 0208 	orr.w	r2, r2, #8
 800228a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f042 0201 	orr.w	r2, r2, #1
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	e005      	b.n	80022aa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80022a6:	2302      	movs	r3, #2
 80022a8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80022aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3718      	adds	r7, #24
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80022c2:	f7ff fb7d 	bl	80019c0 <HAL_GetTick>
 80022c6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d008      	beq.n	80022e6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2280      	movs	r2, #128	; 0x80
 80022d8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e052      	b.n	800238c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f022 0216 	bic.w	r2, r2, #22
 80022f4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	695a      	ldr	r2, [r3, #20]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002304:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230a:	2b00      	cmp	r3, #0
 800230c:	d103      	bne.n	8002316 <HAL_DMA_Abort+0x62>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002312:	2b00      	cmp	r3, #0
 8002314:	d007      	beq.n	8002326 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f022 0208 	bic.w	r2, r2, #8
 8002324:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 0201 	bic.w	r2, r2, #1
 8002334:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002336:	e013      	b.n	8002360 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002338:	f7ff fb42 	bl	80019c0 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b05      	cmp	r3, #5
 8002344:	d90c      	bls.n	8002360 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2220      	movs	r2, #32
 800234a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2203      	movs	r2, #3
 8002350:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e015      	b.n	800238c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1e4      	bne.n	8002338 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002372:	223f      	movs	r2, #63	; 0x3f
 8002374:	409a      	lsls	r2, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2201      	movs	r2, #1
 800237e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800238a:	2300      	movs	r3, #0
}
 800238c:	4618      	mov	r0, r3
 800238e:	3710      	adds	r7, #16
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d004      	beq.n	80023b2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2280      	movs	r2, #128	; 0x80
 80023ac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e00c      	b.n	80023cc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2205      	movs	r2, #5
 80023b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f022 0201 	bic.w	r2, r2, #1
 80023c8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80023ca:	2300      	movs	r3, #0
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80023e0:	2300      	movs	r3, #0
 80023e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80023e4:	4b92      	ldr	r3, [pc, #584]	; (8002630 <HAL_DMA_IRQHandler+0x258>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a92      	ldr	r2, [pc, #584]	; (8002634 <HAL_DMA_IRQHandler+0x25c>)
 80023ea:	fba2 2303 	umull	r2, r3, r2, r3
 80023ee:	0a9b      	lsrs	r3, r3, #10
 80023f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002402:	2208      	movs	r2, #8
 8002404:	409a      	lsls	r2, r3
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	4013      	ands	r3, r2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d01a      	beq.n	8002444 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0304 	and.w	r3, r3, #4
 8002418:	2b00      	cmp	r3, #0
 800241a:	d013      	beq.n	8002444 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f022 0204 	bic.w	r2, r2, #4
 800242a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002430:	2208      	movs	r2, #8
 8002432:	409a      	lsls	r2, r3
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800243c:	f043 0201 	orr.w	r2, r3, #1
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002448:	2201      	movs	r2, #1
 800244a:	409a      	lsls	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	4013      	ands	r3, r2
 8002450:	2b00      	cmp	r3, #0
 8002452:	d012      	beq.n	800247a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	695b      	ldr	r3, [r3, #20]
 800245a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800245e:	2b00      	cmp	r3, #0
 8002460:	d00b      	beq.n	800247a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002466:	2201      	movs	r2, #1
 8002468:	409a      	lsls	r2, r3
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002472:	f043 0202 	orr.w	r2, r3, #2
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800247e:	2204      	movs	r2, #4
 8002480:	409a      	lsls	r2, r3
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	4013      	ands	r3, r2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d012      	beq.n	80024b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0302 	and.w	r3, r3, #2
 8002494:	2b00      	cmp	r3, #0
 8002496:	d00b      	beq.n	80024b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800249c:	2204      	movs	r2, #4
 800249e:	409a      	lsls	r2, r3
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a8:	f043 0204 	orr.w	r2, r3, #4
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b4:	2210      	movs	r2, #16
 80024b6:	409a      	lsls	r2, r3
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	4013      	ands	r3, r2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d043      	beq.n	8002548 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0308 	and.w	r3, r3, #8
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d03c      	beq.n	8002548 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d2:	2210      	movs	r2, #16
 80024d4:	409a      	lsls	r2, r3
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d018      	beq.n	800251a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d108      	bne.n	8002508 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d024      	beq.n	8002548 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	4798      	blx	r3
 8002506:	e01f      	b.n	8002548 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800250c:	2b00      	cmp	r3, #0
 800250e:	d01b      	beq.n	8002548 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	4798      	blx	r3
 8002518:	e016      	b.n	8002548 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002524:	2b00      	cmp	r3, #0
 8002526:	d107      	bne.n	8002538 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f022 0208 	bic.w	r2, r2, #8
 8002536:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253c:	2b00      	cmp	r3, #0
 800253e:	d003      	beq.n	8002548 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800254c:	2220      	movs	r2, #32
 800254e:	409a      	lsls	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	4013      	ands	r3, r2
 8002554:	2b00      	cmp	r3, #0
 8002556:	f000 808e 	beq.w	8002676 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0310 	and.w	r3, r3, #16
 8002564:	2b00      	cmp	r3, #0
 8002566:	f000 8086 	beq.w	8002676 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800256e:	2220      	movs	r2, #32
 8002570:	409a      	lsls	r2, r3
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b05      	cmp	r3, #5
 8002580:	d136      	bne.n	80025f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f022 0216 	bic.w	r2, r2, #22
 8002590:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	695a      	ldr	r2, [r3, #20]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d103      	bne.n	80025b2 <HAL_DMA_IRQHandler+0x1da>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d007      	beq.n	80025c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f022 0208 	bic.w	r2, r2, #8
 80025c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c6:	223f      	movs	r2, #63	; 0x3f
 80025c8:	409a      	lsls	r2, r3
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2201      	movs	r2, #1
 80025d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d07d      	beq.n	80026e2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	4798      	blx	r3
        }
        return;
 80025ee:	e078      	b.n	80026e2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d01c      	beq.n	8002638 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d108      	bne.n	800261e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002610:	2b00      	cmp	r3, #0
 8002612:	d030      	beq.n	8002676 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	4798      	blx	r3
 800261c:	e02b      	b.n	8002676 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002622:	2b00      	cmp	r3, #0
 8002624:	d027      	beq.n	8002676 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	4798      	blx	r3
 800262e:	e022      	b.n	8002676 <HAL_DMA_IRQHandler+0x29e>
 8002630:	20000164 	.word	0x20000164
 8002634:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002642:	2b00      	cmp	r3, #0
 8002644:	d10f      	bne.n	8002666 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f022 0210 	bic.w	r2, r2, #16
 8002654:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2201      	movs	r2, #1
 800265a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800266a:	2b00      	cmp	r3, #0
 800266c:	d003      	beq.n	8002676 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800267a:	2b00      	cmp	r3, #0
 800267c:	d032      	beq.n	80026e4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	2b00      	cmp	r3, #0
 8002688:	d022      	beq.n	80026d0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2205      	movs	r2, #5
 800268e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f022 0201 	bic.w	r2, r2, #1
 80026a0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	3301      	adds	r3, #1
 80026a6:	60bb      	str	r3, [r7, #8]
 80026a8:	697a      	ldr	r2, [r7, #20]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d307      	bcc.n	80026be <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0301 	and.w	r3, r3, #1
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d1f2      	bne.n	80026a2 <HAL_DMA_IRQHandler+0x2ca>
 80026bc:	e000      	b.n	80026c0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80026be:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d005      	beq.n	80026e4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	4798      	blx	r3
 80026e0:	e000      	b.n	80026e4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80026e2:	bf00      	nop
    }
  }
}
 80026e4:	3718      	adds	r7, #24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop

080026ec <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002704:	b480      	push	{r7}
 8002706:	b085      	sub	sp, #20
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
 8002710:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002720:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	683a      	ldr	r2, [r7, #0]
 8002728:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	2b40      	cmp	r3, #64	; 0x40
 8002730:	d108      	bne.n	8002744 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68ba      	ldr	r2, [r7, #8]
 8002740:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002742:	e007      	b.n	8002754 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	68ba      	ldr	r2, [r7, #8]
 800274a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	60da      	str	r2, [r3, #12]
}
 8002754:	bf00      	nop
 8002756:	3714      	adds	r7, #20
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	b2db      	uxtb	r3, r3
 800276e:	3b10      	subs	r3, #16
 8002770:	4a14      	ldr	r2, [pc, #80]	; (80027c4 <DMA_CalcBaseAndBitshift+0x64>)
 8002772:	fba2 2303 	umull	r2, r3, r2, r3
 8002776:	091b      	lsrs	r3, r3, #4
 8002778:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800277a:	4a13      	ldr	r2, [pc, #76]	; (80027c8 <DMA_CalcBaseAndBitshift+0x68>)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	4413      	add	r3, r2
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	461a      	mov	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2b03      	cmp	r3, #3
 800278c:	d909      	bls.n	80027a2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002796:	f023 0303 	bic.w	r3, r3, #3
 800279a:	1d1a      	adds	r2, r3, #4
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	659a      	str	r2, [r3, #88]	; 0x58
 80027a0:	e007      	b.n	80027b2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80027aa:	f023 0303 	bic.w	r3, r3, #3
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3714      	adds	r7, #20
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	aaaaaaab 	.word	0xaaaaaaab
 80027c8:	08005ebc 	.word	0x08005ebc

080027cc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027d4:	2300      	movs	r3, #0
 80027d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027dc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d11f      	bne.n	8002826 <DMA_CheckFifoParam+0x5a>
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	2b03      	cmp	r3, #3
 80027ea:	d856      	bhi.n	800289a <DMA_CheckFifoParam+0xce>
 80027ec:	a201      	add	r2, pc, #4	; (adr r2, 80027f4 <DMA_CheckFifoParam+0x28>)
 80027ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027f2:	bf00      	nop
 80027f4:	08002805 	.word	0x08002805
 80027f8:	08002817 	.word	0x08002817
 80027fc:	08002805 	.word	0x08002805
 8002800:	0800289b 	.word	0x0800289b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002808:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d046      	beq.n	800289e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002814:	e043      	b.n	800289e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800281e:	d140      	bne.n	80028a2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002824:	e03d      	b.n	80028a2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800282e:	d121      	bne.n	8002874 <DMA_CheckFifoParam+0xa8>
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	2b03      	cmp	r3, #3
 8002834:	d837      	bhi.n	80028a6 <DMA_CheckFifoParam+0xda>
 8002836:	a201      	add	r2, pc, #4	; (adr r2, 800283c <DMA_CheckFifoParam+0x70>)
 8002838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800283c:	0800284d 	.word	0x0800284d
 8002840:	08002853 	.word	0x08002853
 8002844:	0800284d 	.word	0x0800284d
 8002848:	08002865 	.word	0x08002865
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	73fb      	strb	r3, [r7, #15]
      break;
 8002850:	e030      	b.n	80028b4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002856:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d025      	beq.n	80028aa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002862:	e022      	b.n	80028aa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002868:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800286c:	d11f      	bne.n	80028ae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002872:	e01c      	b.n	80028ae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	2b02      	cmp	r3, #2
 8002878:	d903      	bls.n	8002882 <DMA_CheckFifoParam+0xb6>
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	2b03      	cmp	r3, #3
 800287e:	d003      	beq.n	8002888 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002880:	e018      	b.n	80028b4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	73fb      	strb	r3, [r7, #15]
      break;
 8002886:	e015      	b.n	80028b4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800288c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d00e      	beq.n	80028b2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	73fb      	strb	r3, [r7, #15]
      break;
 8002898:	e00b      	b.n	80028b2 <DMA_CheckFifoParam+0xe6>
      break;
 800289a:	bf00      	nop
 800289c:	e00a      	b.n	80028b4 <DMA_CheckFifoParam+0xe8>
      break;
 800289e:	bf00      	nop
 80028a0:	e008      	b.n	80028b4 <DMA_CheckFifoParam+0xe8>
      break;
 80028a2:	bf00      	nop
 80028a4:	e006      	b.n	80028b4 <DMA_CheckFifoParam+0xe8>
      break;
 80028a6:	bf00      	nop
 80028a8:	e004      	b.n	80028b4 <DMA_CheckFifoParam+0xe8>
      break;
 80028aa:	bf00      	nop
 80028ac:	e002      	b.n	80028b4 <DMA_CheckFifoParam+0xe8>
      break;   
 80028ae:	bf00      	nop
 80028b0:	e000      	b.n	80028b4 <DMA_CheckFifoParam+0xe8>
      break;
 80028b2:	bf00      	nop
    }
  } 
  
  return status; 
 80028b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3714      	adds	r7, #20
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop

080028c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b089      	sub	sp, #36	; 0x24
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028ce:	2300      	movs	r3, #0
 80028d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028d2:	2300      	movs	r3, #0
 80028d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028d6:	2300      	movs	r3, #0
 80028d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028da:	2300      	movs	r3, #0
 80028dc:	61fb      	str	r3, [r7, #28]
 80028de:	e16b      	b.n	8002bb8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028e0:	2201      	movs	r2, #1
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	697a      	ldr	r2, [r7, #20]
 80028f0:	4013      	ands	r3, r2
 80028f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	f040 815a 	bne.w	8002bb2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f003 0303 	and.w	r3, r3, #3
 8002906:	2b01      	cmp	r3, #1
 8002908:	d005      	beq.n	8002916 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002912:	2b02      	cmp	r3, #2
 8002914:	d130      	bne.n	8002978 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	2203      	movs	r2, #3
 8002922:	fa02 f303 	lsl.w	r3, r2, r3
 8002926:	43db      	mvns	r3, r3
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	4013      	ands	r3, r2
 800292c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	68da      	ldr	r2, [r3, #12]
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	fa02 f303 	lsl.w	r3, r2, r3
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	4313      	orrs	r3, r2
 800293e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800294c:	2201      	movs	r2, #1
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	43db      	mvns	r3, r3
 8002956:	69ba      	ldr	r2, [r7, #24]
 8002958:	4013      	ands	r3, r2
 800295a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	091b      	lsrs	r3, r3, #4
 8002962:	f003 0201 	and.w	r2, r3, #1
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	4313      	orrs	r3, r2
 8002970:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f003 0303 	and.w	r3, r3, #3
 8002980:	2b03      	cmp	r3, #3
 8002982:	d017      	beq.n	80029b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	2203      	movs	r2, #3
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	43db      	mvns	r3, r3
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	4013      	ands	r3, r2
 800299a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	689a      	ldr	r2, [r3, #8]
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	fa02 f303 	lsl.w	r3, r2, r3
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f003 0303 	and.w	r3, r3, #3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d123      	bne.n	8002a08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	08da      	lsrs	r2, r3, #3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	3208      	adds	r2, #8
 80029c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	f003 0307 	and.w	r3, r3, #7
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	220f      	movs	r2, #15
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	43db      	mvns	r3, r3
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	4013      	ands	r3, r2
 80029e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	691a      	ldr	r2, [r3, #16]
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	f003 0307 	and.w	r3, r3, #7
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	fa02 f303 	lsl.w	r3, r2, r3
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	08da      	lsrs	r2, r3, #3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	3208      	adds	r2, #8
 8002a02:	69b9      	ldr	r1, [r7, #24]
 8002a04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	2203      	movs	r2, #3
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f003 0203 	and.w	r2, r3, #3
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	f000 80b4 	beq.w	8002bb2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	60fb      	str	r3, [r7, #12]
 8002a4e:	4b60      	ldr	r3, [pc, #384]	; (8002bd0 <HAL_GPIO_Init+0x30c>)
 8002a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a52:	4a5f      	ldr	r2, [pc, #380]	; (8002bd0 <HAL_GPIO_Init+0x30c>)
 8002a54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a58:	6453      	str	r3, [r2, #68]	; 0x44
 8002a5a:	4b5d      	ldr	r3, [pc, #372]	; (8002bd0 <HAL_GPIO_Init+0x30c>)
 8002a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a62:	60fb      	str	r3, [r7, #12]
 8002a64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a66:	4a5b      	ldr	r2, [pc, #364]	; (8002bd4 <HAL_GPIO_Init+0x310>)
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	089b      	lsrs	r3, r3, #2
 8002a6c:	3302      	adds	r3, #2
 8002a6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	f003 0303 	and.w	r3, r3, #3
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	220f      	movs	r2, #15
 8002a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a82:	43db      	mvns	r3, r3
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	4013      	ands	r3, r2
 8002a88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a52      	ldr	r2, [pc, #328]	; (8002bd8 <HAL_GPIO_Init+0x314>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d02b      	beq.n	8002aea <HAL_GPIO_Init+0x226>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a51      	ldr	r2, [pc, #324]	; (8002bdc <HAL_GPIO_Init+0x318>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d025      	beq.n	8002ae6 <HAL_GPIO_Init+0x222>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a50      	ldr	r2, [pc, #320]	; (8002be0 <HAL_GPIO_Init+0x31c>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d01f      	beq.n	8002ae2 <HAL_GPIO_Init+0x21e>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a4f      	ldr	r2, [pc, #316]	; (8002be4 <HAL_GPIO_Init+0x320>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d019      	beq.n	8002ade <HAL_GPIO_Init+0x21a>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a4e      	ldr	r2, [pc, #312]	; (8002be8 <HAL_GPIO_Init+0x324>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d013      	beq.n	8002ada <HAL_GPIO_Init+0x216>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a4d      	ldr	r2, [pc, #308]	; (8002bec <HAL_GPIO_Init+0x328>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d00d      	beq.n	8002ad6 <HAL_GPIO_Init+0x212>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a4c      	ldr	r2, [pc, #304]	; (8002bf0 <HAL_GPIO_Init+0x32c>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d007      	beq.n	8002ad2 <HAL_GPIO_Init+0x20e>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a4b      	ldr	r2, [pc, #300]	; (8002bf4 <HAL_GPIO_Init+0x330>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d101      	bne.n	8002ace <HAL_GPIO_Init+0x20a>
 8002aca:	2307      	movs	r3, #7
 8002acc:	e00e      	b.n	8002aec <HAL_GPIO_Init+0x228>
 8002ace:	2308      	movs	r3, #8
 8002ad0:	e00c      	b.n	8002aec <HAL_GPIO_Init+0x228>
 8002ad2:	2306      	movs	r3, #6
 8002ad4:	e00a      	b.n	8002aec <HAL_GPIO_Init+0x228>
 8002ad6:	2305      	movs	r3, #5
 8002ad8:	e008      	b.n	8002aec <HAL_GPIO_Init+0x228>
 8002ada:	2304      	movs	r3, #4
 8002adc:	e006      	b.n	8002aec <HAL_GPIO_Init+0x228>
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e004      	b.n	8002aec <HAL_GPIO_Init+0x228>
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	e002      	b.n	8002aec <HAL_GPIO_Init+0x228>
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e000      	b.n	8002aec <HAL_GPIO_Init+0x228>
 8002aea:	2300      	movs	r3, #0
 8002aec:	69fa      	ldr	r2, [r7, #28]
 8002aee:	f002 0203 	and.w	r2, r2, #3
 8002af2:	0092      	lsls	r2, r2, #2
 8002af4:	4093      	lsls	r3, r2
 8002af6:	69ba      	ldr	r2, [r7, #24]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002afc:	4935      	ldr	r1, [pc, #212]	; (8002bd4 <HAL_GPIO_Init+0x310>)
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	089b      	lsrs	r3, r3, #2
 8002b02:	3302      	adds	r3, #2
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b0a:	4b3b      	ldr	r3, [pc, #236]	; (8002bf8 <HAL_GPIO_Init+0x334>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	43db      	mvns	r3, r3
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	4013      	ands	r3, r2
 8002b18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d003      	beq.n	8002b2e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002b26:	69ba      	ldr	r2, [r7, #24]
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b2e:	4a32      	ldr	r2, [pc, #200]	; (8002bf8 <HAL_GPIO_Init+0x334>)
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002b34:	4b30      	ldr	r3, [pc, #192]	; (8002bf8 <HAL_GPIO_Init+0x334>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	43db      	mvns	r3, r3
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	4013      	ands	r3, r2
 8002b42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d003      	beq.n	8002b58 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b58:	4a27      	ldr	r2, [pc, #156]	; (8002bf8 <HAL_GPIO_Init+0x334>)
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b5e:	4b26      	ldr	r3, [pc, #152]	; (8002bf8 <HAL_GPIO_Init+0x334>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	43db      	mvns	r3, r3
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d003      	beq.n	8002b82 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b82:	4a1d      	ldr	r2, [pc, #116]	; (8002bf8 <HAL_GPIO_Init+0x334>)
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b88:	4b1b      	ldr	r3, [pc, #108]	; (8002bf8 <HAL_GPIO_Init+0x334>)
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	43db      	mvns	r3, r3
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	4013      	ands	r3, r2
 8002b96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d003      	beq.n	8002bac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bac:	4a12      	ldr	r2, [pc, #72]	; (8002bf8 <HAL_GPIO_Init+0x334>)
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	61fb      	str	r3, [r7, #28]
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	2b0f      	cmp	r3, #15
 8002bbc:	f67f ae90 	bls.w	80028e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002bc0:	bf00      	nop
 8002bc2:	bf00      	nop
 8002bc4:	3724      	adds	r7, #36	; 0x24
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	40023800 	.word	0x40023800
 8002bd4:	40013800 	.word	0x40013800
 8002bd8:	40020000 	.word	0x40020000
 8002bdc:	40020400 	.word	0x40020400
 8002be0:	40020800 	.word	0x40020800
 8002be4:	40020c00 	.word	0x40020c00
 8002be8:	40021000 	.word	0x40021000
 8002bec:	40021400 	.word	0x40021400
 8002bf0:	40021800 	.word	0x40021800
 8002bf4:	40021c00 	.word	0x40021c00
 8002bf8:	40013c00 	.word	0x40013c00

08002bfc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	460b      	mov	r3, r1
 8002c06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	691a      	ldr	r2, [r3, #16]
 8002c0c:	887b      	ldrh	r3, [r7, #2]
 8002c0e:	4013      	ands	r3, r2
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d002      	beq.n	8002c1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c14:	2301      	movs	r3, #1
 8002c16:	73fb      	strb	r3, [r7, #15]
 8002c18:	e001      	b.n	8002c1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3714      	adds	r7, #20
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	460b      	mov	r3, r1
 8002c36:	807b      	strh	r3, [r7, #2]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c3c:	787b      	ldrb	r3, [r7, #1]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d003      	beq.n	8002c4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c42:	887a      	ldrh	r2, [r7, #2]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c48:	e003      	b.n	8002c52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c4a:	887b      	ldrh	r3, [r7, #2]
 8002c4c:	041a      	lsls	r2, r3, #16
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	619a      	str	r2, [r3, #24]
}
 8002c52:	bf00      	nop
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
	...

08002c60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b086      	sub	sp, #24
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d101      	bne.n	8002c72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e264      	b.n	800313c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0301 	and.w	r3, r3, #1
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d075      	beq.n	8002d6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c7e:	4ba3      	ldr	r3, [pc, #652]	; (8002f0c <HAL_RCC_OscConfig+0x2ac>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f003 030c 	and.w	r3, r3, #12
 8002c86:	2b04      	cmp	r3, #4
 8002c88:	d00c      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c8a:	4ba0      	ldr	r3, [pc, #640]	; (8002f0c <HAL_RCC_OscConfig+0x2ac>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c92:	2b08      	cmp	r3, #8
 8002c94:	d112      	bne.n	8002cbc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c96:	4b9d      	ldr	r3, [pc, #628]	; (8002f0c <HAL_RCC_OscConfig+0x2ac>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ca2:	d10b      	bne.n	8002cbc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ca4:	4b99      	ldr	r3, [pc, #612]	; (8002f0c <HAL_RCC_OscConfig+0x2ac>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d05b      	beq.n	8002d68 <HAL_RCC_OscConfig+0x108>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d157      	bne.n	8002d68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e23f      	b.n	800313c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cc4:	d106      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x74>
 8002cc6:	4b91      	ldr	r3, [pc, #580]	; (8002f0c <HAL_RCC_OscConfig+0x2ac>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a90      	ldr	r2, [pc, #576]	; (8002f0c <HAL_RCC_OscConfig+0x2ac>)
 8002ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cd0:	6013      	str	r3, [r2, #0]
 8002cd2:	e01d      	b.n	8002d10 <HAL_RCC_OscConfig+0xb0>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cdc:	d10c      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x98>
 8002cde:	4b8b      	ldr	r3, [pc, #556]	; (8002f0c <HAL_RCC_OscConfig+0x2ac>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a8a      	ldr	r2, [pc, #552]	; (8002f0c <HAL_RCC_OscConfig+0x2ac>)
 8002ce4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ce8:	6013      	str	r3, [r2, #0]
 8002cea:	4b88      	ldr	r3, [pc, #544]	; (8002f0c <HAL_RCC_OscConfig+0x2ac>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a87      	ldr	r2, [pc, #540]	; (8002f0c <HAL_RCC_OscConfig+0x2ac>)
 8002cf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cf4:	6013      	str	r3, [r2, #0]
 8002cf6:	e00b      	b.n	8002d10 <HAL_RCC_OscConfig+0xb0>
 8002cf8:	4b84      	ldr	r3, [pc, #528]	; (8002f0c <HAL_RCC_OscConfig+0x2ac>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a83      	ldr	r2, [pc, #524]	; (8002f0c <HAL_RCC_OscConfig+0x2ac>)
 8002cfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d02:	6013      	str	r3, [r2, #0]
 8002d04:	4b81      	ldr	r3, [pc, #516]	; (8002f0c <HAL_RCC_OscConfig+0x2ac>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a80      	ldr	r2, [pc, #512]	; (8002f0c <HAL_RCC_OscConfig+0x2ac>)
 8002d0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d013      	beq.n	8002d40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d18:	f7fe fe52 	bl	80019c0 <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d20:	f7fe fe4e 	bl	80019c0 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b64      	cmp	r3, #100	; 0x64
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e204      	b.n	800313c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d32:	4b76      	ldr	r3, [pc, #472]	; (8002f0c <HAL_RCC_OscConfig+0x2ac>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d0f0      	beq.n	8002d20 <HAL_RCC_OscConfig+0xc0>
 8002d3e:	e014      	b.n	8002d6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d40:	f7fe fe3e 	bl	80019c0 <HAL_GetTick>
 8002d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d46:	e008      	b.n	8002d5a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d48:	f7fe fe3a 	bl	80019c0 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b64      	cmp	r3, #100	; 0x64
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e1f0      	b.n	800313c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d5a:	4b6c      	ldr	r3, [pc, #432]	; (8002f0c <HAL_RCC_OscConfig+0x2ac>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d1f0      	bne.n	8002d48 <HAL_RCC_OscConfig+0xe8>
 8002d66:	e000      	b.n	8002d6a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d063      	beq.n	8002e3e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d76:	4b65      	ldr	r3, [pc, #404]	; (8002f0c <HAL_RCC_OscConfig+0x2ac>)
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f003 030c 	and.w	r3, r3, #12
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00b      	beq.n	8002d9a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d82:	4b62      	ldr	r3, [pc, #392]	; (8002f0c <HAL_RCC_OscConfig+0x2ac>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d8a:	2b08      	cmp	r3, #8
 8002d8c:	d11c      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d8e:	4b5f      	ldr	r3, [pc, #380]	; (8002f0c <HAL_RCC_OscConfig+0x2ac>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d116      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d9a:	4b5c      	ldr	r3, [pc, #368]	; (8002f0c <HAL_RCC_OscConfig+0x2ac>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d005      	beq.n	8002db2 <HAL_RCC_OscConfig+0x152>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d001      	beq.n	8002db2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e1c4      	b.n	800313c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002db2:	4b56      	ldr	r3, [pc, #344]	; (8002f0c <HAL_RCC_OscConfig+0x2ac>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	00db      	lsls	r3, r3, #3
 8002dc0:	4952      	ldr	r1, [pc, #328]	; (8002f0c <HAL_RCC_OscConfig+0x2ac>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dc6:	e03a      	b.n	8002e3e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d020      	beq.n	8002e12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dd0:	4b4f      	ldr	r3, [pc, #316]	; (8002f10 <HAL_RCC_OscConfig+0x2b0>)
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd6:	f7fe fdf3 	bl	80019c0 <HAL_GetTick>
 8002dda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ddc:	e008      	b.n	8002df0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dde:	f7fe fdef 	bl	80019c0 <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d901      	bls.n	8002df0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e1a5      	b.n	800313c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002df0:	4b46      	ldr	r3, [pc, #280]	; (8002f0c <HAL_RCC_OscConfig+0x2ac>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0302 	and.w	r3, r3, #2
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d0f0      	beq.n	8002dde <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dfc:	4b43      	ldr	r3, [pc, #268]	; (8002f0c <HAL_RCC_OscConfig+0x2ac>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	00db      	lsls	r3, r3, #3
 8002e0a:	4940      	ldr	r1, [pc, #256]	; (8002f0c <HAL_RCC_OscConfig+0x2ac>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	600b      	str	r3, [r1, #0]
 8002e10:	e015      	b.n	8002e3e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e12:	4b3f      	ldr	r3, [pc, #252]	; (8002f10 <HAL_RCC_OscConfig+0x2b0>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e18:	f7fe fdd2 	bl	80019c0 <HAL_GetTick>
 8002e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e1e:	e008      	b.n	8002e32 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e20:	f7fe fdce 	bl	80019c0 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e184      	b.n	800313c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e32:	4b36      	ldr	r3, [pc, #216]	; (8002f0c <HAL_RCC_OscConfig+0x2ac>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d1f0      	bne.n	8002e20 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0308 	and.w	r3, r3, #8
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d030      	beq.n	8002eac <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d016      	beq.n	8002e80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e52:	4b30      	ldr	r3, [pc, #192]	; (8002f14 <HAL_RCC_OscConfig+0x2b4>)
 8002e54:	2201      	movs	r2, #1
 8002e56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e58:	f7fe fdb2 	bl	80019c0 <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e60:	f7fe fdae 	bl	80019c0 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e164      	b.n	800313c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e72:	4b26      	ldr	r3, [pc, #152]	; (8002f0c <HAL_RCC_OscConfig+0x2ac>)
 8002e74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d0f0      	beq.n	8002e60 <HAL_RCC_OscConfig+0x200>
 8002e7e:	e015      	b.n	8002eac <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e80:	4b24      	ldr	r3, [pc, #144]	; (8002f14 <HAL_RCC_OscConfig+0x2b4>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e86:	f7fe fd9b 	bl	80019c0 <HAL_GetTick>
 8002e8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e8c:	e008      	b.n	8002ea0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e8e:	f7fe fd97 	bl	80019c0 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d901      	bls.n	8002ea0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e14d      	b.n	800313c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ea0:	4b1a      	ldr	r3, [pc, #104]	; (8002f0c <HAL_RCC_OscConfig+0x2ac>)
 8002ea2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ea4:	f003 0302 	and.w	r3, r3, #2
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d1f0      	bne.n	8002e8e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0304 	and.w	r3, r3, #4
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	f000 80a0 	beq.w	8002ffa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ebe:	4b13      	ldr	r3, [pc, #76]	; (8002f0c <HAL_RCC_OscConfig+0x2ac>)
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d10f      	bne.n	8002eea <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eca:	2300      	movs	r3, #0
 8002ecc:	60bb      	str	r3, [r7, #8]
 8002ece:	4b0f      	ldr	r3, [pc, #60]	; (8002f0c <HAL_RCC_OscConfig+0x2ac>)
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed2:	4a0e      	ldr	r2, [pc, #56]	; (8002f0c <HAL_RCC_OscConfig+0x2ac>)
 8002ed4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ed8:	6413      	str	r3, [r2, #64]	; 0x40
 8002eda:	4b0c      	ldr	r3, [pc, #48]	; (8002f0c <HAL_RCC_OscConfig+0x2ac>)
 8002edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ee2:	60bb      	str	r3, [r7, #8]
 8002ee4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eea:	4b0b      	ldr	r3, [pc, #44]	; (8002f18 <HAL_RCC_OscConfig+0x2b8>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d121      	bne.n	8002f3a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ef6:	4b08      	ldr	r3, [pc, #32]	; (8002f18 <HAL_RCC_OscConfig+0x2b8>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a07      	ldr	r2, [pc, #28]	; (8002f18 <HAL_RCC_OscConfig+0x2b8>)
 8002efc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f02:	f7fe fd5d 	bl	80019c0 <HAL_GetTick>
 8002f06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f08:	e011      	b.n	8002f2e <HAL_RCC_OscConfig+0x2ce>
 8002f0a:	bf00      	nop
 8002f0c:	40023800 	.word	0x40023800
 8002f10:	42470000 	.word	0x42470000
 8002f14:	42470e80 	.word	0x42470e80
 8002f18:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f1c:	f7fe fd50 	bl	80019c0 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e106      	b.n	800313c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f2e:	4b85      	ldr	r3, [pc, #532]	; (8003144 <HAL_RCC_OscConfig+0x4e4>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d0f0      	beq.n	8002f1c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d106      	bne.n	8002f50 <HAL_RCC_OscConfig+0x2f0>
 8002f42:	4b81      	ldr	r3, [pc, #516]	; (8003148 <HAL_RCC_OscConfig+0x4e8>)
 8002f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f46:	4a80      	ldr	r2, [pc, #512]	; (8003148 <HAL_RCC_OscConfig+0x4e8>)
 8002f48:	f043 0301 	orr.w	r3, r3, #1
 8002f4c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f4e:	e01c      	b.n	8002f8a <HAL_RCC_OscConfig+0x32a>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	2b05      	cmp	r3, #5
 8002f56:	d10c      	bne.n	8002f72 <HAL_RCC_OscConfig+0x312>
 8002f58:	4b7b      	ldr	r3, [pc, #492]	; (8003148 <HAL_RCC_OscConfig+0x4e8>)
 8002f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f5c:	4a7a      	ldr	r2, [pc, #488]	; (8003148 <HAL_RCC_OscConfig+0x4e8>)
 8002f5e:	f043 0304 	orr.w	r3, r3, #4
 8002f62:	6713      	str	r3, [r2, #112]	; 0x70
 8002f64:	4b78      	ldr	r3, [pc, #480]	; (8003148 <HAL_RCC_OscConfig+0x4e8>)
 8002f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f68:	4a77      	ldr	r2, [pc, #476]	; (8003148 <HAL_RCC_OscConfig+0x4e8>)
 8002f6a:	f043 0301 	orr.w	r3, r3, #1
 8002f6e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f70:	e00b      	b.n	8002f8a <HAL_RCC_OscConfig+0x32a>
 8002f72:	4b75      	ldr	r3, [pc, #468]	; (8003148 <HAL_RCC_OscConfig+0x4e8>)
 8002f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f76:	4a74      	ldr	r2, [pc, #464]	; (8003148 <HAL_RCC_OscConfig+0x4e8>)
 8002f78:	f023 0301 	bic.w	r3, r3, #1
 8002f7c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f7e:	4b72      	ldr	r3, [pc, #456]	; (8003148 <HAL_RCC_OscConfig+0x4e8>)
 8002f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f82:	4a71      	ldr	r2, [pc, #452]	; (8003148 <HAL_RCC_OscConfig+0x4e8>)
 8002f84:	f023 0304 	bic.w	r3, r3, #4
 8002f88:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d015      	beq.n	8002fbe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f92:	f7fe fd15 	bl	80019c0 <HAL_GetTick>
 8002f96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f98:	e00a      	b.n	8002fb0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f9a:	f7fe fd11 	bl	80019c0 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d901      	bls.n	8002fb0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e0c5      	b.n	800313c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fb0:	4b65      	ldr	r3, [pc, #404]	; (8003148 <HAL_RCC_OscConfig+0x4e8>)
 8002fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb4:	f003 0302 	and.w	r3, r3, #2
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d0ee      	beq.n	8002f9a <HAL_RCC_OscConfig+0x33a>
 8002fbc:	e014      	b.n	8002fe8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fbe:	f7fe fcff 	bl	80019c0 <HAL_GetTick>
 8002fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fc4:	e00a      	b.n	8002fdc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fc6:	f7fe fcfb 	bl	80019c0 <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d901      	bls.n	8002fdc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e0af      	b.n	800313c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fdc:	4b5a      	ldr	r3, [pc, #360]	; (8003148 <HAL_RCC_OscConfig+0x4e8>)
 8002fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe0:	f003 0302 	and.w	r3, r3, #2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1ee      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fe8:	7dfb      	ldrb	r3, [r7, #23]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d105      	bne.n	8002ffa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fee:	4b56      	ldr	r3, [pc, #344]	; (8003148 <HAL_RCC_OscConfig+0x4e8>)
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff2:	4a55      	ldr	r2, [pc, #340]	; (8003148 <HAL_RCC_OscConfig+0x4e8>)
 8002ff4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ff8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	f000 809b 	beq.w	800313a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003004:	4b50      	ldr	r3, [pc, #320]	; (8003148 <HAL_RCC_OscConfig+0x4e8>)
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f003 030c 	and.w	r3, r3, #12
 800300c:	2b08      	cmp	r3, #8
 800300e:	d05c      	beq.n	80030ca <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	699b      	ldr	r3, [r3, #24]
 8003014:	2b02      	cmp	r3, #2
 8003016:	d141      	bne.n	800309c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003018:	4b4c      	ldr	r3, [pc, #304]	; (800314c <HAL_RCC_OscConfig+0x4ec>)
 800301a:	2200      	movs	r2, #0
 800301c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800301e:	f7fe fccf 	bl	80019c0 <HAL_GetTick>
 8003022:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003024:	e008      	b.n	8003038 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003026:	f7fe fccb 	bl	80019c0 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	2b02      	cmp	r3, #2
 8003032:	d901      	bls.n	8003038 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e081      	b.n	800313c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003038:	4b43      	ldr	r3, [pc, #268]	; (8003148 <HAL_RCC_OscConfig+0x4e8>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d1f0      	bne.n	8003026 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	69da      	ldr	r2, [r3, #28]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a1b      	ldr	r3, [r3, #32]
 800304c:	431a      	orrs	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003052:	019b      	lsls	r3, r3, #6
 8003054:	431a      	orrs	r2, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305a:	085b      	lsrs	r3, r3, #1
 800305c:	3b01      	subs	r3, #1
 800305e:	041b      	lsls	r3, r3, #16
 8003060:	431a      	orrs	r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003066:	061b      	lsls	r3, r3, #24
 8003068:	4937      	ldr	r1, [pc, #220]	; (8003148 <HAL_RCC_OscConfig+0x4e8>)
 800306a:	4313      	orrs	r3, r2
 800306c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800306e:	4b37      	ldr	r3, [pc, #220]	; (800314c <HAL_RCC_OscConfig+0x4ec>)
 8003070:	2201      	movs	r2, #1
 8003072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003074:	f7fe fca4 	bl	80019c0 <HAL_GetTick>
 8003078:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800307c:	f7fe fca0 	bl	80019c0 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e056      	b.n	800313c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800308e:	4b2e      	ldr	r3, [pc, #184]	; (8003148 <HAL_RCC_OscConfig+0x4e8>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d0f0      	beq.n	800307c <HAL_RCC_OscConfig+0x41c>
 800309a:	e04e      	b.n	800313a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800309c:	4b2b      	ldr	r3, [pc, #172]	; (800314c <HAL_RCC_OscConfig+0x4ec>)
 800309e:	2200      	movs	r2, #0
 80030a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a2:	f7fe fc8d 	bl	80019c0 <HAL_GetTick>
 80030a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030a8:	e008      	b.n	80030bc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030aa:	f7fe fc89 	bl	80019c0 <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d901      	bls.n	80030bc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e03f      	b.n	800313c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030bc:	4b22      	ldr	r3, [pc, #136]	; (8003148 <HAL_RCC_OscConfig+0x4e8>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d1f0      	bne.n	80030aa <HAL_RCC_OscConfig+0x44a>
 80030c8:	e037      	b.n	800313a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d101      	bne.n	80030d6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e032      	b.n	800313c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030d6:	4b1c      	ldr	r3, [pc, #112]	; (8003148 <HAL_RCC_OscConfig+0x4e8>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d028      	beq.n	8003136 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d121      	bne.n	8003136 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d11a      	bne.n	8003136 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003100:	68fa      	ldr	r2, [r7, #12]
 8003102:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003106:	4013      	ands	r3, r2
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800310c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800310e:	4293      	cmp	r3, r2
 8003110:	d111      	bne.n	8003136 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311c:	085b      	lsrs	r3, r3, #1
 800311e:	3b01      	subs	r3, #1
 8003120:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003122:	429a      	cmp	r2, r3
 8003124:	d107      	bne.n	8003136 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003130:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003132:	429a      	cmp	r2, r3
 8003134:	d001      	beq.n	800313a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e000      	b.n	800313c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800313a:	2300      	movs	r3, #0
}
 800313c:	4618      	mov	r0, r3
 800313e:	3718      	adds	r7, #24
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	40007000 	.word	0x40007000
 8003148:	40023800 	.word	0x40023800
 800314c:	42470060 	.word	0x42470060

08003150 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d101      	bne.n	8003164 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e0cc      	b.n	80032fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003164:	4b68      	ldr	r3, [pc, #416]	; (8003308 <HAL_RCC_ClockConfig+0x1b8>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0307 	and.w	r3, r3, #7
 800316c:	683a      	ldr	r2, [r7, #0]
 800316e:	429a      	cmp	r2, r3
 8003170:	d90c      	bls.n	800318c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003172:	4b65      	ldr	r3, [pc, #404]	; (8003308 <HAL_RCC_ClockConfig+0x1b8>)
 8003174:	683a      	ldr	r2, [r7, #0]
 8003176:	b2d2      	uxtb	r2, r2
 8003178:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800317a:	4b63      	ldr	r3, [pc, #396]	; (8003308 <HAL_RCC_ClockConfig+0x1b8>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0307 	and.w	r3, r3, #7
 8003182:	683a      	ldr	r2, [r7, #0]
 8003184:	429a      	cmp	r2, r3
 8003186:	d001      	beq.n	800318c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e0b8      	b.n	80032fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0302 	and.w	r3, r3, #2
 8003194:	2b00      	cmp	r3, #0
 8003196:	d020      	beq.n	80031da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0304 	and.w	r3, r3, #4
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d005      	beq.n	80031b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031a4:	4b59      	ldr	r3, [pc, #356]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	4a58      	ldr	r2, [pc, #352]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 80031aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0308 	and.w	r3, r3, #8
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d005      	beq.n	80031c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031bc:	4b53      	ldr	r3, [pc, #332]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	4a52      	ldr	r2, [pc, #328]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 80031c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031c8:	4b50      	ldr	r3, [pc, #320]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	494d      	ldr	r1, [pc, #308]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d044      	beq.n	8003270 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d107      	bne.n	80031fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ee:	4b47      	ldr	r3, [pc, #284]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d119      	bne.n	800322e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e07f      	b.n	80032fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	2b02      	cmp	r3, #2
 8003204:	d003      	beq.n	800320e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800320a:	2b03      	cmp	r3, #3
 800320c:	d107      	bne.n	800321e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800320e:	4b3f      	ldr	r3, [pc, #252]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d109      	bne.n	800322e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e06f      	b.n	80032fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800321e:	4b3b      	ldr	r3, [pc, #236]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d101      	bne.n	800322e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e067      	b.n	80032fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800322e:	4b37      	ldr	r3, [pc, #220]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f023 0203 	bic.w	r2, r3, #3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	4934      	ldr	r1, [pc, #208]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 800323c:	4313      	orrs	r3, r2
 800323e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003240:	f7fe fbbe 	bl	80019c0 <HAL_GetTick>
 8003244:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003246:	e00a      	b.n	800325e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003248:	f7fe fbba 	bl	80019c0 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	f241 3288 	movw	r2, #5000	; 0x1388
 8003256:	4293      	cmp	r3, r2
 8003258:	d901      	bls.n	800325e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e04f      	b.n	80032fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800325e:	4b2b      	ldr	r3, [pc, #172]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f003 020c 	and.w	r2, r3, #12
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	429a      	cmp	r2, r3
 800326e:	d1eb      	bne.n	8003248 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003270:	4b25      	ldr	r3, [pc, #148]	; (8003308 <HAL_RCC_ClockConfig+0x1b8>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0307 	and.w	r3, r3, #7
 8003278:	683a      	ldr	r2, [r7, #0]
 800327a:	429a      	cmp	r2, r3
 800327c:	d20c      	bcs.n	8003298 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800327e:	4b22      	ldr	r3, [pc, #136]	; (8003308 <HAL_RCC_ClockConfig+0x1b8>)
 8003280:	683a      	ldr	r2, [r7, #0]
 8003282:	b2d2      	uxtb	r2, r2
 8003284:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003286:	4b20      	ldr	r3, [pc, #128]	; (8003308 <HAL_RCC_ClockConfig+0x1b8>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0307 	and.w	r3, r3, #7
 800328e:	683a      	ldr	r2, [r7, #0]
 8003290:	429a      	cmp	r2, r3
 8003292:	d001      	beq.n	8003298 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e032      	b.n	80032fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0304 	and.w	r3, r3, #4
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d008      	beq.n	80032b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032a4:	4b19      	ldr	r3, [pc, #100]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	4916      	ldr	r1, [pc, #88]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0308 	and.w	r3, r3, #8
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d009      	beq.n	80032d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032c2:	4b12      	ldr	r3, [pc, #72]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	00db      	lsls	r3, r3, #3
 80032d0:	490e      	ldr	r1, [pc, #56]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032d6:	f000 f821 	bl	800331c <HAL_RCC_GetSysClockFreq>
 80032da:	4602      	mov	r2, r0
 80032dc:	4b0b      	ldr	r3, [pc, #44]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	091b      	lsrs	r3, r3, #4
 80032e2:	f003 030f 	and.w	r3, r3, #15
 80032e6:	490a      	ldr	r1, [pc, #40]	; (8003310 <HAL_RCC_ClockConfig+0x1c0>)
 80032e8:	5ccb      	ldrb	r3, [r1, r3]
 80032ea:	fa22 f303 	lsr.w	r3, r2, r3
 80032ee:	4a09      	ldr	r2, [pc, #36]	; (8003314 <HAL_RCC_ClockConfig+0x1c4>)
 80032f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80032f2:	4b09      	ldr	r3, [pc, #36]	; (8003318 <HAL_RCC_ClockConfig+0x1c8>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f7fe fa20 	bl	800173c <HAL_InitTick>

  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3710      	adds	r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	40023c00 	.word	0x40023c00
 800330c:	40023800 	.word	0x40023800
 8003310:	08005ea4 	.word	0x08005ea4
 8003314:	20000164 	.word	0x20000164
 8003318:	20000168 	.word	0x20000168

0800331c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800331c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003320:	b084      	sub	sp, #16
 8003322:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003324:	2300      	movs	r3, #0
 8003326:	607b      	str	r3, [r7, #4]
 8003328:	2300      	movs	r3, #0
 800332a:	60fb      	str	r3, [r7, #12]
 800332c:	2300      	movs	r3, #0
 800332e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003330:	2300      	movs	r3, #0
 8003332:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003334:	4b67      	ldr	r3, [pc, #412]	; (80034d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f003 030c 	and.w	r3, r3, #12
 800333c:	2b08      	cmp	r3, #8
 800333e:	d00d      	beq.n	800335c <HAL_RCC_GetSysClockFreq+0x40>
 8003340:	2b08      	cmp	r3, #8
 8003342:	f200 80bd 	bhi.w	80034c0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003346:	2b00      	cmp	r3, #0
 8003348:	d002      	beq.n	8003350 <HAL_RCC_GetSysClockFreq+0x34>
 800334a:	2b04      	cmp	r3, #4
 800334c:	d003      	beq.n	8003356 <HAL_RCC_GetSysClockFreq+0x3a>
 800334e:	e0b7      	b.n	80034c0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003350:	4b61      	ldr	r3, [pc, #388]	; (80034d8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003352:	60bb      	str	r3, [r7, #8]
       break;
 8003354:	e0b7      	b.n	80034c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003356:	4b61      	ldr	r3, [pc, #388]	; (80034dc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003358:	60bb      	str	r3, [r7, #8]
      break;
 800335a:	e0b4      	b.n	80034c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800335c:	4b5d      	ldr	r3, [pc, #372]	; (80034d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003364:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003366:	4b5b      	ldr	r3, [pc, #364]	; (80034d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d04d      	beq.n	800340e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003372:	4b58      	ldr	r3, [pc, #352]	; (80034d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	099b      	lsrs	r3, r3, #6
 8003378:	461a      	mov	r2, r3
 800337a:	f04f 0300 	mov.w	r3, #0
 800337e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003382:	f04f 0100 	mov.w	r1, #0
 8003386:	ea02 0800 	and.w	r8, r2, r0
 800338a:	ea03 0901 	and.w	r9, r3, r1
 800338e:	4640      	mov	r0, r8
 8003390:	4649      	mov	r1, r9
 8003392:	f04f 0200 	mov.w	r2, #0
 8003396:	f04f 0300 	mov.w	r3, #0
 800339a:	014b      	lsls	r3, r1, #5
 800339c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80033a0:	0142      	lsls	r2, r0, #5
 80033a2:	4610      	mov	r0, r2
 80033a4:	4619      	mov	r1, r3
 80033a6:	ebb0 0008 	subs.w	r0, r0, r8
 80033aa:	eb61 0109 	sbc.w	r1, r1, r9
 80033ae:	f04f 0200 	mov.w	r2, #0
 80033b2:	f04f 0300 	mov.w	r3, #0
 80033b6:	018b      	lsls	r3, r1, #6
 80033b8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80033bc:	0182      	lsls	r2, r0, #6
 80033be:	1a12      	subs	r2, r2, r0
 80033c0:	eb63 0301 	sbc.w	r3, r3, r1
 80033c4:	f04f 0000 	mov.w	r0, #0
 80033c8:	f04f 0100 	mov.w	r1, #0
 80033cc:	00d9      	lsls	r1, r3, #3
 80033ce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80033d2:	00d0      	lsls	r0, r2, #3
 80033d4:	4602      	mov	r2, r0
 80033d6:	460b      	mov	r3, r1
 80033d8:	eb12 0208 	adds.w	r2, r2, r8
 80033dc:	eb43 0309 	adc.w	r3, r3, r9
 80033e0:	f04f 0000 	mov.w	r0, #0
 80033e4:	f04f 0100 	mov.w	r1, #0
 80033e8:	0259      	lsls	r1, r3, #9
 80033ea:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80033ee:	0250      	lsls	r0, r2, #9
 80033f0:	4602      	mov	r2, r0
 80033f2:	460b      	mov	r3, r1
 80033f4:	4610      	mov	r0, r2
 80033f6:	4619      	mov	r1, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	461a      	mov	r2, r3
 80033fc:	f04f 0300 	mov.w	r3, #0
 8003400:	f7fc ff3e 	bl	8000280 <__aeabi_uldivmod>
 8003404:	4602      	mov	r2, r0
 8003406:	460b      	mov	r3, r1
 8003408:	4613      	mov	r3, r2
 800340a:	60fb      	str	r3, [r7, #12]
 800340c:	e04a      	b.n	80034a4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800340e:	4b31      	ldr	r3, [pc, #196]	; (80034d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	099b      	lsrs	r3, r3, #6
 8003414:	461a      	mov	r2, r3
 8003416:	f04f 0300 	mov.w	r3, #0
 800341a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800341e:	f04f 0100 	mov.w	r1, #0
 8003422:	ea02 0400 	and.w	r4, r2, r0
 8003426:	ea03 0501 	and.w	r5, r3, r1
 800342a:	4620      	mov	r0, r4
 800342c:	4629      	mov	r1, r5
 800342e:	f04f 0200 	mov.w	r2, #0
 8003432:	f04f 0300 	mov.w	r3, #0
 8003436:	014b      	lsls	r3, r1, #5
 8003438:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800343c:	0142      	lsls	r2, r0, #5
 800343e:	4610      	mov	r0, r2
 8003440:	4619      	mov	r1, r3
 8003442:	1b00      	subs	r0, r0, r4
 8003444:	eb61 0105 	sbc.w	r1, r1, r5
 8003448:	f04f 0200 	mov.w	r2, #0
 800344c:	f04f 0300 	mov.w	r3, #0
 8003450:	018b      	lsls	r3, r1, #6
 8003452:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003456:	0182      	lsls	r2, r0, #6
 8003458:	1a12      	subs	r2, r2, r0
 800345a:	eb63 0301 	sbc.w	r3, r3, r1
 800345e:	f04f 0000 	mov.w	r0, #0
 8003462:	f04f 0100 	mov.w	r1, #0
 8003466:	00d9      	lsls	r1, r3, #3
 8003468:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800346c:	00d0      	lsls	r0, r2, #3
 800346e:	4602      	mov	r2, r0
 8003470:	460b      	mov	r3, r1
 8003472:	1912      	adds	r2, r2, r4
 8003474:	eb45 0303 	adc.w	r3, r5, r3
 8003478:	f04f 0000 	mov.w	r0, #0
 800347c:	f04f 0100 	mov.w	r1, #0
 8003480:	0299      	lsls	r1, r3, #10
 8003482:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003486:	0290      	lsls	r0, r2, #10
 8003488:	4602      	mov	r2, r0
 800348a:	460b      	mov	r3, r1
 800348c:	4610      	mov	r0, r2
 800348e:	4619      	mov	r1, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	461a      	mov	r2, r3
 8003494:	f04f 0300 	mov.w	r3, #0
 8003498:	f7fc fef2 	bl	8000280 <__aeabi_uldivmod>
 800349c:	4602      	mov	r2, r0
 800349e:	460b      	mov	r3, r1
 80034a0:	4613      	mov	r3, r2
 80034a2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034a4:	4b0b      	ldr	r3, [pc, #44]	; (80034d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	0c1b      	lsrs	r3, r3, #16
 80034aa:	f003 0303 	and.w	r3, r3, #3
 80034ae:	3301      	adds	r3, #1
 80034b0:	005b      	lsls	r3, r3, #1
 80034b2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80034b4:	68fa      	ldr	r2, [r7, #12]
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034bc:	60bb      	str	r3, [r7, #8]
      break;
 80034be:	e002      	b.n	80034c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034c0:	4b05      	ldr	r3, [pc, #20]	; (80034d8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80034c2:	60bb      	str	r3, [r7, #8]
      break;
 80034c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034c6:	68bb      	ldr	r3, [r7, #8]
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3710      	adds	r7, #16
 80034cc:	46bd      	mov	sp, r7
 80034ce:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80034d2:	bf00      	nop
 80034d4:	40023800 	.word	0x40023800
 80034d8:	00f42400 	.word	0x00f42400
 80034dc:	007a1200 	.word	0x007a1200

080034e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034e4:	4b03      	ldr	r3, [pc, #12]	; (80034f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80034e6:	681b      	ldr	r3, [r3, #0]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	20000164 	.word	0x20000164

080034f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80034fc:	f7ff fff0 	bl	80034e0 <HAL_RCC_GetHCLKFreq>
 8003500:	4602      	mov	r2, r0
 8003502:	4b05      	ldr	r3, [pc, #20]	; (8003518 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	0a9b      	lsrs	r3, r3, #10
 8003508:	f003 0307 	and.w	r3, r3, #7
 800350c:	4903      	ldr	r1, [pc, #12]	; (800351c <HAL_RCC_GetPCLK1Freq+0x24>)
 800350e:	5ccb      	ldrb	r3, [r1, r3]
 8003510:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003514:	4618      	mov	r0, r3
 8003516:	bd80      	pop	{r7, pc}
 8003518:	40023800 	.word	0x40023800
 800351c:	08005eb4 	.word	0x08005eb4

08003520 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003524:	f7ff ffdc 	bl	80034e0 <HAL_RCC_GetHCLKFreq>
 8003528:	4602      	mov	r2, r0
 800352a:	4b05      	ldr	r3, [pc, #20]	; (8003540 <HAL_RCC_GetPCLK2Freq+0x20>)
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	0b5b      	lsrs	r3, r3, #13
 8003530:	f003 0307 	and.w	r3, r3, #7
 8003534:	4903      	ldr	r1, [pc, #12]	; (8003544 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003536:	5ccb      	ldrb	r3, [r1, r3]
 8003538:	fa22 f303 	lsr.w	r3, r2, r3
}
 800353c:	4618      	mov	r0, r3
 800353e:	bd80      	pop	{r7, pc}
 8003540:	40023800 	.word	0x40023800
 8003544:	08005eb4 	.word	0x08005eb4

08003548 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	220f      	movs	r2, #15
 8003556:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003558:	4b12      	ldr	r3, [pc, #72]	; (80035a4 <HAL_RCC_GetClockConfig+0x5c>)
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f003 0203 	and.w	r2, r3, #3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003564:	4b0f      	ldr	r3, [pc, #60]	; (80035a4 <HAL_RCC_GetClockConfig+0x5c>)
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003570:	4b0c      	ldr	r3, [pc, #48]	; (80035a4 <HAL_RCC_GetClockConfig+0x5c>)
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800357c:	4b09      	ldr	r3, [pc, #36]	; (80035a4 <HAL_RCC_GetClockConfig+0x5c>)
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	08db      	lsrs	r3, r3, #3
 8003582:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800358a:	4b07      	ldr	r3, [pc, #28]	; (80035a8 <HAL_RCC_GetClockConfig+0x60>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0207 	and.w	r2, r3, #7
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	601a      	str	r2, [r3, #0]
}
 8003596:	bf00      	nop
 8003598:	370c      	adds	r7, #12
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	40023800 	.word	0x40023800
 80035a8:	40023c00 	.word	0x40023c00

080035ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d101      	bne.n	80035be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e041      	b.n	8003642 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d106      	bne.n	80035d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f7fd ffdc 	bl	8001590 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2202      	movs	r2, #2
 80035dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	3304      	adds	r3, #4
 80035e8:	4619      	mov	r1, r3
 80035ea:	4610      	mov	r0, r2
 80035ec:	f000 ff1c 	bl	8004428 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3708      	adds	r7, #8
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
	...

0800364c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800364c:	b480      	push	{r7}
 800364e:	b085      	sub	sp, #20
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800365a:	b2db      	uxtb	r3, r3
 800365c:	2b01      	cmp	r3, #1
 800365e:	d001      	beq.n	8003664 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e04e      	b.n	8003702 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2202      	movs	r2, #2
 8003668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68da      	ldr	r2, [r3, #12]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f042 0201 	orr.w	r2, r2, #1
 800367a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a23      	ldr	r2, [pc, #140]	; (8003710 <HAL_TIM_Base_Start_IT+0xc4>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d022      	beq.n	80036cc <HAL_TIM_Base_Start_IT+0x80>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800368e:	d01d      	beq.n	80036cc <HAL_TIM_Base_Start_IT+0x80>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a1f      	ldr	r2, [pc, #124]	; (8003714 <HAL_TIM_Base_Start_IT+0xc8>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d018      	beq.n	80036cc <HAL_TIM_Base_Start_IT+0x80>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a1e      	ldr	r2, [pc, #120]	; (8003718 <HAL_TIM_Base_Start_IT+0xcc>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d013      	beq.n	80036cc <HAL_TIM_Base_Start_IT+0x80>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a1c      	ldr	r2, [pc, #112]	; (800371c <HAL_TIM_Base_Start_IT+0xd0>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d00e      	beq.n	80036cc <HAL_TIM_Base_Start_IT+0x80>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a1b      	ldr	r2, [pc, #108]	; (8003720 <HAL_TIM_Base_Start_IT+0xd4>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d009      	beq.n	80036cc <HAL_TIM_Base_Start_IT+0x80>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a19      	ldr	r2, [pc, #100]	; (8003724 <HAL_TIM_Base_Start_IT+0xd8>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d004      	beq.n	80036cc <HAL_TIM_Base_Start_IT+0x80>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a18      	ldr	r2, [pc, #96]	; (8003728 <HAL_TIM_Base_Start_IT+0xdc>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d111      	bne.n	80036f0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f003 0307 	and.w	r3, r3, #7
 80036d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2b06      	cmp	r3, #6
 80036dc:	d010      	beq.n	8003700 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f042 0201 	orr.w	r2, r2, #1
 80036ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036ee:	e007      	b.n	8003700 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f042 0201 	orr.w	r2, r2, #1
 80036fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3714      	adds	r7, #20
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	40010000 	.word	0x40010000
 8003714:	40000400 	.word	0x40000400
 8003718:	40000800 	.word	0x40000800
 800371c:	40000c00 	.word	0x40000c00
 8003720:	40010400 	.word	0x40010400
 8003724:	40014000 	.word	0x40014000
 8003728:	40001800 	.word	0x40001800

0800372c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e041      	b.n	80037c2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d106      	bne.n	8003758 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 f839 	bl	80037ca <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2202      	movs	r2, #2
 800375c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	3304      	adds	r3, #4
 8003768:	4619      	mov	r1, r3
 800376a:	4610      	mov	r0, r2
 800376c:	f000 fe5c 	bl	8004428 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3708      	adds	r7, #8
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}

080037ca <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80037ca:	b480      	push	{r7}
 80037cc:	b083      	sub	sp, #12
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80037d2:	bf00      	nop
 80037d4:	370c      	adds	r7, #12
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
	...

080037e0 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b086      	sub	sp, #24
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	607a      	str	r2, [r7, #4]
 80037ec:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80037ee:	2300      	movs	r3, #0
 80037f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d109      	bne.n	800380c <HAL_TIM_PWM_Start_DMA+0x2c>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	2b02      	cmp	r3, #2
 8003802:	bf0c      	ite	eq
 8003804:	2301      	moveq	r3, #1
 8003806:	2300      	movne	r3, #0
 8003808:	b2db      	uxtb	r3, r3
 800380a:	e022      	b.n	8003852 <HAL_TIM_PWM_Start_DMA+0x72>
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	2b04      	cmp	r3, #4
 8003810:	d109      	bne.n	8003826 <HAL_TIM_PWM_Start_DMA+0x46>
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2b02      	cmp	r3, #2
 800381c:	bf0c      	ite	eq
 800381e:	2301      	moveq	r3, #1
 8003820:	2300      	movne	r3, #0
 8003822:	b2db      	uxtb	r3, r3
 8003824:	e015      	b.n	8003852 <HAL_TIM_PWM_Start_DMA+0x72>
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	2b08      	cmp	r3, #8
 800382a:	d109      	bne.n	8003840 <HAL_TIM_PWM_Start_DMA+0x60>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003832:	b2db      	uxtb	r3, r3
 8003834:	2b02      	cmp	r3, #2
 8003836:	bf0c      	ite	eq
 8003838:	2301      	moveq	r3, #1
 800383a:	2300      	movne	r3, #0
 800383c:	b2db      	uxtb	r3, r3
 800383e:	e008      	b.n	8003852 <HAL_TIM_PWM_Start_DMA+0x72>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003846:	b2db      	uxtb	r3, r3
 8003848:	2b02      	cmp	r3, #2
 800384a:	bf0c      	ite	eq
 800384c:	2301      	moveq	r3, #1
 800384e:	2300      	movne	r3, #0
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b00      	cmp	r3, #0
 8003854:	d001      	beq.n	800385a <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8003856:	2302      	movs	r3, #2
 8003858:	e171      	b.n	8003b3e <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d109      	bne.n	8003874 <HAL_TIM_PWM_Start_DMA+0x94>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003866:	b2db      	uxtb	r3, r3
 8003868:	2b01      	cmp	r3, #1
 800386a:	bf0c      	ite	eq
 800386c:	2301      	moveq	r3, #1
 800386e:	2300      	movne	r3, #0
 8003870:	b2db      	uxtb	r3, r3
 8003872:	e022      	b.n	80038ba <HAL_TIM_PWM_Start_DMA+0xda>
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	2b04      	cmp	r3, #4
 8003878:	d109      	bne.n	800388e <HAL_TIM_PWM_Start_DMA+0xae>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003880:	b2db      	uxtb	r3, r3
 8003882:	2b01      	cmp	r3, #1
 8003884:	bf0c      	ite	eq
 8003886:	2301      	moveq	r3, #1
 8003888:	2300      	movne	r3, #0
 800388a:	b2db      	uxtb	r3, r3
 800388c:	e015      	b.n	80038ba <HAL_TIM_PWM_Start_DMA+0xda>
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	2b08      	cmp	r3, #8
 8003892:	d109      	bne.n	80038a8 <HAL_TIM_PWM_Start_DMA+0xc8>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800389a:	b2db      	uxtb	r3, r3
 800389c:	2b01      	cmp	r3, #1
 800389e:	bf0c      	ite	eq
 80038a0:	2301      	moveq	r3, #1
 80038a2:	2300      	movne	r3, #0
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	e008      	b.n	80038ba <HAL_TIM_PWM_Start_DMA+0xda>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	bf0c      	ite	eq
 80038b4:	2301      	moveq	r3, #1
 80038b6:	2300      	movne	r3, #0
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d024      	beq.n	8003908 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d104      	bne.n	80038ce <HAL_TIM_PWM_Start_DMA+0xee>
 80038c4:	887b      	ldrh	r3, [r7, #2]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d001      	beq.n	80038ce <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e137      	b.n	8003b3e <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d104      	bne.n	80038de <HAL_TIM_PWM_Start_DMA+0xfe>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2202      	movs	r2, #2
 80038d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038dc:	e016      	b.n	800390c <HAL_TIM_PWM_Start_DMA+0x12c>
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	2b04      	cmp	r3, #4
 80038e2:	d104      	bne.n	80038ee <HAL_TIM_PWM_Start_DMA+0x10e>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2202      	movs	r2, #2
 80038e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038ec:	e00e      	b.n	800390c <HAL_TIM_PWM_Start_DMA+0x12c>
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	2b08      	cmp	r3, #8
 80038f2:	d104      	bne.n	80038fe <HAL_TIM_PWM_Start_DMA+0x11e>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2202      	movs	r2, #2
 80038f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038fc:	e006      	b.n	800390c <HAL_TIM_PWM_Start_DMA+0x12c>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2202      	movs	r2, #2
 8003902:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003906:	e001      	b.n	800390c <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e118      	b.n	8003b3e <HAL_TIM_PWM_Start_DMA+0x35e>
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	2b0c      	cmp	r3, #12
 8003910:	f200 80ae 	bhi.w	8003a70 <HAL_TIM_PWM_Start_DMA+0x290>
 8003914:	a201      	add	r2, pc, #4	; (adr r2, 800391c <HAL_TIM_PWM_Start_DMA+0x13c>)
 8003916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800391a:	bf00      	nop
 800391c:	08003951 	.word	0x08003951
 8003920:	08003a71 	.word	0x08003a71
 8003924:	08003a71 	.word	0x08003a71
 8003928:	08003a71 	.word	0x08003a71
 800392c:	08003999 	.word	0x08003999
 8003930:	08003a71 	.word	0x08003a71
 8003934:	08003a71 	.word	0x08003a71
 8003938:	08003a71 	.word	0x08003a71
 800393c:	080039e1 	.word	0x080039e1
 8003940:	08003a71 	.word	0x08003a71
 8003944:	08003a71 	.word	0x08003a71
 8003948:	08003a71 	.word	0x08003a71
 800394c:	08003a29 	.word	0x08003a29
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003954:	4a7c      	ldr	r2, [pc, #496]	; (8003b48 <HAL_TIM_PWM_Start_DMA+0x368>)
 8003956:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395c:	4a7b      	ldr	r2, [pc, #492]	; (8003b4c <HAL_TIM_PWM_Start_DMA+0x36c>)
 800395e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003964:	4a7a      	ldr	r2, [pc, #488]	; (8003b50 <HAL_TIM_PWM_Start_DMA+0x370>)
 8003966:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800396c:	6879      	ldr	r1, [r7, #4]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	3334      	adds	r3, #52	; 0x34
 8003974:	461a      	mov	r2, r3
 8003976:	887b      	ldrh	r3, [r7, #2]
 8003978:	f7fe fc44 	bl	8002204 <HAL_DMA_Start_IT>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d001      	beq.n	8003986 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e0db      	b.n	8003b3e <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68da      	ldr	r2, [r3, #12]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003994:	60da      	str	r2, [r3, #12]
      break;
 8003996:	e06e      	b.n	8003a76 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399c:	4a6a      	ldr	r2, [pc, #424]	; (8003b48 <HAL_TIM_PWM_Start_DMA+0x368>)
 800399e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a4:	4a69      	ldr	r2, [pc, #420]	; (8003b4c <HAL_TIM_PWM_Start_DMA+0x36c>)
 80039a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ac:	4a68      	ldr	r2, [pc, #416]	; (8003b50 <HAL_TIM_PWM_Start_DMA+0x370>)
 80039ae:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80039b4:	6879      	ldr	r1, [r7, #4]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	3338      	adds	r3, #56	; 0x38
 80039bc:	461a      	mov	r2, r3
 80039be:	887b      	ldrh	r3, [r7, #2]
 80039c0:	f7fe fc20 	bl	8002204 <HAL_DMA_Start_IT>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d001      	beq.n	80039ce <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e0b7      	b.n	8003b3e <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68da      	ldr	r2, [r3, #12]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80039dc:	60da      	str	r2, [r3, #12]
      break;
 80039de:	e04a      	b.n	8003a76 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e4:	4a58      	ldr	r2, [pc, #352]	; (8003b48 <HAL_TIM_PWM_Start_DMA+0x368>)
 80039e6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ec:	4a57      	ldr	r2, [pc, #348]	; (8003b4c <HAL_TIM_PWM_Start_DMA+0x36c>)
 80039ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f4:	4a56      	ldr	r2, [pc, #344]	; (8003b50 <HAL_TIM_PWM_Start_DMA+0x370>)
 80039f6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80039fc:	6879      	ldr	r1, [r7, #4]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	333c      	adds	r3, #60	; 0x3c
 8003a04:	461a      	mov	r2, r3
 8003a06:	887b      	ldrh	r3, [r7, #2]
 8003a08:	f7fe fbfc 	bl	8002204 <HAL_DMA_Start_IT>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d001      	beq.n	8003a16 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e093      	b.n	8003b3e <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68da      	ldr	r2, [r3, #12]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a24:	60da      	str	r2, [r3, #12]
      break;
 8003a26:	e026      	b.n	8003a76 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2c:	4a46      	ldr	r2, [pc, #280]	; (8003b48 <HAL_TIM_PWM_Start_DMA+0x368>)
 8003a2e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a34:	4a45      	ldr	r2, [pc, #276]	; (8003b4c <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003a36:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3c:	4a44      	ldr	r2, [pc, #272]	; (8003b50 <HAL_TIM_PWM_Start_DMA+0x370>)
 8003a3e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003a44:	6879      	ldr	r1, [r7, #4]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	3340      	adds	r3, #64	; 0x40
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	887b      	ldrh	r3, [r7, #2]
 8003a50:	f7fe fbd8 	bl	8002204 <HAL_DMA_Start_IT>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d001      	beq.n	8003a5e <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e06f      	b.n	8003b3e <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	68da      	ldr	r2, [r3, #12]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003a6c:	60da      	str	r2, [r3, #12]
      break;
 8003a6e:	e002      	b.n	8003a76 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	75fb      	strb	r3, [r7, #23]
      break;
 8003a74:	bf00      	nop
  }

  if (status == HAL_OK)
 8003a76:	7dfb      	ldrb	r3, [r7, #23]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d15f      	bne.n	8003b3c <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2201      	movs	r2, #1
 8003a82:	68b9      	ldr	r1, [r7, #8]
 8003a84:	4618      	mov	r0, r3
 8003a86:	f000 ffb9 	bl	80049fc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a31      	ldr	r2, [pc, #196]	; (8003b54 <HAL_TIM_PWM_Start_DMA+0x374>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d004      	beq.n	8003a9e <HAL_TIM_PWM_Start_DMA+0x2be>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a2f      	ldr	r2, [pc, #188]	; (8003b58 <HAL_TIM_PWM_Start_DMA+0x378>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d101      	bne.n	8003aa2 <HAL_TIM_PWM_Start_DMA+0x2c2>
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e000      	b.n	8003aa4 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d007      	beq.n	8003ab8 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ab6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a25      	ldr	r2, [pc, #148]	; (8003b54 <HAL_TIM_PWM_Start_DMA+0x374>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d022      	beq.n	8003b08 <HAL_TIM_PWM_Start_DMA+0x328>
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aca:	d01d      	beq.n	8003b08 <HAL_TIM_PWM_Start_DMA+0x328>
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a22      	ldr	r2, [pc, #136]	; (8003b5c <HAL_TIM_PWM_Start_DMA+0x37c>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d018      	beq.n	8003b08 <HAL_TIM_PWM_Start_DMA+0x328>
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a21      	ldr	r2, [pc, #132]	; (8003b60 <HAL_TIM_PWM_Start_DMA+0x380>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d013      	beq.n	8003b08 <HAL_TIM_PWM_Start_DMA+0x328>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a1f      	ldr	r2, [pc, #124]	; (8003b64 <HAL_TIM_PWM_Start_DMA+0x384>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d00e      	beq.n	8003b08 <HAL_TIM_PWM_Start_DMA+0x328>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a1a      	ldr	r2, [pc, #104]	; (8003b58 <HAL_TIM_PWM_Start_DMA+0x378>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d009      	beq.n	8003b08 <HAL_TIM_PWM_Start_DMA+0x328>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a1b      	ldr	r2, [pc, #108]	; (8003b68 <HAL_TIM_PWM_Start_DMA+0x388>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d004      	beq.n	8003b08 <HAL_TIM_PWM_Start_DMA+0x328>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a1a      	ldr	r2, [pc, #104]	; (8003b6c <HAL_TIM_PWM_Start_DMA+0x38c>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d111      	bne.n	8003b2c <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	f003 0307 	and.w	r3, r3, #7
 8003b12:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	2b06      	cmp	r3, #6
 8003b18:	d010      	beq.n	8003b3c <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f042 0201 	orr.w	r2, r2, #1
 8003b28:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b2a:	e007      	b.n	8003b3c <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f042 0201 	orr.w	r2, r2, #1
 8003b3a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003b3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3718      	adds	r7, #24
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	08004319 	.word	0x08004319
 8003b4c:	080043c1 	.word	0x080043c1
 8003b50:	08004287 	.word	0x08004287
 8003b54:	40010000 	.word	0x40010000
 8003b58:	40010400 	.word	0x40010400
 8003b5c:	40000400 	.word	0x40000400
 8003b60:	40000800 	.word	0x40000800
 8003b64:	40000c00 	.word	0x40000c00
 8003b68:	40014000 	.word	0x40014000
 8003b6c:	40001800 	.word	0x40001800

08003b70 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	73fb      	strb	r3, [r7, #15]
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	2b0c      	cmp	r3, #12
 8003b82:	d855      	bhi.n	8003c30 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8003b84:	a201      	add	r2, pc, #4	; (adr r2, 8003b8c <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8003b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b8a:	bf00      	nop
 8003b8c:	08003bc1 	.word	0x08003bc1
 8003b90:	08003c31 	.word	0x08003c31
 8003b94:	08003c31 	.word	0x08003c31
 8003b98:	08003c31 	.word	0x08003c31
 8003b9c:	08003bdd 	.word	0x08003bdd
 8003ba0:	08003c31 	.word	0x08003c31
 8003ba4:	08003c31 	.word	0x08003c31
 8003ba8:	08003c31 	.word	0x08003c31
 8003bac:	08003bf9 	.word	0x08003bf9
 8003bb0:	08003c31 	.word	0x08003c31
 8003bb4:	08003c31 	.word	0x08003c31
 8003bb8:	08003c31 	.word	0x08003c31
 8003bbc:	08003c15 	.word	0x08003c15
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68da      	ldr	r2, [r3, #12]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003bce:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f7fe fbdd 	bl	8002394 <HAL_DMA_Abort_IT>
      break;
 8003bda:	e02c      	b.n	8003c36 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68da      	ldr	r2, [r3, #12]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bea:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f7fe fbcf 	bl	8002394 <HAL_DMA_Abort_IT>
      break;
 8003bf6:	e01e      	b.n	8003c36 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68da      	ldr	r2, [r3, #12]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c06:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f7fe fbc1 	bl	8002394 <HAL_DMA_Abort_IT>
      break;
 8003c12:	e010      	b.n	8003c36 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	68da      	ldr	r2, [r3, #12]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c22:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f7fe fbb3 	bl	8002394 <HAL_DMA_Abort_IT>
      break;
 8003c2e:	e002      	b.n	8003c36 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	73fb      	strb	r3, [r7, #15]
      break;
 8003c34:	bf00      	nop
  }

  if (status == HAL_OK)
 8003c36:	7bfb      	ldrb	r3, [r7, #15]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d161      	bne.n	8003d00 <HAL_TIM_PWM_Stop_DMA+0x190>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2200      	movs	r2, #0
 8003c42:	6839      	ldr	r1, [r7, #0]
 8003c44:	4618      	mov	r0, r3
 8003c46:	f000 fed9 	bl	80049fc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a2f      	ldr	r2, [pc, #188]	; (8003d0c <HAL_TIM_PWM_Stop_DMA+0x19c>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d004      	beq.n	8003c5e <HAL_TIM_PWM_Stop_DMA+0xee>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a2d      	ldr	r2, [pc, #180]	; (8003d10 <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d101      	bne.n	8003c62 <HAL_TIM_PWM_Stop_DMA+0xf2>
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e000      	b.n	8003c64 <HAL_TIM_PWM_Stop_DMA+0xf4>
 8003c62:	2300      	movs	r3, #0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d017      	beq.n	8003c98 <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	6a1a      	ldr	r2, [r3, #32]
 8003c6e:	f241 1311 	movw	r3, #4369	; 0x1111
 8003c72:	4013      	ands	r3, r2
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d10f      	bne.n	8003c98 <HAL_TIM_PWM_Stop_DMA+0x128>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	6a1a      	ldr	r2, [r3, #32]
 8003c7e:	f240 4344 	movw	r3, #1092	; 0x444
 8003c82:	4013      	ands	r3, r2
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d107      	bne.n	8003c98 <HAL_TIM_PWM_Stop_DMA+0x128>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c96:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	6a1a      	ldr	r2, [r3, #32]
 8003c9e:	f241 1311 	movw	r3, #4369	; 0x1111
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d10f      	bne.n	8003cc8 <HAL_TIM_PWM_Stop_DMA+0x158>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	6a1a      	ldr	r2, [r3, #32]
 8003cae:	f240 4344 	movw	r3, #1092	; 0x444
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d107      	bne.n	8003cc8 <HAL_TIM_PWM_Stop_DMA+0x158>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f022 0201 	bic.w	r2, r2, #1
 8003cc6:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d104      	bne.n	8003cd8 <HAL_TIM_PWM_Stop_DMA+0x168>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cd6:	e013      	b.n	8003d00 <HAL_TIM_PWM_Stop_DMA+0x190>
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	2b04      	cmp	r3, #4
 8003cdc:	d104      	bne.n	8003ce8 <HAL_TIM_PWM_Stop_DMA+0x178>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ce6:	e00b      	b.n	8003d00 <HAL_TIM_PWM_Stop_DMA+0x190>
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	2b08      	cmp	r3, #8
 8003cec:	d104      	bne.n	8003cf8 <HAL_TIM_PWM_Stop_DMA+0x188>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cf6:	e003      	b.n	8003d00 <HAL_TIM_PWM_Stop_DMA+0x190>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8003d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3710      	adds	r7, #16
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	40010000 	.word	0x40010000
 8003d10:	40010400 	.word	0x40010400

08003d14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d122      	bne.n	8003d70 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	f003 0302 	and.w	r3, r3, #2
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	d11b      	bne.n	8003d70 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f06f 0202 	mvn.w	r2, #2
 8003d40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2201      	movs	r2, #1
 8003d46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	f003 0303 	and.w	r3, r3, #3
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d003      	beq.n	8003d5e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 fa77 	bl	800424a <HAL_TIM_IC_CaptureCallback>
 8003d5c:	e005      	b.n	8003d6a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 fa69 	bl	8004236 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f7fd fb01 	bl	800136c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	f003 0304 	and.w	r3, r3, #4
 8003d7a:	2b04      	cmp	r3, #4
 8003d7c:	d122      	bne.n	8003dc4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	f003 0304 	and.w	r3, r3, #4
 8003d88:	2b04      	cmp	r3, #4
 8003d8a:	d11b      	bne.n	8003dc4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f06f 0204 	mvn.w	r2, #4
 8003d94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2202      	movs	r2, #2
 8003d9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	699b      	ldr	r3, [r3, #24]
 8003da2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d003      	beq.n	8003db2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 fa4d 	bl	800424a <HAL_TIM_IC_CaptureCallback>
 8003db0:	e005      	b.n	8003dbe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 fa3f 	bl	8004236 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f7fd fad7 	bl	800136c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	f003 0308 	and.w	r3, r3, #8
 8003dce:	2b08      	cmp	r3, #8
 8003dd0:	d122      	bne.n	8003e18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	f003 0308 	and.w	r3, r3, #8
 8003ddc:	2b08      	cmp	r3, #8
 8003dde:	d11b      	bne.n	8003e18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f06f 0208 	mvn.w	r2, #8
 8003de8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2204      	movs	r2, #4
 8003dee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	69db      	ldr	r3, [r3, #28]
 8003df6:	f003 0303 	and.w	r3, r3, #3
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d003      	beq.n	8003e06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 fa23 	bl	800424a <HAL_TIM_IC_CaptureCallback>
 8003e04:	e005      	b.n	8003e12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 fa15 	bl	8004236 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f7fd faad 	bl	800136c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	f003 0310 	and.w	r3, r3, #16
 8003e22:	2b10      	cmp	r3, #16
 8003e24:	d122      	bne.n	8003e6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	f003 0310 	and.w	r3, r3, #16
 8003e30:	2b10      	cmp	r3, #16
 8003e32:	d11b      	bne.n	8003e6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f06f 0210 	mvn.w	r2, #16
 8003e3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2208      	movs	r2, #8
 8003e42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	69db      	ldr	r3, [r3, #28]
 8003e4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d003      	beq.n	8003e5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 f9f9 	bl	800424a <HAL_TIM_IC_CaptureCallback>
 8003e58:	e005      	b.n	8003e66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 f9eb 	bl	8004236 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f7fd fa83 	bl	800136c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d10e      	bne.n	8003e98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	f003 0301 	and.w	r3, r3, #1
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d107      	bne.n	8003e98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f06f 0201 	mvn.w	r2, #1
 8003e90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f7fd f8c4 	bl	8001020 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ea2:	2b80      	cmp	r3, #128	; 0x80
 8003ea4:	d10e      	bne.n	8003ec4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eb0:	2b80      	cmp	r3, #128	; 0x80
 8003eb2:	d107      	bne.n	8003ec4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ebc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 fe9a 	bl	8004bf8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ece:	2b40      	cmp	r3, #64	; 0x40
 8003ed0:	d10e      	bne.n	8003ef0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003edc:	2b40      	cmp	r3, #64	; 0x40
 8003ede:	d107      	bne.n	8003ef0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ee8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 f9b7 	bl	800425e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	f003 0320 	and.w	r3, r3, #32
 8003efa:	2b20      	cmp	r3, #32
 8003efc:	d10e      	bne.n	8003f1c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	f003 0320 	and.w	r3, r3, #32
 8003f08:	2b20      	cmp	r3, #32
 8003f0a:	d107      	bne.n	8003f1c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f06f 0220 	mvn.w	r2, #32
 8003f14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 fe64 	bl	8004be4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f1c:	bf00      	nop
 8003f1e:	3708      	adds	r7, #8
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b086      	sub	sp, #24
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f30:	2300      	movs	r3, #0
 8003f32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d101      	bne.n	8003f42 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003f3e:	2302      	movs	r3, #2
 8003f40:	e0ae      	b.n	80040a0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2201      	movs	r2, #1
 8003f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2b0c      	cmp	r3, #12
 8003f4e:	f200 809f 	bhi.w	8004090 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003f52:	a201      	add	r2, pc, #4	; (adr r2, 8003f58 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f58:	08003f8d 	.word	0x08003f8d
 8003f5c:	08004091 	.word	0x08004091
 8003f60:	08004091 	.word	0x08004091
 8003f64:	08004091 	.word	0x08004091
 8003f68:	08003fcd 	.word	0x08003fcd
 8003f6c:	08004091 	.word	0x08004091
 8003f70:	08004091 	.word	0x08004091
 8003f74:	08004091 	.word	0x08004091
 8003f78:	0800400f 	.word	0x0800400f
 8003f7c:	08004091 	.word	0x08004091
 8003f80:	08004091 	.word	0x08004091
 8003f84:	08004091 	.word	0x08004091
 8003f88:	0800404f 	.word	0x0800404f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68b9      	ldr	r1, [r7, #8]
 8003f92:	4618      	mov	r0, r3
 8003f94:	f000 fae8 	bl	8004568 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	699a      	ldr	r2, [r3, #24]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f042 0208 	orr.w	r2, r2, #8
 8003fa6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	699a      	ldr	r2, [r3, #24]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f022 0204 	bic.w	r2, r2, #4
 8003fb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	6999      	ldr	r1, [r3, #24]
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	691a      	ldr	r2, [r3, #16]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	619a      	str	r2, [r3, #24]
      break;
 8003fca:	e064      	b.n	8004096 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68b9      	ldr	r1, [r7, #8]
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f000 fb38 	bl	8004648 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	699a      	ldr	r2, [r3, #24]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fe6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	699a      	ldr	r2, [r3, #24]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ff6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	6999      	ldr	r1, [r3, #24]
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	021a      	lsls	r2, r3, #8
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	430a      	orrs	r2, r1
 800400a:	619a      	str	r2, [r3, #24]
      break;
 800400c:	e043      	b.n	8004096 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68b9      	ldr	r1, [r7, #8]
 8004014:	4618      	mov	r0, r3
 8004016:	f000 fb8d 	bl	8004734 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	69da      	ldr	r2, [r3, #28]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f042 0208 	orr.w	r2, r2, #8
 8004028:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	69da      	ldr	r2, [r3, #28]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f022 0204 	bic.w	r2, r2, #4
 8004038:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	69d9      	ldr	r1, [r3, #28]
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	691a      	ldr	r2, [r3, #16]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	430a      	orrs	r2, r1
 800404a:	61da      	str	r2, [r3, #28]
      break;
 800404c:	e023      	b.n	8004096 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	68b9      	ldr	r1, [r7, #8]
 8004054:	4618      	mov	r0, r3
 8004056:	f000 fbe1 	bl	800481c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	69da      	ldr	r2, [r3, #28]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004068:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	69da      	ldr	r2, [r3, #28]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004078:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	69d9      	ldr	r1, [r3, #28]
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	021a      	lsls	r2, r3, #8
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	430a      	orrs	r2, r1
 800408c:	61da      	str	r2, [r3, #28]
      break;
 800408e:	e002      	b.n	8004096 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	75fb      	strb	r3, [r7, #23]
      break;
 8004094:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800409e:	7dfb      	ldrb	r3, [r7, #23]
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3718      	adds	r7, #24
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040b2:	2300      	movs	r3, #0
 80040b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d101      	bne.n	80040c4 <HAL_TIM_ConfigClockSource+0x1c>
 80040c0:	2302      	movs	r3, #2
 80040c2:	e0b4      	b.n	800422e <HAL_TIM_ConfigClockSource+0x186>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2202      	movs	r2, #2
 80040d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80040e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68ba      	ldr	r2, [r7, #8]
 80040f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040fc:	d03e      	beq.n	800417c <HAL_TIM_ConfigClockSource+0xd4>
 80040fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004102:	f200 8087 	bhi.w	8004214 <HAL_TIM_ConfigClockSource+0x16c>
 8004106:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800410a:	f000 8086 	beq.w	800421a <HAL_TIM_ConfigClockSource+0x172>
 800410e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004112:	d87f      	bhi.n	8004214 <HAL_TIM_ConfigClockSource+0x16c>
 8004114:	2b70      	cmp	r3, #112	; 0x70
 8004116:	d01a      	beq.n	800414e <HAL_TIM_ConfigClockSource+0xa6>
 8004118:	2b70      	cmp	r3, #112	; 0x70
 800411a:	d87b      	bhi.n	8004214 <HAL_TIM_ConfigClockSource+0x16c>
 800411c:	2b60      	cmp	r3, #96	; 0x60
 800411e:	d050      	beq.n	80041c2 <HAL_TIM_ConfigClockSource+0x11a>
 8004120:	2b60      	cmp	r3, #96	; 0x60
 8004122:	d877      	bhi.n	8004214 <HAL_TIM_ConfigClockSource+0x16c>
 8004124:	2b50      	cmp	r3, #80	; 0x50
 8004126:	d03c      	beq.n	80041a2 <HAL_TIM_ConfigClockSource+0xfa>
 8004128:	2b50      	cmp	r3, #80	; 0x50
 800412a:	d873      	bhi.n	8004214 <HAL_TIM_ConfigClockSource+0x16c>
 800412c:	2b40      	cmp	r3, #64	; 0x40
 800412e:	d058      	beq.n	80041e2 <HAL_TIM_ConfigClockSource+0x13a>
 8004130:	2b40      	cmp	r3, #64	; 0x40
 8004132:	d86f      	bhi.n	8004214 <HAL_TIM_ConfigClockSource+0x16c>
 8004134:	2b30      	cmp	r3, #48	; 0x30
 8004136:	d064      	beq.n	8004202 <HAL_TIM_ConfigClockSource+0x15a>
 8004138:	2b30      	cmp	r3, #48	; 0x30
 800413a:	d86b      	bhi.n	8004214 <HAL_TIM_ConfigClockSource+0x16c>
 800413c:	2b20      	cmp	r3, #32
 800413e:	d060      	beq.n	8004202 <HAL_TIM_ConfigClockSource+0x15a>
 8004140:	2b20      	cmp	r3, #32
 8004142:	d867      	bhi.n	8004214 <HAL_TIM_ConfigClockSource+0x16c>
 8004144:	2b00      	cmp	r3, #0
 8004146:	d05c      	beq.n	8004202 <HAL_TIM_ConfigClockSource+0x15a>
 8004148:	2b10      	cmp	r3, #16
 800414a:	d05a      	beq.n	8004202 <HAL_TIM_ConfigClockSource+0x15a>
 800414c:	e062      	b.n	8004214 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6818      	ldr	r0, [r3, #0]
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	6899      	ldr	r1, [r3, #8]
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	685a      	ldr	r2, [r3, #4]
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	f000 fc2d 	bl	80049bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004170:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68ba      	ldr	r2, [r7, #8]
 8004178:	609a      	str	r2, [r3, #8]
      break;
 800417a:	e04f      	b.n	800421c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6818      	ldr	r0, [r3, #0]
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	6899      	ldr	r1, [r3, #8]
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	685a      	ldr	r2, [r3, #4]
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	f000 fc16 	bl	80049bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	689a      	ldr	r2, [r3, #8]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800419e:	609a      	str	r2, [r3, #8]
      break;
 80041a0:	e03c      	b.n	800421c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6818      	ldr	r0, [r3, #0]
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	6859      	ldr	r1, [r3, #4]
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	461a      	mov	r2, r3
 80041b0:	f000 fb8a 	bl	80048c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	2150      	movs	r1, #80	; 0x50
 80041ba:	4618      	mov	r0, r3
 80041bc:	f000 fbe3 	bl	8004986 <TIM_ITRx_SetConfig>
      break;
 80041c0:	e02c      	b.n	800421c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6818      	ldr	r0, [r3, #0]
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	6859      	ldr	r1, [r3, #4]
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	461a      	mov	r2, r3
 80041d0:	f000 fba9 	bl	8004926 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2160      	movs	r1, #96	; 0x60
 80041da:	4618      	mov	r0, r3
 80041dc:	f000 fbd3 	bl	8004986 <TIM_ITRx_SetConfig>
      break;
 80041e0:	e01c      	b.n	800421c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6818      	ldr	r0, [r3, #0]
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	6859      	ldr	r1, [r3, #4]
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	461a      	mov	r2, r3
 80041f0:	f000 fb6a 	bl	80048c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2140      	movs	r1, #64	; 0x40
 80041fa:	4618      	mov	r0, r3
 80041fc:	f000 fbc3 	bl	8004986 <TIM_ITRx_SetConfig>
      break;
 8004200:	e00c      	b.n	800421c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4619      	mov	r1, r3
 800420c:	4610      	mov	r0, r2
 800420e:	f000 fbba 	bl	8004986 <TIM_ITRx_SetConfig>
      break;
 8004212:	e003      	b.n	800421c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	73fb      	strb	r3, [r7, #15]
      break;
 8004218:	e000      	b.n	800421c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800421a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800422c:	7bfb      	ldrb	r3, [r7, #15]
}
 800422e:	4618      	mov	r0, r3
 8004230:	3710      	adds	r7, #16
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}

08004236 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004236:	b480      	push	{r7}
 8004238:	b083      	sub	sp, #12
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800423e:	bf00      	nop
 8004240:	370c      	adds	r7, #12
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr

0800424a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800424a:	b480      	push	{r7}
 800424c:	b083      	sub	sp, #12
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004252:	bf00      	nop
 8004254:	370c      	adds	r7, #12
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr

0800425e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800425e:	b480      	push	{r7}
 8004260:	b083      	sub	sp, #12
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004266:	bf00      	nop
 8004268:	370c      	adds	r7, #12
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr

08004272 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004272:	b480      	push	{r7}
 8004274:	b083      	sub	sp, #12
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800427a:	bf00      	nop
 800427c:	370c      	adds	r7, #12
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr

08004286 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004286:	b580      	push	{r7, lr}
 8004288:	b084      	sub	sp, #16
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004292:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	429a      	cmp	r2, r3
 800429c:	d107      	bne.n	80042ae <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2201      	movs	r2, #1
 80042a2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042ac:	e02a      	b.n	8004304 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d107      	bne.n	80042c8 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2202      	movs	r2, #2
 80042bc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2201      	movs	r2, #1
 80042c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042c6:	e01d      	b.n	8004304 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d107      	bne.n	80042e2 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2204      	movs	r2, #4
 80042d6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042e0:	e010      	b.n	8004304 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d107      	bne.n	80042fc <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2208      	movs	r2, #8
 80042f0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2201      	movs	r2, #1
 80042f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042fa:	e003      	b.n	8004304 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004304:	68f8      	ldr	r0, [r7, #12]
 8004306:	f7ff ffb4 	bl	8004272 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2200      	movs	r2, #0
 800430e:	771a      	strb	r2, [r3, #28]
}
 8004310:	bf00      	nop
 8004312:	3710      	adds	r7, #16
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004324:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	429a      	cmp	r2, r3
 800432e:	d10b      	bne.n	8004348 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2201      	movs	r2, #1
 8004334:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	69db      	ldr	r3, [r3, #28]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d136      	bne.n	80043ac <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2201      	movs	r2, #1
 8004342:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004346:	e031      	b.n	80043ac <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	429a      	cmp	r2, r3
 8004350:	d10b      	bne.n	800436a <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2202      	movs	r2, #2
 8004356:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	69db      	ldr	r3, [r3, #28]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d125      	bne.n	80043ac <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004368:	e020      	b.n	80043ac <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	429a      	cmp	r2, r3
 8004372:	d10b      	bne.n	800438c <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2204      	movs	r2, #4
 8004378:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	69db      	ldr	r3, [r3, #28]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d114      	bne.n	80043ac <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2201      	movs	r2, #1
 8004386:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800438a:	e00f      	b.n	80043ac <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	429a      	cmp	r2, r3
 8004394:	d10a      	bne.n	80043ac <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2208      	movs	r2, #8
 800439a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	69db      	ldr	r3, [r3, #28]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d103      	bne.n	80043ac <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043ac:	68f8      	ldr	r0, [r7, #12]
 80043ae:	f7fc ffdd 	bl	800136c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2200      	movs	r2, #0
 80043b6:	771a      	strb	r2, [r3, #28]
}
 80043b8:	bf00      	nop
 80043ba:	3710      	adds	r7, #16
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}

080043c0 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043cc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d103      	bne.n	80043e0 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2201      	movs	r2, #1
 80043dc:	771a      	strb	r2, [r3, #28]
 80043de:	e019      	b.n	8004414 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d103      	bne.n	80043f2 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2202      	movs	r2, #2
 80043ee:	771a      	strb	r2, [r3, #28]
 80043f0:	e010      	b.n	8004414 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d103      	bne.n	8004404 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2204      	movs	r2, #4
 8004400:	771a      	strb	r2, [r3, #28]
 8004402:	e007      	b.n	8004414 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	429a      	cmp	r2, r3
 800440c:	d102      	bne.n	8004414 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2208      	movs	r2, #8
 8004412:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004414:	68f8      	ldr	r0, [r7, #12]
 8004416:	f7fd f805 	bl	8001424 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2200      	movs	r2, #0
 800441e:	771a      	strb	r2, [r3, #28]
}
 8004420:	bf00      	nop
 8004422:	3710      	adds	r7, #16
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004428:	b480      	push	{r7}
 800442a:	b085      	sub	sp, #20
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a40      	ldr	r2, [pc, #256]	; (800453c <TIM_Base_SetConfig+0x114>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d013      	beq.n	8004468 <TIM_Base_SetConfig+0x40>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004446:	d00f      	beq.n	8004468 <TIM_Base_SetConfig+0x40>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4a3d      	ldr	r2, [pc, #244]	; (8004540 <TIM_Base_SetConfig+0x118>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d00b      	beq.n	8004468 <TIM_Base_SetConfig+0x40>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4a3c      	ldr	r2, [pc, #240]	; (8004544 <TIM_Base_SetConfig+0x11c>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d007      	beq.n	8004468 <TIM_Base_SetConfig+0x40>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a3b      	ldr	r2, [pc, #236]	; (8004548 <TIM_Base_SetConfig+0x120>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d003      	beq.n	8004468 <TIM_Base_SetConfig+0x40>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4a3a      	ldr	r2, [pc, #232]	; (800454c <TIM_Base_SetConfig+0x124>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d108      	bne.n	800447a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800446e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	68fa      	ldr	r2, [r7, #12]
 8004476:	4313      	orrs	r3, r2
 8004478:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a2f      	ldr	r2, [pc, #188]	; (800453c <TIM_Base_SetConfig+0x114>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d02b      	beq.n	80044da <TIM_Base_SetConfig+0xb2>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004488:	d027      	beq.n	80044da <TIM_Base_SetConfig+0xb2>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a2c      	ldr	r2, [pc, #176]	; (8004540 <TIM_Base_SetConfig+0x118>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d023      	beq.n	80044da <TIM_Base_SetConfig+0xb2>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a2b      	ldr	r2, [pc, #172]	; (8004544 <TIM_Base_SetConfig+0x11c>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d01f      	beq.n	80044da <TIM_Base_SetConfig+0xb2>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a2a      	ldr	r2, [pc, #168]	; (8004548 <TIM_Base_SetConfig+0x120>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d01b      	beq.n	80044da <TIM_Base_SetConfig+0xb2>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a29      	ldr	r2, [pc, #164]	; (800454c <TIM_Base_SetConfig+0x124>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d017      	beq.n	80044da <TIM_Base_SetConfig+0xb2>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a28      	ldr	r2, [pc, #160]	; (8004550 <TIM_Base_SetConfig+0x128>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d013      	beq.n	80044da <TIM_Base_SetConfig+0xb2>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a27      	ldr	r2, [pc, #156]	; (8004554 <TIM_Base_SetConfig+0x12c>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d00f      	beq.n	80044da <TIM_Base_SetConfig+0xb2>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a26      	ldr	r2, [pc, #152]	; (8004558 <TIM_Base_SetConfig+0x130>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d00b      	beq.n	80044da <TIM_Base_SetConfig+0xb2>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a25      	ldr	r2, [pc, #148]	; (800455c <TIM_Base_SetConfig+0x134>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d007      	beq.n	80044da <TIM_Base_SetConfig+0xb2>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a24      	ldr	r2, [pc, #144]	; (8004560 <TIM_Base_SetConfig+0x138>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d003      	beq.n	80044da <TIM_Base_SetConfig+0xb2>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a23      	ldr	r2, [pc, #140]	; (8004564 <TIM_Base_SetConfig+0x13c>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d108      	bne.n	80044ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	695b      	ldr	r3, [r3, #20]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	689a      	ldr	r2, [r3, #8]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4a0a      	ldr	r2, [pc, #40]	; (800453c <TIM_Base_SetConfig+0x114>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d003      	beq.n	8004520 <TIM_Base_SetConfig+0xf8>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4a0c      	ldr	r2, [pc, #48]	; (800454c <TIM_Base_SetConfig+0x124>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d103      	bne.n	8004528 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	691a      	ldr	r2, [r3, #16]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	615a      	str	r2, [r3, #20]
}
 800452e:	bf00      	nop
 8004530:	3714      	adds	r7, #20
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	40010000 	.word	0x40010000
 8004540:	40000400 	.word	0x40000400
 8004544:	40000800 	.word	0x40000800
 8004548:	40000c00 	.word	0x40000c00
 800454c:	40010400 	.word	0x40010400
 8004550:	40014000 	.word	0x40014000
 8004554:	40014400 	.word	0x40014400
 8004558:	40014800 	.word	0x40014800
 800455c:	40001800 	.word	0x40001800
 8004560:	40001c00 	.word	0x40001c00
 8004564:	40002000 	.word	0x40002000

08004568 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004568:	b480      	push	{r7}
 800456a:	b087      	sub	sp, #28
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	f023 0201 	bic.w	r2, r3, #1
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a1b      	ldr	r3, [r3, #32]
 8004582:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f023 0303 	bic.w	r3, r3, #3
 800459e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	f023 0302 	bic.w	r3, r3, #2
 80045b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a20      	ldr	r2, [pc, #128]	; (8004640 <TIM_OC1_SetConfig+0xd8>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d003      	beq.n	80045cc <TIM_OC1_SetConfig+0x64>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4a1f      	ldr	r2, [pc, #124]	; (8004644 <TIM_OC1_SetConfig+0xdc>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d10c      	bne.n	80045e6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	f023 0308 	bic.w	r3, r3, #8
 80045d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	697a      	ldr	r2, [r7, #20]
 80045da:	4313      	orrs	r3, r2
 80045dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	f023 0304 	bic.w	r3, r3, #4
 80045e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a15      	ldr	r2, [pc, #84]	; (8004640 <TIM_OC1_SetConfig+0xd8>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d003      	beq.n	80045f6 <TIM_OC1_SetConfig+0x8e>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a14      	ldr	r2, [pc, #80]	; (8004644 <TIM_OC1_SetConfig+0xdc>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d111      	bne.n	800461a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004604:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	693a      	ldr	r2, [r7, #16]
 800460c:	4313      	orrs	r3, r2
 800460e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	699b      	ldr	r3, [r3, #24]
 8004614:	693a      	ldr	r2, [r7, #16]
 8004616:	4313      	orrs	r3, r2
 8004618:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	693a      	ldr	r2, [r7, #16]
 800461e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	685a      	ldr	r2, [r3, #4]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	697a      	ldr	r2, [r7, #20]
 8004632:	621a      	str	r2, [r3, #32]
}
 8004634:	bf00      	nop
 8004636:	371c      	adds	r7, #28
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr
 8004640:	40010000 	.word	0x40010000
 8004644:	40010400 	.word	0x40010400

08004648 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004648:	b480      	push	{r7}
 800464a:	b087      	sub	sp, #28
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a1b      	ldr	r3, [r3, #32]
 8004656:	f023 0210 	bic.w	r2, r3, #16
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a1b      	ldr	r3, [r3, #32]
 8004662:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	699b      	ldr	r3, [r3, #24]
 800466e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004676:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800467e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	021b      	lsls	r3, r3, #8
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	4313      	orrs	r3, r2
 800468a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	f023 0320 	bic.w	r3, r3, #32
 8004692:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	011b      	lsls	r3, r3, #4
 800469a:	697a      	ldr	r2, [r7, #20]
 800469c:	4313      	orrs	r3, r2
 800469e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a22      	ldr	r2, [pc, #136]	; (800472c <TIM_OC2_SetConfig+0xe4>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d003      	beq.n	80046b0 <TIM_OC2_SetConfig+0x68>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a21      	ldr	r2, [pc, #132]	; (8004730 <TIM_OC2_SetConfig+0xe8>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d10d      	bne.n	80046cc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	011b      	lsls	r3, r3, #4
 80046be:	697a      	ldr	r2, [r7, #20]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	4a17      	ldr	r2, [pc, #92]	; (800472c <TIM_OC2_SetConfig+0xe4>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d003      	beq.n	80046dc <TIM_OC2_SetConfig+0x94>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4a16      	ldr	r2, [pc, #88]	; (8004730 <TIM_OC2_SetConfig+0xe8>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d113      	bne.n	8004704 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	695b      	ldr	r3, [r3, #20]
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	693a      	ldr	r2, [r7, #16]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	693a      	ldr	r2, [r7, #16]
 8004700:	4313      	orrs	r3, r2
 8004702:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	685a      	ldr	r2, [r3, #4]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	697a      	ldr	r2, [r7, #20]
 800471c:	621a      	str	r2, [r3, #32]
}
 800471e:	bf00      	nop
 8004720:	371c      	adds	r7, #28
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	40010000 	.word	0x40010000
 8004730:	40010400 	.word	0x40010400

08004734 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004734:	b480      	push	{r7}
 8004736:	b087      	sub	sp, #28
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a1b      	ldr	r3, [r3, #32]
 8004742:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a1b      	ldr	r3, [r3, #32]
 800474e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	69db      	ldr	r3, [r3, #28]
 800475a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004762:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f023 0303 	bic.w	r3, r3, #3
 800476a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68fa      	ldr	r2, [r7, #12]
 8004772:	4313      	orrs	r3, r2
 8004774:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800477c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	021b      	lsls	r3, r3, #8
 8004784:	697a      	ldr	r2, [r7, #20]
 8004786:	4313      	orrs	r3, r2
 8004788:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a21      	ldr	r2, [pc, #132]	; (8004814 <TIM_OC3_SetConfig+0xe0>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d003      	beq.n	800479a <TIM_OC3_SetConfig+0x66>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a20      	ldr	r2, [pc, #128]	; (8004818 <TIM_OC3_SetConfig+0xe4>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d10d      	bne.n	80047b6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	021b      	lsls	r3, r3, #8
 80047a8:	697a      	ldr	r2, [r7, #20]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a16      	ldr	r2, [pc, #88]	; (8004814 <TIM_OC3_SetConfig+0xe0>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d003      	beq.n	80047c6 <TIM_OC3_SetConfig+0x92>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a15      	ldr	r2, [pc, #84]	; (8004818 <TIM_OC3_SetConfig+0xe4>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d113      	bne.n	80047ee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	695b      	ldr	r3, [r3, #20]
 80047da:	011b      	lsls	r3, r3, #4
 80047dc:	693a      	ldr	r2, [r7, #16]
 80047de:	4313      	orrs	r3, r2
 80047e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	011b      	lsls	r3, r3, #4
 80047e8:	693a      	ldr	r2, [r7, #16]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	693a      	ldr	r2, [r7, #16]
 80047f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	68fa      	ldr	r2, [r7, #12]
 80047f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	685a      	ldr	r2, [r3, #4]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	697a      	ldr	r2, [r7, #20]
 8004806:	621a      	str	r2, [r3, #32]
}
 8004808:	bf00      	nop
 800480a:	371c      	adds	r7, #28
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr
 8004814:	40010000 	.word	0x40010000
 8004818:	40010400 	.word	0x40010400

0800481c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800481c:	b480      	push	{r7}
 800481e:	b087      	sub	sp, #28
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a1b      	ldr	r3, [r3, #32]
 800482a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a1b      	ldr	r3, [r3, #32]
 8004836:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	69db      	ldr	r3, [r3, #28]
 8004842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800484a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004852:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	021b      	lsls	r3, r3, #8
 800485a:	68fa      	ldr	r2, [r7, #12]
 800485c:	4313      	orrs	r3, r2
 800485e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004866:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	031b      	lsls	r3, r3, #12
 800486e:	693a      	ldr	r2, [r7, #16]
 8004870:	4313      	orrs	r3, r2
 8004872:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a12      	ldr	r2, [pc, #72]	; (80048c0 <TIM_OC4_SetConfig+0xa4>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d003      	beq.n	8004884 <TIM_OC4_SetConfig+0x68>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a11      	ldr	r2, [pc, #68]	; (80048c4 <TIM_OC4_SetConfig+0xa8>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d109      	bne.n	8004898 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800488a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	695b      	ldr	r3, [r3, #20]
 8004890:	019b      	lsls	r3, r3, #6
 8004892:	697a      	ldr	r2, [r7, #20]
 8004894:	4313      	orrs	r3, r2
 8004896:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	697a      	ldr	r2, [r7, #20]
 800489c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	68fa      	ldr	r2, [r7, #12]
 80048a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	685a      	ldr	r2, [r3, #4]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	693a      	ldr	r2, [r7, #16]
 80048b0:	621a      	str	r2, [r3, #32]
}
 80048b2:	bf00      	nop
 80048b4:	371c      	adds	r7, #28
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	40010000 	.word	0x40010000
 80048c4:	40010400 	.word	0x40010400

080048c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b087      	sub	sp, #28
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6a1b      	ldr	r3, [r3, #32]
 80048d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6a1b      	ldr	r3, [r3, #32]
 80048de:	f023 0201 	bic.w	r2, r3, #1
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	699b      	ldr	r3, [r3, #24]
 80048ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	011b      	lsls	r3, r3, #4
 80048f8:	693a      	ldr	r2, [r7, #16]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	f023 030a 	bic.w	r3, r3, #10
 8004904:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004906:	697a      	ldr	r2, [r7, #20]
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	4313      	orrs	r3, r2
 800490c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	697a      	ldr	r2, [r7, #20]
 8004918:	621a      	str	r2, [r3, #32]
}
 800491a:	bf00      	nop
 800491c:	371c      	adds	r7, #28
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr

08004926 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004926:	b480      	push	{r7}
 8004928:	b087      	sub	sp, #28
 800492a:	af00      	add	r7, sp, #0
 800492c:	60f8      	str	r0, [r7, #12]
 800492e:	60b9      	str	r1, [r7, #8]
 8004930:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6a1b      	ldr	r3, [r3, #32]
 8004936:	f023 0210 	bic.w	r2, r3, #16
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	699b      	ldr	r3, [r3, #24]
 8004942:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6a1b      	ldr	r3, [r3, #32]
 8004948:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004950:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	031b      	lsls	r3, r3, #12
 8004956:	697a      	ldr	r2, [r7, #20]
 8004958:	4313      	orrs	r3, r2
 800495a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004962:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	011b      	lsls	r3, r3, #4
 8004968:	693a      	ldr	r2, [r7, #16]
 800496a:	4313      	orrs	r3, r2
 800496c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	697a      	ldr	r2, [r7, #20]
 8004972:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	693a      	ldr	r2, [r7, #16]
 8004978:	621a      	str	r2, [r3, #32]
}
 800497a:	bf00      	nop
 800497c:	371c      	adds	r7, #28
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr

08004986 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004986:	b480      	push	{r7}
 8004988:	b085      	sub	sp, #20
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
 800498e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800499c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800499e:	683a      	ldr	r2, [r7, #0]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	f043 0307 	orr.w	r3, r3, #7
 80049a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	609a      	str	r2, [r3, #8]
}
 80049b0:	bf00      	nop
 80049b2:	3714      	adds	r7, #20
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80049bc:	b480      	push	{r7}
 80049be:	b087      	sub	sp, #28
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	607a      	str	r2, [r7, #4]
 80049c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	021a      	lsls	r2, r3, #8
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	431a      	orrs	r2, r3
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	697a      	ldr	r2, [r7, #20]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	697a      	ldr	r2, [r7, #20]
 80049ee:	609a      	str	r2, [r3, #8]
}
 80049f0:	bf00      	nop
 80049f2:	371c      	adds	r7, #28
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b087      	sub	sp, #28
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	f003 031f 	and.w	r3, r3, #31
 8004a0e:	2201      	movs	r2, #1
 8004a10:	fa02 f303 	lsl.w	r3, r2, r3
 8004a14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6a1a      	ldr	r2, [r3, #32]
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	43db      	mvns	r3, r3
 8004a1e:	401a      	ands	r2, r3
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6a1a      	ldr	r2, [r3, #32]
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	f003 031f 	and.w	r3, r3, #31
 8004a2e:	6879      	ldr	r1, [r7, #4]
 8004a30:	fa01 f303 	lsl.w	r3, r1, r3
 8004a34:	431a      	orrs	r2, r3
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	621a      	str	r2, [r3, #32]
}
 8004a3a:	bf00      	nop
 8004a3c:	371c      	adds	r7, #28
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr
	...

08004a48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d101      	bne.n	8004a60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a5c:	2302      	movs	r3, #2
 8004a5e:	e05a      	b.n	8004b16 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2202      	movs	r2, #2
 8004a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	68fa      	ldr	r2, [r7, #12]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a21      	ldr	r2, [pc, #132]	; (8004b24 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d022      	beq.n	8004aea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aac:	d01d      	beq.n	8004aea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a1d      	ldr	r2, [pc, #116]	; (8004b28 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d018      	beq.n	8004aea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a1b      	ldr	r2, [pc, #108]	; (8004b2c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d013      	beq.n	8004aea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a1a      	ldr	r2, [pc, #104]	; (8004b30 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d00e      	beq.n	8004aea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a18      	ldr	r2, [pc, #96]	; (8004b34 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d009      	beq.n	8004aea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a17      	ldr	r2, [pc, #92]	; (8004b38 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d004      	beq.n	8004aea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a15      	ldr	r2, [pc, #84]	; (8004b3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d10c      	bne.n	8004b04 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004af0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	68ba      	ldr	r2, [r7, #8]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68ba      	ldr	r2, [r7, #8]
 8004b02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3714      	adds	r7, #20
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr
 8004b22:	bf00      	nop
 8004b24:	40010000 	.word	0x40010000
 8004b28:	40000400 	.word	0x40000400
 8004b2c:	40000800 	.word	0x40000800
 8004b30:	40000c00 	.word	0x40000c00
 8004b34:	40010400 	.word	0x40010400
 8004b38:	40014000 	.word	0x40014000
 8004b3c:	40001800 	.word	0x40001800

08004b40 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d101      	bne.n	8004b5c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004b58:	2302      	movs	r3, #2
 8004b5a:	e03d      	b.n	8004bd8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	695b      	ldr	r3, [r3, #20]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	69db      	ldr	r3, [r3, #28]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bd6:	2300      	movs	r3, #0
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3714      	adds	r7, #20
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004bec:	bf00      	nop
 8004bee:	370c      	adds	r7, #12
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c00:	bf00      	nop
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d101      	bne.n	8004c1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e03f      	b.n	8004c9e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d106      	bne.n	8004c38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f7fc fd3a 	bl	80016ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2224      	movs	r2, #36	; 0x24
 8004c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68da      	ldr	r2, [r3, #12]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 fad5 	bl	8005200 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	691a      	ldr	r2, [r3, #16]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	695a      	ldr	r2, [r3, #20]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	68da      	ldr	r2, [r3, #12]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2220      	movs	r2, #32
 8004c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2220      	movs	r2, #32
 8004c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3708      	adds	r7, #8
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}

08004ca6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ca6:	b580      	push	{r7, lr}
 8004ca8:	b08a      	sub	sp, #40	; 0x28
 8004caa:	af02      	add	r7, sp, #8
 8004cac:	60f8      	str	r0, [r7, #12]
 8004cae:	60b9      	str	r1, [r7, #8]
 8004cb0:	603b      	str	r3, [r7, #0]
 8004cb2:	4613      	mov	r3, r2
 8004cb4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	2b20      	cmp	r3, #32
 8004cc4:	d17c      	bne.n	8004dc0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d002      	beq.n	8004cd2 <HAL_UART_Transmit+0x2c>
 8004ccc:	88fb      	ldrh	r3, [r7, #6]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d101      	bne.n	8004cd6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e075      	b.n	8004dc2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d101      	bne.n	8004ce4 <HAL_UART_Transmit+0x3e>
 8004ce0:	2302      	movs	r3, #2
 8004ce2:	e06e      	b.n	8004dc2 <HAL_UART_Transmit+0x11c>
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2221      	movs	r2, #33	; 0x21
 8004cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004cfa:	f7fc fe61 	bl	80019c0 <HAL_GetTick>
 8004cfe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	88fa      	ldrh	r2, [r7, #6]
 8004d04:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	88fa      	ldrh	r2, [r7, #6]
 8004d0a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d14:	d108      	bne.n	8004d28 <HAL_UART_Transmit+0x82>
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d104      	bne.n	8004d28 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	61bb      	str	r3, [r7, #24]
 8004d26:	e003      	b.n	8004d30 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004d38:	e02a      	b.n	8004d90 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	9300      	str	r3, [sp, #0]
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	2200      	movs	r2, #0
 8004d42:	2180      	movs	r1, #128	; 0x80
 8004d44:	68f8      	ldr	r0, [r7, #12]
 8004d46:	f000 f9ed 	bl	8005124 <UART_WaitOnFlagUntilTimeout>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d001      	beq.n	8004d54 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004d50:	2303      	movs	r3, #3
 8004d52:	e036      	b.n	8004dc2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004d54:	69fb      	ldr	r3, [r7, #28]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d10b      	bne.n	8004d72 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	881b      	ldrh	r3, [r3, #0]
 8004d5e:	461a      	mov	r2, r3
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d68:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	3302      	adds	r3, #2
 8004d6e:	61bb      	str	r3, [r7, #24]
 8004d70:	e007      	b.n	8004d82 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	781a      	ldrb	r2, [r3, #0]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	3301      	adds	r3, #1
 8004d80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	3b01      	subs	r3, #1
 8004d8a:	b29a      	uxth	r2, r3
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1cf      	bne.n	8004d3a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	9300      	str	r3, [sp, #0]
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	2200      	movs	r2, #0
 8004da2:	2140      	movs	r1, #64	; 0x40
 8004da4:	68f8      	ldr	r0, [r7, #12]
 8004da6:	f000 f9bd 	bl	8005124 <UART_WaitOnFlagUntilTimeout>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d001      	beq.n	8004db4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004db0:	2303      	movs	r3, #3
 8004db2:	e006      	b.n	8004dc2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2220      	movs	r2, #32
 8004db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	e000      	b.n	8004dc2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004dc0:	2302      	movs	r3, #2
  }
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3720      	adds	r7, #32
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}

08004dca <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dca:	b580      	push	{r7, lr}
 8004dcc:	b08a      	sub	sp, #40	; 0x28
 8004dce:	af02      	add	r7, sp, #8
 8004dd0:	60f8      	str	r0, [r7, #12]
 8004dd2:	60b9      	str	r1, [r7, #8]
 8004dd4:	603b      	str	r3, [r7, #0]
 8004dd6:	4613      	mov	r3, r2
 8004dd8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	2b20      	cmp	r3, #32
 8004de8:	f040 808c 	bne.w	8004f04 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d002      	beq.n	8004df8 <HAL_UART_Receive+0x2e>
 8004df2:	88fb      	ldrh	r3, [r7, #6]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d101      	bne.n	8004dfc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e084      	b.n	8004f06 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d101      	bne.n	8004e0a <HAL_UART_Receive+0x40>
 8004e06:	2302      	movs	r3, #2
 8004e08:	e07d      	b.n	8004f06 <HAL_UART_Receive+0x13c>
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2200      	movs	r2, #0
 8004e16:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2222      	movs	r2, #34	; 0x22
 8004e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2200      	movs	r2, #0
 8004e24:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e26:	f7fc fdcb 	bl	80019c0 <HAL_GetTick>
 8004e2a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	88fa      	ldrh	r2, [r7, #6]
 8004e30:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	88fa      	ldrh	r2, [r7, #6]
 8004e36:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e40:	d108      	bne.n	8004e54 <HAL_UART_Receive+0x8a>
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	691b      	ldr	r3, [r3, #16]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d104      	bne.n	8004e54 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	61bb      	str	r3, [r7, #24]
 8004e52:	e003      	b.n	8004e5c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004e64:	e043      	b.n	8004eee <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	9300      	str	r3, [sp, #0]
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	2120      	movs	r1, #32
 8004e70:	68f8      	ldr	r0, [r7, #12]
 8004e72:	f000 f957 	bl	8005124 <UART_WaitOnFlagUntilTimeout>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d001      	beq.n	8004e80 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e042      	b.n	8004f06 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d10c      	bne.n	8004ea0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e92:	b29a      	uxth	r2, r3
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	3302      	adds	r3, #2
 8004e9c:	61bb      	str	r3, [r7, #24]
 8004e9e:	e01f      	b.n	8004ee0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ea8:	d007      	beq.n	8004eba <HAL_UART_Receive+0xf0>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d10a      	bne.n	8004ec8 <HAL_UART_Receive+0xfe>
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d106      	bne.n	8004ec8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	b2da      	uxtb	r2, r3
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	701a      	strb	r2, [r3, #0]
 8004ec6:	e008      	b.n	8004eda <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ed4:	b2da      	uxtb	r2, r3
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	3301      	adds	r3, #1
 8004ede:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	3b01      	subs	r3, #1
 8004ee8:	b29a      	uxth	r2, r3
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d1b6      	bne.n	8004e66 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2220      	movs	r2, #32
 8004efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004f00:	2300      	movs	r3, #0
 8004f02:	e000      	b.n	8004f06 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004f04:	2302      	movs	r3, #2
  }
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3720      	adds	r7, #32
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}

08004f0e <HAL_UART_AbortTransmit>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
{
 8004f0e:	b580      	push	{r7, lr}
 8004f10:	b08e      	sub	sp, #56	; 0x38
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	330c      	adds	r3, #12
 8004f1c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f1e:	6a3b      	ldr	r3, [r7, #32]
 8004f20:	e853 3f00 	ldrex	r3, [r3]
 8004f24:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004f2c:	637b      	str	r3, [r7, #52]	; 0x34
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	330c      	adds	r3, #12
 8004f34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f38:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f3e:	e841 2300 	strex	r3, r2, [r1]
 8004f42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d1e5      	bne.n	8004f16 <HAL_UART_AbortTransmit+0x8>

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	695b      	ldr	r3, [r3, #20]
 8004f50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f54:	2b80      	cmp	r3, #128	; 0x80
 8004f56:	d136      	bne.n	8004fc6 <HAL_UART_AbortTransmit+0xb8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	3314      	adds	r3, #20
 8004f5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	e853 3f00 	ldrex	r3, [r3]
 8004f66:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f6e:	633b      	str	r3, [r7, #48]	; 0x30
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	3314      	adds	r3, #20
 8004f76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f78:	61ba      	str	r2, [r7, #24]
 8004f7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f7c:	6979      	ldr	r1, [r7, #20]
 8004f7e:	69ba      	ldr	r2, [r7, #24]
 8004f80:	e841 2300 	strex	r3, r2, [r1]
 8004f84:	613b      	str	r3, [r7, #16]
   return(result);
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d1e5      	bne.n	8004f58 <HAL_UART_AbortTransmit+0x4a>

    /* Abort the UART DMA Tx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d018      	beq.n	8004fc6 <HAL_UART_AbortTransmit+0xb8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f98:	2200      	movs	r2, #0
 8004f9a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f7fd f987 	bl	80022b4 <HAL_DMA_Abort>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d00c      	beq.n	8004fc6 <HAL_UART_AbortTransmit+0xb8>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f7fd fb9b 	bl	80026ec <HAL_DMA_GetError>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b20      	cmp	r3, #32
 8004fba:	d104      	bne.n	8004fc6 <HAL_UART_AbortTransmit+0xb8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2210      	movs	r2, #16
 8004fc0:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e007      	b.n	8004fd6 <HAL_UART_AbortTransmit+0xc8>
      }
    }
  }

  /* Reset Tx transfer counter */
  huart->TxXferCount = 0x00U;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2220      	movs	r2, #32
 8004fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3738      	adds	r7, #56	; 0x38
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}

08004fde <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8004fde:	b580      	push	{r7, lr}
 8004fe0:	b09a      	sub	sp, #104	; 0x68
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	330c      	adds	r3, #12
 8004fec:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ff0:	e853 3f00 	ldrex	r3, [r3]
 8004ff4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004ff6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ff8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ffc:	667b      	str	r3, [r7, #100]	; 0x64
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	330c      	adds	r3, #12
 8005004:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005006:	657a      	str	r2, [r7, #84]	; 0x54
 8005008:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800500a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800500c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800500e:	e841 2300 	strex	r3, r2, [r1]
 8005012:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005014:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005016:	2b00      	cmp	r3, #0
 8005018:	d1e5      	bne.n	8004fe6 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	3314      	adds	r3, #20
 8005020:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005024:	e853 3f00 	ldrex	r3, [r3]
 8005028:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800502a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800502c:	f023 0301 	bic.w	r3, r3, #1
 8005030:	663b      	str	r3, [r7, #96]	; 0x60
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	3314      	adds	r3, #20
 8005038:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800503a:	643a      	str	r2, [r7, #64]	; 0x40
 800503c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800503e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005040:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005042:	e841 2300 	strex	r3, r2, [r1]
 8005046:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800504a:	2b00      	cmp	r3, #0
 800504c:	d1e5      	bne.n	800501a <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005052:	2b01      	cmp	r3, #1
 8005054:	d119      	bne.n	800508a <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	330c      	adds	r3, #12
 800505c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800505e:	6a3b      	ldr	r3, [r7, #32]
 8005060:	e853 3f00 	ldrex	r3, [r3]
 8005064:	61fb      	str	r3, [r7, #28]
   return(result);
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	f023 0310 	bic.w	r3, r3, #16
 800506c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	330c      	adds	r3, #12
 8005074:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005076:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005078:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800507a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800507c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800507e:	e841 2300 	strex	r3, r2, [r1]
 8005082:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005086:	2b00      	cmp	r3, #0
 8005088:	d1e5      	bne.n	8005056 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	695b      	ldr	r3, [r3, #20]
 8005090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005094:	2b40      	cmp	r3, #64	; 0x40
 8005096:	d136      	bne.n	8005106 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	3314      	adds	r3, #20
 800509e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	e853 3f00 	ldrex	r3, [r3]
 80050a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	3314      	adds	r3, #20
 80050b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80050b8:	61ba      	str	r2, [r7, #24]
 80050ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050bc:	6979      	ldr	r1, [r7, #20]
 80050be:	69ba      	ldr	r2, [r7, #24]
 80050c0:	e841 2300 	strex	r3, r2, [r1]
 80050c4:	613b      	str	r3, [r7, #16]
   return(result);
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d1e5      	bne.n	8005098 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d018      	beq.n	8005106 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d8:	2200      	movs	r2, #0
 80050da:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e0:	4618      	mov	r0, r3
 80050e2:	f7fd f8e7 	bl	80022b4 <HAL_DMA_Abort>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d00c      	beq.n	8005106 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f0:	4618      	mov	r0, r3
 80050f2:	f7fd fafb 	bl	80026ec <HAL_DMA_GetError>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b20      	cmp	r3, #32
 80050fa:	d104      	bne.n	8005106 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2210      	movs	r2, #16
 8005100:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e00a      	b.n	800511c <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2220      	movs	r2, #32
 8005110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800511a:	2300      	movs	r3, #0
}
 800511c:	4618      	mov	r0, r3
 800511e:	3768      	adds	r7, #104	; 0x68
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}

08005124 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b090      	sub	sp, #64	; 0x40
 8005128:	af00      	add	r7, sp, #0
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	603b      	str	r3, [r7, #0]
 8005130:	4613      	mov	r3, r2
 8005132:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005134:	e050      	b.n	80051d8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005136:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800513c:	d04c      	beq.n	80051d8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800513e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005140:	2b00      	cmp	r3, #0
 8005142:	d007      	beq.n	8005154 <UART_WaitOnFlagUntilTimeout+0x30>
 8005144:	f7fc fc3c 	bl	80019c0 <HAL_GetTick>
 8005148:	4602      	mov	r2, r0
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005150:	429a      	cmp	r2, r3
 8005152:	d241      	bcs.n	80051d8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	330c      	adds	r3, #12
 800515a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800515c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800515e:	e853 3f00 	ldrex	r3, [r3]
 8005162:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005166:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800516a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	330c      	adds	r3, #12
 8005172:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005174:	637a      	str	r2, [r7, #52]	; 0x34
 8005176:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005178:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800517a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800517c:	e841 2300 	strex	r3, r2, [r1]
 8005180:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005184:	2b00      	cmp	r3, #0
 8005186:	d1e5      	bne.n	8005154 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	3314      	adds	r3, #20
 800518e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	e853 3f00 	ldrex	r3, [r3]
 8005196:	613b      	str	r3, [r7, #16]
   return(result);
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	f023 0301 	bic.w	r3, r3, #1
 800519e:	63bb      	str	r3, [r7, #56]	; 0x38
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	3314      	adds	r3, #20
 80051a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051a8:	623a      	str	r2, [r7, #32]
 80051aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ac:	69f9      	ldr	r1, [r7, #28]
 80051ae:	6a3a      	ldr	r2, [r7, #32]
 80051b0:	e841 2300 	strex	r3, r2, [r1]
 80051b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d1e5      	bne.n	8005188 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2220      	movs	r2, #32
 80051c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2220      	movs	r2, #32
 80051c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80051d4:	2303      	movs	r3, #3
 80051d6:	e00f      	b.n	80051f8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	4013      	ands	r3, r2
 80051e2:	68ba      	ldr	r2, [r7, #8]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	bf0c      	ite	eq
 80051e8:	2301      	moveq	r3, #1
 80051ea:	2300      	movne	r3, #0
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	461a      	mov	r2, r3
 80051f0:	79fb      	ldrb	r3, [r7, #7]
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d09f      	beq.n	8005136 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80051f6:	2300      	movs	r3, #0
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3740      	adds	r7, #64	; 0x40
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005204:	b09f      	sub	sp, #124	; 0x7c
 8005206:	af00      	add	r7, sp, #0
 8005208:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800520a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	691b      	ldr	r3, [r3, #16]
 8005210:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005214:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005216:	68d9      	ldr	r1, [r3, #12]
 8005218:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	ea40 0301 	orr.w	r3, r0, r1
 8005220:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005222:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005224:	689a      	ldr	r2, [r3, #8]
 8005226:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	431a      	orrs	r2, r3
 800522c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800522e:	695b      	ldr	r3, [r3, #20]
 8005230:	431a      	orrs	r2, r3
 8005232:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005234:	69db      	ldr	r3, [r3, #28]
 8005236:	4313      	orrs	r3, r2
 8005238:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800523a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005244:	f021 010c 	bic.w	r1, r1, #12
 8005248:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800524e:	430b      	orrs	r3, r1
 8005250:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005252:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	695b      	ldr	r3, [r3, #20]
 8005258:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800525c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800525e:	6999      	ldr	r1, [r3, #24]
 8005260:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	ea40 0301 	orr.w	r3, r0, r1
 8005268:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800526a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	4bc5      	ldr	r3, [pc, #788]	; (8005584 <UART_SetConfig+0x384>)
 8005270:	429a      	cmp	r2, r3
 8005272:	d004      	beq.n	800527e <UART_SetConfig+0x7e>
 8005274:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	4bc3      	ldr	r3, [pc, #780]	; (8005588 <UART_SetConfig+0x388>)
 800527a:	429a      	cmp	r2, r3
 800527c:	d103      	bne.n	8005286 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800527e:	f7fe f94f 	bl	8003520 <HAL_RCC_GetPCLK2Freq>
 8005282:	6778      	str	r0, [r7, #116]	; 0x74
 8005284:	e002      	b.n	800528c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005286:	f7fe f937 	bl	80034f8 <HAL_RCC_GetPCLK1Freq>
 800528a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800528c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800528e:	69db      	ldr	r3, [r3, #28]
 8005290:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005294:	f040 80b6 	bne.w	8005404 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005298:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800529a:	461c      	mov	r4, r3
 800529c:	f04f 0500 	mov.w	r5, #0
 80052a0:	4622      	mov	r2, r4
 80052a2:	462b      	mov	r3, r5
 80052a4:	1891      	adds	r1, r2, r2
 80052a6:	6439      	str	r1, [r7, #64]	; 0x40
 80052a8:	415b      	adcs	r3, r3
 80052aa:	647b      	str	r3, [r7, #68]	; 0x44
 80052ac:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80052b0:	1912      	adds	r2, r2, r4
 80052b2:	eb45 0303 	adc.w	r3, r5, r3
 80052b6:	f04f 0000 	mov.w	r0, #0
 80052ba:	f04f 0100 	mov.w	r1, #0
 80052be:	00d9      	lsls	r1, r3, #3
 80052c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80052c4:	00d0      	lsls	r0, r2, #3
 80052c6:	4602      	mov	r2, r0
 80052c8:	460b      	mov	r3, r1
 80052ca:	1911      	adds	r1, r2, r4
 80052cc:	6639      	str	r1, [r7, #96]	; 0x60
 80052ce:	416b      	adcs	r3, r5
 80052d0:	667b      	str	r3, [r7, #100]	; 0x64
 80052d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	461a      	mov	r2, r3
 80052d8:	f04f 0300 	mov.w	r3, #0
 80052dc:	1891      	adds	r1, r2, r2
 80052de:	63b9      	str	r1, [r7, #56]	; 0x38
 80052e0:	415b      	adcs	r3, r3
 80052e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80052e8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80052ec:	f7fa ffc8 	bl	8000280 <__aeabi_uldivmod>
 80052f0:	4602      	mov	r2, r0
 80052f2:	460b      	mov	r3, r1
 80052f4:	4ba5      	ldr	r3, [pc, #660]	; (800558c <UART_SetConfig+0x38c>)
 80052f6:	fba3 2302 	umull	r2, r3, r3, r2
 80052fa:	095b      	lsrs	r3, r3, #5
 80052fc:	011e      	lsls	r6, r3, #4
 80052fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005300:	461c      	mov	r4, r3
 8005302:	f04f 0500 	mov.w	r5, #0
 8005306:	4622      	mov	r2, r4
 8005308:	462b      	mov	r3, r5
 800530a:	1891      	adds	r1, r2, r2
 800530c:	6339      	str	r1, [r7, #48]	; 0x30
 800530e:	415b      	adcs	r3, r3
 8005310:	637b      	str	r3, [r7, #52]	; 0x34
 8005312:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005316:	1912      	adds	r2, r2, r4
 8005318:	eb45 0303 	adc.w	r3, r5, r3
 800531c:	f04f 0000 	mov.w	r0, #0
 8005320:	f04f 0100 	mov.w	r1, #0
 8005324:	00d9      	lsls	r1, r3, #3
 8005326:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800532a:	00d0      	lsls	r0, r2, #3
 800532c:	4602      	mov	r2, r0
 800532e:	460b      	mov	r3, r1
 8005330:	1911      	adds	r1, r2, r4
 8005332:	65b9      	str	r1, [r7, #88]	; 0x58
 8005334:	416b      	adcs	r3, r5
 8005336:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005338:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	461a      	mov	r2, r3
 800533e:	f04f 0300 	mov.w	r3, #0
 8005342:	1891      	adds	r1, r2, r2
 8005344:	62b9      	str	r1, [r7, #40]	; 0x28
 8005346:	415b      	adcs	r3, r3
 8005348:	62fb      	str	r3, [r7, #44]	; 0x2c
 800534a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800534e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005352:	f7fa ff95 	bl	8000280 <__aeabi_uldivmod>
 8005356:	4602      	mov	r2, r0
 8005358:	460b      	mov	r3, r1
 800535a:	4b8c      	ldr	r3, [pc, #560]	; (800558c <UART_SetConfig+0x38c>)
 800535c:	fba3 1302 	umull	r1, r3, r3, r2
 8005360:	095b      	lsrs	r3, r3, #5
 8005362:	2164      	movs	r1, #100	; 0x64
 8005364:	fb01 f303 	mul.w	r3, r1, r3
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	00db      	lsls	r3, r3, #3
 800536c:	3332      	adds	r3, #50	; 0x32
 800536e:	4a87      	ldr	r2, [pc, #540]	; (800558c <UART_SetConfig+0x38c>)
 8005370:	fba2 2303 	umull	r2, r3, r2, r3
 8005374:	095b      	lsrs	r3, r3, #5
 8005376:	005b      	lsls	r3, r3, #1
 8005378:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800537c:	441e      	add	r6, r3
 800537e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005380:	4618      	mov	r0, r3
 8005382:	f04f 0100 	mov.w	r1, #0
 8005386:	4602      	mov	r2, r0
 8005388:	460b      	mov	r3, r1
 800538a:	1894      	adds	r4, r2, r2
 800538c:	623c      	str	r4, [r7, #32]
 800538e:	415b      	adcs	r3, r3
 8005390:	627b      	str	r3, [r7, #36]	; 0x24
 8005392:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005396:	1812      	adds	r2, r2, r0
 8005398:	eb41 0303 	adc.w	r3, r1, r3
 800539c:	f04f 0400 	mov.w	r4, #0
 80053a0:	f04f 0500 	mov.w	r5, #0
 80053a4:	00dd      	lsls	r5, r3, #3
 80053a6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80053aa:	00d4      	lsls	r4, r2, #3
 80053ac:	4622      	mov	r2, r4
 80053ae:	462b      	mov	r3, r5
 80053b0:	1814      	adds	r4, r2, r0
 80053b2:	653c      	str	r4, [r7, #80]	; 0x50
 80053b4:	414b      	adcs	r3, r1
 80053b6:	657b      	str	r3, [r7, #84]	; 0x54
 80053b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	461a      	mov	r2, r3
 80053be:	f04f 0300 	mov.w	r3, #0
 80053c2:	1891      	adds	r1, r2, r2
 80053c4:	61b9      	str	r1, [r7, #24]
 80053c6:	415b      	adcs	r3, r3
 80053c8:	61fb      	str	r3, [r7, #28]
 80053ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053ce:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80053d2:	f7fa ff55 	bl	8000280 <__aeabi_uldivmod>
 80053d6:	4602      	mov	r2, r0
 80053d8:	460b      	mov	r3, r1
 80053da:	4b6c      	ldr	r3, [pc, #432]	; (800558c <UART_SetConfig+0x38c>)
 80053dc:	fba3 1302 	umull	r1, r3, r3, r2
 80053e0:	095b      	lsrs	r3, r3, #5
 80053e2:	2164      	movs	r1, #100	; 0x64
 80053e4:	fb01 f303 	mul.w	r3, r1, r3
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	00db      	lsls	r3, r3, #3
 80053ec:	3332      	adds	r3, #50	; 0x32
 80053ee:	4a67      	ldr	r2, [pc, #412]	; (800558c <UART_SetConfig+0x38c>)
 80053f0:	fba2 2303 	umull	r2, r3, r2, r3
 80053f4:	095b      	lsrs	r3, r3, #5
 80053f6:	f003 0207 	and.w	r2, r3, #7
 80053fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4432      	add	r2, r6
 8005400:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005402:	e0b9      	b.n	8005578 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005404:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005406:	461c      	mov	r4, r3
 8005408:	f04f 0500 	mov.w	r5, #0
 800540c:	4622      	mov	r2, r4
 800540e:	462b      	mov	r3, r5
 8005410:	1891      	adds	r1, r2, r2
 8005412:	6139      	str	r1, [r7, #16]
 8005414:	415b      	adcs	r3, r3
 8005416:	617b      	str	r3, [r7, #20]
 8005418:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800541c:	1912      	adds	r2, r2, r4
 800541e:	eb45 0303 	adc.w	r3, r5, r3
 8005422:	f04f 0000 	mov.w	r0, #0
 8005426:	f04f 0100 	mov.w	r1, #0
 800542a:	00d9      	lsls	r1, r3, #3
 800542c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005430:	00d0      	lsls	r0, r2, #3
 8005432:	4602      	mov	r2, r0
 8005434:	460b      	mov	r3, r1
 8005436:	eb12 0804 	adds.w	r8, r2, r4
 800543a:	eb43 0905 	adc.w	r9, r3, r5
 800543e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	4618      	mov	r0, r3
 8005444:	f04f 0100 	mov.w	r1, #0
 8005448:	f04f 0200 	mov.w	r2, #0
 800544c:	f04f 0300 	mov.w	r3, #0
 8005450:	008b      	lsls	r3, r1, #2
 8005452:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005456:	0082      	lsls	r2, r0, #2
 8005458:	4640      	mov	r0, r8
 800545a:	4649      	mov	r1, r9
 800545c:	f7fa ff10 	bl	8000280 <__aeabi_uldivmod>
 8005460:	4602      	mov	r2, r0
 8005462:	460b      	mov	r3, r1
 8005464:	4b49      	ldr	r3, [pc, #292]	; (800558c <UART_SetConfig+0x38c>)
 8005466:	fba3 2302 	umull	r2, r3, r3, r2
 800546a:	095b      	lsrs	r3, r3, #5
 800546c:	011e      	lsls	r6, r3, #4
 800546e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005470:	4618      	mov	r0, r3
 8005472:	f04f 0100 	mov.w	r1, #0
 8005476:	4602      	mov	r2, r0
 8005478:	460b      	mov	r3, r1
 800547a:	1894      	adds	r4, r2, r2
 800547c:	60bc      	str	r4, [r7, #8]
 800547e:	415b      	adcs	r3, r3
 8005480:	60fb      	str	r3, [r7, #12]
 8005482:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005486:	1812      	adds	r2, r2, r0
 8005488:	eb41 0303 	adc.w	r3, r1, r3
 800548c:	f04f 0400 	mov.w	r4, #0
 8005490:	f04f 0500 	mov.w	r5, #0
 8005494:	00dd      	lsls	r5, r3, #3
 8005496:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800549a:	00d4      	lsls	r4, r2, #3
 800549c:	4622      	mov	r2, r4
 800549e:	462b      	mov	r3, r5
 80054a0:	1814      	adds	r4, r2, r0
 80054a2:	64bc      	str	r4, [r7, #72]	; 0x48
 80054a4:	414b      	adcs	r3, r1
 80054a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	4618      	mov	r0, r3
 80054ae:	f04f 0100 	mov.w	r1, #0
 80054b2:	f04f 0200 	mov.w	r2, #0
 80054b6:	f04f 0300 	mov.w	r3, #0
 80054ba:	008b      	lsls	r3, r1, #2
 80054bc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80054c0:	0082      	lsls	r2, r0, #2
 80054c2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80054c6:	f7fa fedb 	bl	8000280 <__aeabi_uldivmod>
 80054ca:	4602      	mov	r2, r0
 80054cc:	460b      	mov	r3, r1
 80054ce:	4b2f      	ldr	r3, [pc, #188]	; (800558c <UART_SetConfig+0x38c>)
 80054d0:	fba3 1302 	umull	r1, r3, r3, r2
 80054d4:	095b      	lsrs	r3, r3, #5
 80054d6:	2164      	movs	r1, #100	; 0x64
 80054d8:	fb01 f303 	mul.w	r3, r1, r3
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	011b      	lsls	r3, r3, #4
 80054e0:	3332      	adds	r3, #50	; 0x32
 80054e2:	4a2a      	ldr	r2, [pc, #168]	; (800558c <UART_SetConfig+0x38c>)
 80054e4:	fba2 2303 	umull	r2, r3, r2, r3
 80054e8:	095b      	lsrs	r3, r3, #5
 80054ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054ee:	441e      	add	r6, r3
 80054f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054f2:	4618      	mov	r0, r3
 80054f4:	f04f 0100 	mov.w	r1, #0
 80054f8:	4602      	mov	r2, r0
 80054fa:	460b      	mov	r3, r1
 80054fc:	1894      	adds	r4, r2, r2
 80054fe:	603c      	str	r4, [r7, #0]
 8005500:	415b      	adcs	r3, r3
 8005502:	607b      	str	r3, [r7, #4]
 8005504:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005508:	1812      	adds	r2, r2, r0
 800550a:	eb41 0303 	adc.w	r3, r1, r3
 800550e:	f04f 0400 	mov.w	r4, #0
 8005512:	f04f 0500 	mov.w	r5, #0
 8005516:	00dd      	lsls	r5, r3, #3
 8005518:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800551c:	00d4      	lsls	r4, r2, #3
 800551e:	4622      	mov	r2, r4
 8005520:	462b      	mov	r3, r5
 8005522:	eb12 0a00 	adds.w	sl, r2, r0
 8005526:	eb43 0b01 	adc.w	fp, r3, r1
 800552a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	4618      	mov	r0, r3
 8005530:	f04f 0100 	mov.w	r1, #0
 8005534:	f04f 0200 	mov.w	r2, #0
 8005538:	f04f 0300 	mov.w	r3, #0
 800553c:	008b      	lsls	r3, r1, #2
 800553e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005542:	0082      	lsls	r2, r0, #2
 8005544:	4650      	mov	r0, sl
 8005546:	4659      	mov	r1, fp
 8005548:	f7fa fe9a 	bl	8000280 <__aeabi_uldivmod>
 800554c:	4602      	mov	r2, r0
 800554e:	460b      	mov	r3, r1
 8005550:	4b0e      	ldr	r3, [pc, #56]	; (800558c <UART_SetConfig+0x38c>)
 8005552:	fba3 1302 	umull	r1, r3, r3, r2
 8005556:	095b      	lsrs	r3, r3, #5
 8005558:	2164      	movs	r1, #100	; 0x64
 800555a:	fb01 f303 	mul.w	r3, r1, r3
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	011b      	lsls	r3, r3, #4
 8005562:	3332      	adds	r3, #50	; 0x32
 8005564:	4a09      	ldr	r2, [pc, #36]	; (800558c <UART_SetConfig+0x38c>)
 8005566:	fba2 2303 	umull	r2, r3, r2, r3
 800556a:	095b      	lsrs	r3, r3, #5
 800556c:	f003 020f 	and.w	r2, r3, #15
 8005570:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4432      	add	r2, r6
 8005576:	609a      	str	r2, [r3, #8]
}
 8005578:	bf00      	nop
 800557a:	377c      	adds	r7, #124	; 0x7c
 800557c:	46bd      	mov	sp, r7
 800557e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005582:	bf00      	nop
 8005584:	40011000 	.word	0x40011000
 8005588:	40011400 	.word	0x40011400
 800558c:	51eb851f 	.word	0x51eb851f

08005590 <__errno>:
 8005590:	4b01      	ldr	r3, [pc, #4]	; (8005598 <__errno+0x8>)
 8005592:	6818      	ldr	r0, [r3, #0]
 8005594:	4770      	bx	lr
 8005596:	bf00      	nop
 8005598:	20000170 	.word	0x20000170

0800559c <__libc_init_array>:
 800559c:	b570      	push	{r4, r5, r6, lr}
 800559e:	4d0d      	ldr	r5, [pc, #52]	; (80055d4 <__libc_init_array+0x38>)
 80055a0:	4c0d      	ldr	r4, [pc, #52]	; (80055d8 <__libc_init_array+0x3c>)
 80055a2:	1b64      	subs	r4, r4, r5
 80055a4:	10a4      	asrs	r4, r4, #2
 80055a6:	2600      	movs	r6, #0
 80055a8:	42a6      	cmp	r6, r4
 80055aa:	d109      	bne.n	80055c0 <__libc_init_array+0x24>
 80055ac:	4d0b      	ldr	r5, [pc, #44]	; (80055dc <__libc_init_array+0x40>)
 80055ae:	4c0c      	ldr	r4, [pc, #48]	; (80055e0 <__libc_init_array+0x44>)
 80055b0:	f000 fc4e 	bl	8005e50 <_init>
 80055b4:	1b64      	subs	r4, r4, r5
 80055b6:	10a4      	asrs	r4, r4, #2
 80055b8:	2600      	movs	r6, #0
 80055ba:	42a6      	cmp	r6, r4
 80055bc:	d105      	bne.n	80055ca <__libc_init_array+0x2e>
 80055be:	bd70      	pop	{r4, r5, r6, pc}
 80055c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80055c4:	4798      	blx	r3
 80055c6:	3601      	adds	r6, #1
 80055c8:	e7ee      	b.n	80055a8 <__libc_init_array+0xc>
 80055ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80055ce:	4798      	blx	r3
 80055d0:	3601      	adds	r6, #1
 80055d2:	e7f2      	b.n	80055ba <__libc_init_array+0x1e>
 80055d4:	08005f00 	.word	0x08005f00
 80055d8:	08005f00 	.word	0x08005f00
 80055dc:	08005f00 	.word	0x08005f00
 80055e0:	08005f04 	.word	0x08005f04

080055e4 <memset>:
 80055e4:	4402      	add	r2, r0
 80055e6:	4603      	mov	r3, r0
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d100      	bne.n	80055ee <memset+0xa>
 80055ec:	4770      	bx	lr
 80055ee:	f803 1b01 	strb.w	r1, [r3], #1
 80055f2:	e7f9      	b.n	80055e8 <memset+0x4>

080055f4 <siprintf>:
 80055f4:	b40e      	push	{r1, r2, r3}
 80055f6:	b500      	push	{lr}
 80055f8:	b09c      	sub	sp, #112	; 0x70
 80055fa:	ab1d      	add	r3, sp, #116	; 0x74
 80055fc:	9002      	str	r0, [sp, #8]
 80055fe:	9006      	str	r0, [sp, #24]
 8005600:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005604:	4809      	ldr	r0, [pc, #36]	; (800562c <siprintf+0x38>)
 8005606:	9107      	str	r1, [sp, #28]
 8005608:	9104      	str	r1, [sp, #16]
 800560a:	4909      	ldr	r1, [pc, #36]	; (8005630 <siprintf+0x3c>)
 800560c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005610:	9105      	str	r1, [sp, #20]
 8005612:	6800      	ldr	r0, [r0, #0]
 8005614:	9301      	str	r3, [sp, #4]
 8005616:	a902      	add	r1, sp, #8
 8005618:	f000 f868 	bl	80056ec <_svfiprintf_r>
 800561c:	9b02      	ldr	r3, [sp, #8]
 800561e:	2200      	movs	r2, #0
 8005620:	701a      	strb	r2, [r3, #0]
 8005622:	b01c      	add	sp, #112	; 0x70
 8005624:	f85d eb04 	ldr.w	lr, [sp], #4
 8005628:	b003      	add	sp, #12
 800562a:	4770      	bx	lr
 800562c:	20000170 	.word	0x20000170
 8005630:	ffff0208 	.word	0xffff0208

08005634 <__ssputs_r>:
 8005634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005638:	688e      	ldr	r6, [r1, #8]
 800563a:	429e      	cmp	r6, r3
 800563c:	4682      	mov	sl, r0
 800563e:	460c      	mov	r4, r1
 8005640:	4690      	mov	r8, r2
 8005642:	461f      	mov	r7, r3
 8005644:	d838      	bhi.n	80056b8 <__ssputs_r+0x84>
 8005646:	898a      	ldrh	r2, [r1, #12]
 8005648:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800564c:	d032      	beq.n	80056b4 <__ssputs_r+0x80>
 800564e:	6825      	ldr	r5, [r4, #0]
 8005650:	6909      	ldr	r1, [r1, #16]
 8005652:	eba5 0901 	sub.w	r9, r5, r1
 8005656:	6965      	ldr	r5, [r4, #20]
 8005658:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800565c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005660:	3301      	adds	r3, #1
 8005662:	444b      	add	r3, r9
 8005664:	106d      	asrs	r5, r5, #1
 8005666:	429d      	cmp	r5, r3
 8005668:	bf38      	it	cc
 800566a:	461d      	movcc	r5, r3
 800566c:	0553      	lsls	r3, r2, #21
 800566e:	d531      	bpl.n	80056d4 <__ssputs_r+0xa0>
 8005670:	4629      	mov	r1, r5
 8005672:	f000 fb47 	bl	8005d04 <_malloc_r>
 8005676:	4606      	mov	r6, r0
 8005678:	b950      	cbnz	r0, 8005690 <__ssputs_r+0x5c>
 800567a:	230c      	movs	r3, #12
 800567c:	f8ca 3000 	str.w	r3, [sl]
 8005680:	89a3      	ldrh	r3, [r4, #12]
 8005682:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005686:	81a3      	strh	r3, [r4, #12]
 8005688:	f04f 30ff 	mov.w	r0, #4294967295
 800568c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005690:	6921      	ldr	r1, [r4, #16]
 8005692:	464a      	mov	r2, r9
 8005694:	f000 fabe 	bl	8005c14 <memcpy>
 8005698:	89a3      	ldrh	r3, [r4, #12]
 800569a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800569e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056a2:	81a3      	strh	r3, [r4, #12]
 80056a4:	6126      	str	r6, [r4, #16]
 80056a6:	6165      	str	r5, [r4, #20]
 80056a8:	444e      	add	r6, r9
 80056aa:	eba5 0509 	sub.w	r5, r5, r9
 80056ae:	6026      	str	r6, [r4, #0]
 80056b0:	60a5      	str	r5, [r4, #8]
 80056b2:	463e      	mov	r6, r7
 80056b4:	42be      	cmp	r6, r7
 80056b6:	d900      	bls.n	80056ba <__ssputs_r+0x86>
 80056b8:	463e      	mov	r6, r7
 80056ba:	4632      	mov	r2, r6
 80056bc:	6820      	ldr	r0, [r4, #0]
 80056be:	4641      	mov	r1, r8
 80056c0:	f000 fab6 	bl	8005c30 <memmove>
 80056c4:	68a3      	ldr	r3, [r4, #8]
 80056c6:	6822      	ldr	r2, [r4, #0]
 80056c8:	1b9b      	subs	r3, r3, r6
 80056ca:	4432      	add	r2, r6
 80056cc:	60a3      	str	r3, [r4, #8]
 80056ce:	6022      	str	r2, [r4, #0]
 80056d0:	2000      	movs	r0, #0
 80056d2:	e7db      	b.n	800568c <__ssputs_r+0x58>
 80056d4:	462a      	mov	r2, r5
 80056d6:	f000 fb6f 	bl	8005db8 <_realloc_r>
 80056da:	4606      	mov	r6, r0
 80056dc:	2800      	cmp	r0, #0
 80056de:	d1e1      	bne.n	80056a4 <__ssputs_r+0x70>
 80056e0:	6921      	ldr	r1, [r4, #16]
 80056e2:	4650      	mov	r0, sl
 80056e4:	f000 fabe 	bl	8005c64 <_free_r>
 80056e8:	e7c7      	b.n	800567a <__ssputs_r+0x46>
	...

080056ec <_svfiprintf_r>:
 80056ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056f0:	4698      	mov	r8, r3
 80056f2:	898b      	ldrh	r3, [r1, #12]
 80056f4:	061b      	lsls	r3, r3, #24
 80056f6:	b09d      	sub	sp, #116	; 0x74
 80056f8:	4607      	mov	r7, r0
 80056fa:	460d      	mov	r5, r1
 80056fc:	4614      	mov	r4, r2
 80056fe:	d50e      	bpl.n	800571e <_svfiprintf_r+0x32>
 8005700:	690b      	ldr	r3, [r1, #16]
 8005702:	b963      	cbnz	r3, 800571e <_svfiprintf_r+0x32>
 8005704:	2140      	movs	r1, #64	; 0x40
 8005706:	f000 fafd 	bl	8005d04 <_malloc_r>
 800570a:	6028      	str	r0, [r5, #0]
 800570c:	6128      	str	r0, [r5, #16]
 800570e:	b920      	cbnz	r0, 800571a <_svfiprintf_r+0x2e>
 8005710:	230c      	movs	r3, #12
 8005712:	603b      	str	r3, [r7, #0]
 8005714:	f04f 30ff 	mov.w	r0, #4294967295
 8005718:	e0d1      	b.n	80058be <_svfiprintf_r+0x1d2>
 800571a:	2340      	movs	r3, #64	; 0x40
 800571c:	616b      	str	r3, [r5, #20]
 800571e:	2300      	movs	r3, #0
 8005720:	9309      	str	r3, [sp, #36]	; 0x24
 8005722:	2320      	movs	r3, #32
 8005724:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005728:	f8cd 800c 	str.w	r8, [sp, #12]
 800572c:	2330      	movs	r3, #48	; 0x30
 800572e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80058d8 <_svfiprintf_r+0x1ec>
 8005732:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005736:	f04f 0901 	mov.w	r9, #1
 800573a:	4623      	mov	r3, r4
 800573c:	469a      	mov	sl, r3
 800573e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005742:	b10a      	cbz	r2, 8005748 <_svfiprintf_r+0x5c>
 8005744:	2a25      	cmp	r2, #37	; 0x25
 8005746:	d1f9      	bne.n	800573c <_svfiprintf_r+0x50>
 8005748:	ebba 0b04 	subs.w	fp, sl, r4
 800574c:	d00b      	beq.n	8005766 <_svfiprintf_r+0x7a>
 800574e:	465b      	mov	r3, fp
 8005750:	4622      	mov	r2, r4
 8005752:	4629      	mov	r1, r5
 8005754:	4638      	mov	r0, r7
 8005756:	f7ff ff6d 	bl	8005634 <__ssputs_r>
 800575a:	3001      	adds	r0, #1
 800575c:	f000 80aa 	beq.w	80058b4 <_svfiprintf_r+0x1c8>
 8005760:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005762:	445a      	add	r2, fp
 8005764:	9209      	str	r2, [sp, #36]	; 0x24
 8005766:	f89a 3000 	ldrb.w	r3, [sl]
 800576a:	2b00      	cmp	r3, #0
 800576c:	f000 80a2 	beq.w	80058b4 <_svfiprintf_r+0x1c8>
 8005770:	2300      	movs	r3, #0
 8005772:	f04f 32ff 	mov.w	r2, #4294967295
 8005776:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800577a:	f10a 0a01 	add.w	sl, sl, #1
 800577e:	9304      	str	r3, [sp, #16]
 8005780:	9307      	str	r3, [sp, #28]
 8005782:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005786:	931a      	str	r3, [sp, #104]	; 0x68
 8005788:	4654      	mov	r4, sl
 800578a:	2205      	movs	r2, #5
 800578c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005790:	4851      	ldr	r0, [pc, #324]	; (80058d8 <_svfiprintf_r+0x1ec>)
 8005792:	f7fa fd25 	bl	80001e0 <memchr>
 8005796:	9a04      	ldr	r2, [sp, #16]
 8005798:	b9d8      	cbnz	r0, 80057d2 <_svfiprintf_r+0xe6>
 800579a:	06d0      	lsls	r0, r2, #27
 800579c:	bf44      	itt	mi
 800579e:	2320      	movmi	r3, #32
 80057a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057a4:	0711      	lsls	r1, r2, #28
 80057a6:	bf44      	itt	mi
 80057a8:	232b      	movmi	r3, #43	; 0x2b
 80057aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057ae:	f89a 3000 	ldrb.w	r3, [sl]
 80057b2:	2b2a      	cmp	r3, #42	; 0x2a
 80057b4:	d015      	beq.n	80057e2 <_svfiprintf_r+0xf6>
 80057b6:	9a07      	ldr	r2, [sp, #28]
 80057b8:	4654      	mov	r4, sl
 80057ba:	2000      	movs	r0, #0
 80057bc:	f04f 0c0a 	mov.w	ip, #10
 80057c0:	4621      	mov	r1, r4
 80057c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80057c6:	3b30      	subs	r3, #48	; 0x30
 80057c8:	2b09      	cmp	r3, #9
 80057ca:	d94e      	bls.n	800586a <_svfiprintf_r+0x17e>
 80057cc:	b1b0      	cbz	r0, 80057fc <_svfiprintf_r+0x110>
 80057ce:	9207      	str	r2, [sp, #28]
 80057d0:	e014      	b.n	80057fc <_svfiprintf_r+0x110>
 80057d2:	eba0 0308 	sub.w	r3, r0, r8
 80057d6:	fa09 f303 	lsl.w	r3, r9, r3
 80057da:	4313      	orrs	r3, r2
 80057dc:	9304      	str	r3, [sp, #16]
 80057de:	46a2      	mov	sl, r4
 80057e0:	e7d2      	b.n	8005788 <_svfiprintf_r+0x9c>
 80057e2:	9b03      	ldr	r3, [sp, #12]
 80057e4:	1d19      	adds	r1, r3, #4
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	9103      	str	r1, [sp, #12]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	bfbb      	ittet	lt
 80057ee:	425b      	neglt	r3, r3
 80057f0:	f042 0202 	orrlt.w	r2, r2, #2
 80057f4:	9307      	strge	r3, [sp, #28]
 80057f6:	9307      	strlt	r3, [sp, #28]
 80057f8:	bfb8      	it	lt
 80057fa:	9204      	strlt	r2, [sp, #16]
 80057fc:	7823      	ldrb	r3, [r4, #0]
 80057fe:	2b2e      	cmp	r3, #46	; 0x2e
 8005800:	d10c      	bne.n	800581c <_svfiprintf_r+0x130>
 8005802:	7863      	ldrb	r3, [r4, #1]
 8005804:	2b2a      	cmp	r3, #42	; 0x2a
 8005806:	d135      	bne.n	8005874 <_svfiprintf_r+0x188>
 8005808:	9b03      	ldr	r3, [sp, #12]
 800580a:	1d1a      	adds	r2, r3, #4
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	9203      	str	r2, [sp, #12]
 8005810:	2b00      	cmp	r3, #0
 8005812:	bfb8      	it	lt
 8005814:	f04f 33ff 	movlt.w	r3, #4294967295
 8005818:	3402      	adds	r4, #2
 800581a:	9305      	str	r3, [sp, #20]
 800581c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80058e8 <_svfiprintf_r+0x1fc>
 8005820:	7821      	ldrb	r1, [r4, #0]
 8005822:	2203      	movs	r2, #3
 8005824:	4650      	mov	r0, sl
 8005826:	f7fa fcdb 	bl	80001e0 <memchr>
 800582a:	b140      	cbz	r0, 800583e <_svfiprintf_r+0x152>
 800582c:	2340      	movs	r3, #64	; 0x40
 800582e:	eba0 000a 	sub.w	r0, r0, sl
 8005832:	fa03 f000 	lsl.w	r0, r3, r0
 8005836:	9b04      	ldr	r3, [sp, #16]
 8005838:	4303      	orrs	r3, r0
 800583a:	3401      	adds	r4, #1
 800583c:	9304      	str	r3, [sp, #16]
 800583e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005842:	4826      	ldr	r0, [pc, #152]	; (80058dc <_svfiprintf_r+0x1f0>)
 8005844:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005848:	2206      	movs	r2, #6
 800584a:	f7fa fcc9 	bl	80001e0 <memchr>
 800584e:	2800      	cmp	r0, #0
 8005850:	d038      	beq.n	80058c4 <_svfiprintf_r+0x1d8>
 8005852:	4b23      	ldr	r3, [pc, #140]	; (80058e0 <_svfiprintf_r+0x1f4>)
 8005854:	bb1b      	cbnz	r3, 800589e <_svfiprintf_r+0x1b2>
 8005856:	9b03      	ldr	r3, [sp, #12]
 8005858:	3307      	adds	r3, #7
 800585a:	f023 0307 	bic.w	r3, r3, #7
 800585e:	3308      	adds	r3, #8
 8005860:	9303      	str	r3, [sp, #12]
 8005862:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005864:	4433      	add	r3, r6
 8005866:	9309      	str	r3, [sp, #36]	; 0x24
 8005868:	e767      	b.n	800573a <_svfiprintf_r+0x4e>
 800586a:	fb0c 3202 	mla	r2, ip, r2, r3
 800586e:	460c      	mov	r4, r1
 8005870:	2001      	movs	r0, #1
 8005872:	e7a5      	b.n	80057c0 <_svfiprintf_r+0xd4>
 8005874:	2300      	movs	r3, #0
 8005876:	3401      	adds	r4, #1
 8005878:	9305      	str	r3, [sp, #20]
 800587a:	4619      	mov	r1, r3
 800587c:	f04f 0c0a 	mov.w	ip, #10
 8005880:	4620      	mov	r0, r4
 8005882:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005886:	3a30      	subs	r2, #48	; 0x30
 8005888:	2a09      	cmp	r2, #9
 800588a:	d903      	bls.n	8005894 <_svfiprintf_r+0x1a8>
 800588c:	2b00      	cmp	r3, #0
 800588e:	d0c5      	beq.n	800581c <_svfiprintf_r+0x130>
 8005890:	9105      	str	r1, [sp, #20]
 8005892:	e7c3      	b.n	800581c <_svfiprintf_r+0x130>
 8005894:	fb0c 2101 	mla	r1, ip, r1, r2
 8005898:	4604      	mov	r4, r0
 800589a:	2301      	movs	r3, #1
 800589c:	e7f0      	b.n	8005880 <_svfiprintf_r+0x194>
 800589e:	ab03      	add	r3, sp, #12
 80058a0:	9300      	str	r3, [sp, #0]
 80058a2:	462a      	mov	r2, r5
 80058a4:	4b0f      	ldr	r3, [pc, #60]	; (80058e4 <_svfiprintf_r+0x1f8>)
 80058a6:	a904      	add	r1, sp, #16
 80058a8:	4638      	mov	r0, r7
 80058aa:	f3af 8000 	nop.w
 80058ae:	1c42      	adds	r2, r0, #1
 80058b0:	4606      	mov	r6, r0
 80058b2:	d1d6      	bne.n	8005862 <_svfiprintf_r+0x176>
 80058b4:	89ab      	ldrh	r3, [r5, #12]
 80058b6:	065b      	lsls	r3, r3, #25
 80058b8:	f53f af2c 	bmi.w	8005714 <_svfiprintf_r+0x28>
 80058bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80058be:	b01d      	add	sp, #116	; 0x74
 80058c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058c4:	ab03      	add	r3, sp, #12
 80058c6:	9300      	str	r3, [sp, #0]
 80058c8:	462a      	mov	r2, r5
 80058ca:	4b06      	ldr	r3, [pc, #24]	; (80058e4 <_svfiprintf_r+0x1f8>)
 80058cc:	a904      	add	r1, sp, #16
 80058ce:	4638      	mov	r0, r7
 80058d0:	f000 f87a 	bl	80059c8 <_printf_i>
 80058d4:	e7eb      	b.n	80058ae <_svfiprintf_r+0x1c2>
 80058d6:	bf00      	nop
 80058d8:	08005ec4 	.word	0x08005ec4
 80058dc:	08005ece 	.word	0x08005ece
 80058e0:	00000000 	.word	0x00000000
 80058e4:	08005635 	.word	0x08005635
 80058e8:	08005eca 	.word	0x08005eca

080058ec <_printf_common>:
 80058ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058f0:	4616      	mov	r6, r2
 80058f2:	4699      	mov	r9, r3
 80058f4:	688a      	ldr	r2, [r1, #8]
 80058f6:	690b      	ldr	r3, [r1, #16]
 80058f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80058fc:	4293      	cmp	r3, r2
 80058fe:	bfb8      	it	lt
 8005900:	4613      	movlt	r3, r2
 8005902:	6033      	str	r3, [r6, #0]
 8005904:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005908:	4607      	mov	r7, r0
 800590a:	460c      	mov	r4, r1
 800590c:	b10a      	cbz	r2, 8005912 <_printf_common+0x26>
 800590e:	3301      	adds	r3, #1
 8005910:	6033      	str	r3, [r6, #0]
 8005912:	6823      	ldr	r3, [r4, #0]
 8005914:	0699      	lsls	r1, r3, #26
 8005916:	bf42      	ittt	mi
 8005918:	6833      	ldrmi	r3, [r6, #0]
 800591a:	3302      	addmi	r3, #2
 800591c:	6033      	strmi	r3, [r6, #0]
 800591e:	6825      	ldr	r5, [r4, #0]
 8005920:	f015 0506 	ands.w	r5, r5, #6
 8005924:	d106      	bne.n	8005934 <_printf_common+0x48>
 8005926:	f104 0a19 	add.w	sl, r4, #25
 800592a:	68e3      	ldr	r3, [r4, #12]
 800592c:	6832      	ldr	r2, [r6, #0]
 800592e:	1a9b      	subs	r3, r3, r2
 8005930:	42ab      	cmp	r3, r5
 8005932:	dc26      	bgt.n	8005982 <_printf_common+0x96>
 8005934:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005938:	1e13      	subs	r3, r2, #0
 800593a:	6822      	ldr	r2, [r4, #0]
 800593c:	bf18      	it	ne
 800593e:	2301      	movne	r3, #1
 8005940:	0692      	lsls	r2, r2, #26
 8005942:	d42b      	bmi.n	800599c <_printf_common+0xb0>
 8005944:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005948:	4649      	mov	r1, r9
 800594a:	4638      	mov	r0, r7
 800594c:	47c0      	blx	r8
 800594e:	3001      	adds	r0, #1
 8005950:	d01e      	beq.n	8005990 <_printf_common+0xa4>
 8005952:	6823      	ldr	r3, [r4, #0]
 8005954:	68e5      	ldr	r5, [r4, #12]
 8005956:	6832      	ldr	r2, [r6, #0]
 8005958:	f003 0306 	and.w	r3, r3, #6
 800595c:	2b04      	cmp	r3, #4
 800595e:	bf08      	it	eq
 8005960:	1aad      	subeq	r5, r5, r2
 8005962:	68a3      	ldr	r3, [r4, #8]
 8005964:	6922      	ldr	r2, [r4, #16]
 8005966:	bf0c      	ite	eq
 8005968:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800596c:	2500      	movne	r5, #0
 800596e:	4293      	cmp	r3, r2
 8005970:	bfc4      	itt	gt
 8005972:	1a9b      	subgt	r3, r3, r2
 8005974:	18ed      	addgt	r5, r5, r3
 8005976:	2600      	movs	r6, #0
 8005978:	341a      	adds	r4, #26
 800597a:	42b5      	cmp	r5, r6
 800597c:	d11a      	bne.n	80059b4 <_printf_common+0xc8>
 800597e:	2000      	movs	r0, #0
 8005980:	e008      	b.n	8005994 <_printf_common+0xa8>
 8005982:	2301      	movs	r3, #1
 8005984:	4652      	mov	r2, sl
 8005986:	4649      	mov	r1, r9
 8005988:	4638      	mov	r0, r7
 800598a:	47c0      	blx	r8
 800598c:	3001      	adds	r0, #1
 800598e:	d103      	bne.n	8005998 <_printf_common+0xac>
 8005990:	f04f 30ff 	mov.w	r0, #4294967295
 8005994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005998:	3501      	adds	r5, #1
 800599a:	e7c6      	b.n	800592a <_printf_common+0x3e>
 800599c:	18e1      	adds	r1, r4, r3
 800599e:	1c5a      	adds	r2, r3, #1
 80059a0:	2030      	movs	r0, #48	; 0x30
 80059a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80059a6:	4422      	add	r2, r4
 80059a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80059ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80059b0:	3302      	adds	r3, #2
 80059b2:	e7c7      	b.n	8005944 <_printf_common+0x58>
 80059b4:	2301      	movs	r3, #1
 80059b6:	4622      	mov	r2, r4
 80059b8:	4649      	mov	r1, r9
 80059ba:	4638      	mov	r0, r7
 80059bc:	47c0      	blx	r8
 80059be:	3001      	adds	r0, #1
 80059c0:	d0e6      	beq.n	8005990 <_printf_common+0xa4>
 80059c2:	3601      	adds	r6, #1
 80059c4:	e7d9      	b.n	800597a <_printf_common+0x8e>
	...

080059c8 <_printf_i>:
 80059c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059cc:	460c      	mov	r4, r1
 80059ce:	4691      	mov	r9, r2
 80059d0:	7e27      	ldrb	r7, [r4, #24]
 80059d2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80059d4:	2f78      	cmp	r7, #120	; 0x78
 80059d6:	4680      	mov	r8, r0
 80059d8:	469a      	mov	sl, r3
 80059da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80059de:	d807      	bhi.n	80059f0 <_printf_i+0x28>
 80059e0:	2f62      	cmp	r7, #98	; 0x62
 80059e2:	d80a      	bhi.n	80059fa <_printf_i+0x32>
 80059e4:	2f00      	cmp	r7, #0
 80059e6:	f000 80d8 	beq.w	8005b9a <_printf_i+0x1d2>
 80059ea:	2f58      	cmp	r7, #88	; 0x58
 80059ec:	f000 80a3 	beq.w	8005b36 <_printf_i+0x16e>
 80059f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80059f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80059f8:	e03a      	b.n	8005a70 <_printf_i+0xa8>
 80059fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80059fe:	2b15      	cmp	r3, #21
 8005a00:	d8f6      	bhi.n	80059f0 <_printf_i+0x28>
 8005a02:	a001      	add	r0, pc, #4	; (adr r0, 8005a08 <_printf_i+0x40>)
 8005a04:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005a08:	08005a61 	.word	0x08005a61
 8005a0c:	08005a75 	.word	0x08005a75
 8005a10:	080059f1 	.word	0x080059f1
 8005a14:	080059f1 	.word	0x080059f1
 8005a18:	080059f1 	.word	0x080059f1
 8005a1c:	080059f1 	.word	0x080059f1
 8005a20:	08005a75 	.word	0x08005a75
 8005a24:	080059f1 	.word	0x080059f1
 8005a28:	080059f1 	.word	0x080059f1
 8005a2c:	080059f1 	.word	0x080059f1
 8005a30:	080059f1 	.word	0x080059f1
 8005a34:	08005b81 	.word	0x08005b81
 8005a38:	08005aa5 	.word	0x08005aa5
 8005a3c:	08005b63 	.word	0x08005b63
 8005a40:	080059f1 	.word	0x080059f1
 8005a44:	080059f1 	.word	0x080059f1
 8005a48:	08005ba3 	.word	0x08005ba3
 8005a4c:	080059f1 	.word	0x080059f1
 8005a50:	08005aa5 	.word	0x08005aa5
 8005a54:	080059f1 	.word	0x080059f1
 8005a58:	080059f1 	.word	0x080059f1
 8005a5c:	08005b6b 	.word	0x08005b6b
 8005a60:	680b      	ldr	r3, [r1, #0]
 8005a62:	1d1a      	adds	r2, r3, #4
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	600a      	str	r2, [r1, #0]
 8005a68:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005a6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a70:	2301      	movs	r3, #1
 8005a72:	e0a3      	b.n	8005bbc <_printf_i+0x1f4>
 8005a74:	6825      	ldr	r5, [r4, #0]
 8005a76:	6808      	ldr	r0, [r1, #0]
 8005a78:	062e      	lsls	r6, r5, #24
 8005a7a:	f100 0304 	add.w	r3, r0, #4
 8005a7e:	d50a      	bpl.n	8005a96 <_printf_i+0xce>
 8005a80:	6805      	ldr	r5, [r0, #0]
 8005a82:	600b      	str	r3, [r1, #0]
 8005a84:	2d00      	cmp	r5, #0
 8005a86:	da03      	bge.n	8005a90 <_printf_i+0xc8>
 8005a88:	232d      	movs	r3, #45	; 0x2d
 8005a8a:	426d      	negs	r5, r5
 8005a8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a90:	485e      	ldr	r0, [pc, #376]	; (8005c0c <_printf_i+0x244>)
 8005a92:	230a      	movs	r3, #10
 8005a94:	e019      	b.n	8005aca <_printf_i+0x102>
 8005a96:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005a9a:	6805      	ldr	r5, [r0, #0]
 8005a9c:	600b      	str	r3, [r1, #0]
 8005a9e:	bf18      	it	ne
 8005aa0:	b22d      	sxthne	r5, r5
 8005aa2:	e7ef      	b.n	8005a84 <_printf_i+0xbc>
 8005aa4:	680b      	ldr	r3, [r1, #0]
 8005aa6:	6825      	ldr	r5, [r4, #0]
 8005aa8:	1d18      	adds	r0, r3, #4
 8005aaa:	6008      	str	r0, [r1, #0]
 8005aac:	0628      	lsls	r0, r5, #24
 8005aae:	d501      	bpl.n	8005ab4 <_printf_i+0xec>
 8005ab0:	681d      	ldr	r5, [r3, #0]
 8005ab2:	e002      	b.n	8005aba <_printf_i+0xf2>
 8005ab4:	0669      	lsls	r1, r5, #25
 8005ab6:	d5fb      	bpl.n	8005ab0 <_printf_i+0xe8>
 8005ab8:	881d      	ldrh	r5, [r3, #0]
 8005aba:	4854      	ldr	r0, [pc, #336]	; (8005c0c <_printf_i+0x244>)
 8005abc:	2f6f      	cmp	r7, #111	; 0x6f
 8005abe:	bf0c      	ite	eq
 8005ac0:	2308      	moveq	r3, #8
 8005ac2:	230a      	movne	r3, #10
 8005ac4:	2100      	movs	r1, #0
 8005ac6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005aca:	6866      	ldr	r6, [r4, #4]
 8005acc:	60a6      	str	r6, [r4, #8]
 8005ace:	2e00      	cmp	r6, #0
 8005ad0:	bfa2      	ittt	ge
 8005ad2:	6821      	ldrge	r1, [r4, #0]
 8005ad4:	f021 0104 	bicge.w	r1, r1, #4
 8005ad8:	6021      	strge	r1, [r4, #0]
 8005ada:	b90d      	cbnz	r5, 8005ae0 <_printf_i+0x118>
 8005adc:	2e00      	cmp	r6, #0
 8005ade:	d04d      	beq.n	8005b7c <_printf_i+0x1b4>
 8005ae0:	4616      	mov	r6, r2
 8005ae2:	fbb5 f1f3 	udiv	r1, r5, r3
 8005ae6:	fb03 5711 	mls	r7, r3, r1, r5
 8005aea:	5dc7      	ldrb	r7, [r0, r7]
 8005aec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005af0:	462f      	mov	r7, r5
 8005af2:	42bb      	cmp	r3, r7
 8005af4:	460d      	mov	r5, r1
 8005af6:	d9f4      	bls.n	8005ae2 <_printf_i+0x11a>
 8005af8:	2b08      	cmp	r3, #8
 8005afa:	d10b      	bne.n	8005b14 <_printf_i+0x14c>
 8005afc:	6823      	ldr	r3, [r4, #0]
 8005afe:	07df      	lsls	r7, r3, #31
 8005b00:	d508      	bpl.n	8005b14 <_printf_i+0x14c>
 8005b02:	6923      	ldr	r3, [r4, #16]
 8005b04:	6861      	ldr	r1, [r4, #4]
 8005b06:	4299      	cmp	r1, r3
 8005b08:	bfde      	ittt	le
 8005b0a:	2330      	movle	r3, #48	; 0x30
 8005b0c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005b10:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005b14:	1b92      	subs	r2, r2, r6
 8005b16:	6122      	str	r2, [r4, #16]
 8005b18:	f8cd a000 	str.w	sl, [sp]
 8005b1c:	464b      	mov	r3, r9
 8005b1e:	aa03      	add	r2, sp, #12
 8005b20:	4621      	mov	r1, r4
 8005b22:	4640      	mov	r0, r8
 8005b24:	f7ff fee2 	bl	80058ec <_printf_common>
 8005b28:	3001      	adds	r0, #1
 8005b2a:	d14c      	bne.n	8005bc6 <_printf_i+0x1fe>
 8005b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b30:	b004      	add	sp, #16
 8005b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b36:	4835      	ldr	r0, [pc, #212]	; (8005c0c <_printf_i+0x244>)
 8005b38:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005b3c:	6823      	ldr	r3, [r4, #0]
 8005b3e:	680e      	ldr	r6, [r1, #0]
 8005b40:	061f      	lsls	r7, r3, #24
 8005b42:	f856 5b04 	ldr.w	r5, [r6], #4
 8005b46:	600e      	str	r6, [r1, #0]
 8005b48:	d514      	bpl.n	8005b74 <_printf_i+0x1ac>
 8005b4a:	07d9      	lsls	r1, r3, #31
 8005b4c:	bf44      	itt	mi
 8005b4e:	f043 0320 	orrmi.w	r3, r3, #32
 8005b52:	6023      	strmi	r3, [r4, #0]
 8005b54:	b91d      	cbnz	r5, 8005b5e <_printf_i+0x196>
 8005b56:	6823      	ldr	r3, [r4, #0]
 8005b58:	f023 0320 	bic.w	r3, r3, #32
 8005b5c:	6023      	str	r3, [r4, #0]
 8005b5e:	2310      	movs	r3, #16
 8005b60:	e7b0      	b.n	8005ac4 <_printf_i+0xfc>
 8005b62:	6823      	ldr	r3, [r4, #0]
 8005b64:	f043 0320 	orr.w	r3, r3, #32
 8005b68:	6023      	str	r3, [r4, #0]
 8005b6a:	2378      	movs	r3, #120	; 0x78
 8005b6c:	4828      	ldr	r0, [pc, #160]	; (8005c10 <_printf_i+0x248>)
 8005b6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005b72:	e7e3      	b.n	8005b3c <_printf_i+0x174>
 8005b74:	065e      	lsls	r6, r3, #25
 8005b76:	bf48      	it	mi
 8005b78:	b2ad      	uxthmi	r5, r5
 8005b7a:	e7e6      	b.n	8005b4a <_printf_i+0x182>
 8005b7c:	4616      	mov	r6, r2
 8005b7e:	e7bb      	b.n	8005af8 <_printf_i+0x130>
 8005b80:	680b      	ldr	r3, [r1, #0]
 8005b82:	6826      	ldr	r6, [r4, #0]
 8005b84:	6960      	ldr	r0, [r4, #20]
 8005b86:	1d1d      	adds	r5, r3, #4
 8005b88:	600d      	str	r5, [r1, #0]
 8005b8a:	0635      	lsls	r5, r6, #24
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	d501      	bpl.n	8005b94 <_printf_i+0x1cc>
 8005b90:	6018      	str	r0, [r3, #0]
 8005b92:	e002      	b.n	8005b9a <_printf_i+0x1d2>
 8005b94:	0671      	lsls	r1, r6, #25
 8005b96:	d5fb      	bpl.n	8005b90 <_printf_i+0x1c8>
 8005b98:	8018      	strh	r0, [r3, #0]
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	6123      	str	r3, [r4, #16]
 8005b9e:	4616      	mov	r6, r2
 8005ba0:	e7ba      	b.n	8005b18 <_printf_i+0x150>
 8005ba2:	680b      	ldr	r3, [r1, #0]
 8005ba4:	1d1a      	adds	r2, r3, #4
 8005ba6:	600a      	str	r2, [r1, #0]
 8005ba8:	681e      	ldr	r6, [r3, #0]
 8005baa:	6862      	ldr	r2, [r4, #4]
 8005bac:	2100      	movs	r1, #0
 8005bae:	4630      	mov	r0, r6
 8005bb0:	f7fa fb16 	bl	80001e0 <memchr>
 8005bb4:	b108      	cbz	r0, 8005bba <_printf_i+0x1f2>
 8005bb6:	1b80      	subs	r0, r0, r6
 8005bb8:	6060      	str	r0, [r4, #4]
 8005bba:	6863      	ldr	r3, [r4, #4]
 8005bbc:	6123      	str	r3, [r4, #16]
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bc4:	e7a8      	b.n	8005b18 <_printf_i+0x150>
 8005bc6:	6923      	ldr	r3, [r4, #16]
 8005bc8:	4632      	mov	r2, r6
 8005bca:	4649      	mov	r1, r9
 8005bcc:	4640      	mov	r0, r8
 8005bce:	47d0      	blx	sl
 8005bd0:	3001      	adds	r0, #1
 8005bd2:	d0ab      	beq.n	8005b2c <_printf_i+0x164>
 8005bd4:	6823      	ldr	r3, [r4, #0]
 8005bd6:	079b      	lsls	r3, r3, #30
 8005bd8:	d413      	bmi.n	8005c02 <_printf_i+0x23a>
 8005bda:	68e0      	ldr	r0, [r4, #12]
 8005bdc:	9b03      	ldr	r3, [sp, #12]
 8005bde:	4298      	cmp	r0, r3
 8005be0:	bfb8      	it	lt
 8005be2:	4618      	movlt	r0, r3
 8005be4:	e7a4      	b.n	8005b30 <_printf_i+0x168>
 8005be6:	2301      	movs	r3, #1
 8005be8:	4632      	mov	r2, r6
 8005bea:	4649      	mov	r1, r9
 8005bec:	4640      	mov	r0, r8
 8005bee:	47d0      	blx	sl
 8005bf0:	3001      	adds	r0, #1
 8005bf2:	d09b      	beq.n	8005b2c <_printf_i+0x164>
 8005bf4:	3501      	adds	r5, #1
 8005bf6:	68e3      	ldr	r3, [r4, #12]
 8005bf8:	9903      	ldr	r1, [sp, #12]
 8005bfa:	1a5b      	subs	r3, r3, r1
 8005bfc:	42ab      	cmp	r3, r5
 8005bfe:	dcf2      	bgt.n	8005be6 <_printf_i+0x21e>
 8005c00:	e7eb      	b.n	8005bda <_printf_i+0x212>
 8005c02:	2500      	movs	r5, #0
 8005c04:	f104 0619 	add.w	r6, r4, #25
 8005c08:	e7f5      	b.n	8005bf6 <_printf_i+0x22e>
 8005c0a:	bf00      	nop
 8005c0c:	08005ed5 	.word	0x08005ed5
 8005c10:	08005ee6 	.word	0x08005ee6

08005c14 <memcpy>:
 8005c14:	440a      	add	r2, r1
 8005c16:	4291      	cmp	r1, r2
 8005c18:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c1c:	d100      	bne.n	8005c20 <memcpy+0xc>
 8005c1e:	4770      	bx	lr
 8005c20:	b510      	push	{r4, lr}
 8005c22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c2a:	4291      	cmp	r1, r2
 8005c2c:	d1f9      	bne.n	8005c22 <memcpy+0xe>
 8005c2e:	bd10      	pop	{r4, pc}

08005c30 <memmove>:
 8005c30:	4288      	cmp	r0, r1
 8005c32:	b510      	push	{r4, lr}
 8005c34:	eb01 0402 	add.w	r4, r1, r2
 8005c38:	d902      	bls.n	8005c40 <memmove+0x10>
 8005c3a:	4284      	cmp	r4, r0
 8005c3c:	4623      	mov	r3, r4
 8005c3e:	d807      	bhi.n	8005c50 <memmove+0x20>
 8005c40:	1e43      	subs	r3, r0, #1
 8005c42:	42a1      	cmp	r1, r4
 8005c44:	d008      	beq.n	8005c58 <memmove+0x28>
 8005c46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005c4e:	e7f8      	b.n	8005c42 <memmove+0x12>
 8005c50:	4402      	add	r2, r0
 8005c52:	4601      	mov	r1, r0
 8005c54:	428a      	cmp	r2, r1
 8005c56:	d100      	bne.n	8005c5a <memmove+0x2a>
 8005c58:	bd10      	pop	{r4, pc}
 8005c5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005c5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005c62:	e7f7      	b.n	8005c54 <memmove+0x24>

08005c64 <_free_r>:
 8005c64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c66:	2900      	cmp	r1, #0
 8005c68:	d048      	beq.n	8005cfc <_free_r+0x98>
 8005c6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c6e:	9001      	str	r0, [sp, #4]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	f1a1 0404 	sub.w	r4, r1, #4
 8005c76:	bfb8      	it	lt
 8005c78:	18e4      	addlt	r4, r4, r3
 8005c7a:	f000 f8d3 	bl	8005e24 <__malloc_lock>
 8005c7e:	4a20      	ldr	r2, [pc, #128]	; (8005d00 <_free_r+0x9c>)
 8005c80:	9801      	ldr	r0, [sp, #4]
 8005c82:	6813      	ldr	r3, [r2, #0]
 8005c84:	4615      	mov	r5, r2
 8005c86:	b933      	cbnz	r3, 8005c96 <_free_r+0x32>
 8005c88:	6063      	str	r3, [r4, #4]
 8005c8a:	6014      	str	r4, [r2, #0]
 8005c8c:	b003      	add	sp, #12
 8005c8e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005c92:	f000 b8cd 	b.w	8005e30 <__malloc_unlock>
 8005c96:	42a3      	cmp	r3, r4
 8005c98:	d90b      	bls.n	8005cb2 <_free_r+0x4e>
 8005c9a:	6821      	ldr	r1, [r4, #0]
 8005c9c:	1862      	adds	r2, r4, r1
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	bf04      	itt	eq
 8005ca2:	681a      	ldreq	r2, [r3, #0]
 8005ca4:	685b      	ldreq	r3, [r3, #4]
 8005ca6:	6063      	str	r3, [r4, #4]
 8005ca8:	bf04      	itt	eq
 8005caa:	1852      	addeq	r2, r2, r1
 8005cac:	6022      	streq	r2, [r4, #0]
 8005cae:	602c      	str	r4, [r5, #0]
 8005cb0:	e7ec      	b.n	8005c8c <_free_r+0x28>
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	b10b      	cbz	r3, 8005cbc <_free_r+0x58>
 8005cb8:	42a3      	cmp	r3, r4
 8005cba:	d9fa      	bls.n	8005cb2 <_free_r+0x4e>
 8005cbc:	6811      	ldr	r1, [r2, #0]
 8005cbe:	1855      	adds	r5, r2, r1
 8005cc0:	42a5      	cmp	r5, r4
 8005cc2:	d10b      	bne.n	8005cdc <_free_r+0x78>
 8005cc4:	6824      	ldr	r4, [r4, #0]
 8005cc6:	4421      	add	r1, r4
 8005cc8:	1854      	adds	r4, r2, r1
 8005cca:	42a3      	cmp	r3, r4
 8005ccc:	6011      	str	r1, [r2, #0]
 8005cce:	d1dd      	bne.n	8005c8c <_free_r+0x28>
 8005cd0:	681c      	ldr	r4, [r3, #0]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	6053      	str	r3, [r2, #4]
 8005cd6:	4421      	add	r1, r4
 8005cd8:	6011      	str	r1, [r2, #0]
 8005cda:	e7d7      	b.n	8005c8c <_free_r+0x28>
 8005cdc:	d902      	bls.n	8005ce4 <_free_r+0x80>
 8005cde:	230c      	movs	r3, #12
 8005ce0:	6003      	str	r3, [r0, #0]
 8005ce2:	e7d3      	b.n	8005c8c <_free_r+0x28>
 8005ce4:	6825      	ldr	r5, [r4, #0]
 8005ce6:	1961      	adds	r1, r4, r5
 8005ce8:	428b      	cmp	r3, r1
 8005cea:	bf04      	itt	eq
 8005cec:	6819      	ldreq	r1, [r3, #0]
 8005cee:	685b      	ldreq	r3, [r3, #4]
 8005cf0:	6063      	str	r3, [r4, #4]
 8005cf2:	bf04      	itt	eq
 8005cf4:	1949      	addeq	r1, r1, r5
 8005cf6:	6021      	streq	r1, [r4, #0]
 8005cf8:	6054      	str	r4, [r2, #4]
 8005cfa:	e7c7      	b.n	8005c8c <_free_r+0x28>
 8005cfc:	b003      	add	sp, #12
 8005cfe:	bd30      	pop	{r4, r5, pc}
 8005d00:	200001f8 	.word	0x200001f8

08005d04 <_malloc_r>:
 8005d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d06:	1ccd      	adds	r5, r1, #3
 8005d08:	f025 0503 	bic.w	r5, r5, #3
 8005d0c:	3508      	adds	r5, #8
 8005d0e:	2d0c      	cmp	r5, #12
 8005d10:	bf38      	it	cc
 8005d12:	250c      	movcc	r5, #12
 8005d14:	2d00      	cmp	r5, #0
 8005d16:	4606      	mov	r6, r0
 8005d18:	db01      	blt.n	8005d1e <_malloc_r+0x1a>
 8005d1a:	42a9      	cmp	r1, r5
 8005d1c:	d903      	bls.n	8005d26 <_malloc_r+0x22>
 8005d1e:	230c      	movs	r3, #12
 8005d20:	6033      	str	r3, [r6, #0]
 8005d22:	2000      	movs	r0, #0
 8005d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d26:	f000 f87d 	bl	8005e24 <__malloc_lock>
 8005d2a:	4921      	ldr	r1, [pc, #132]	; (8005db0 <_malloc_r+0xac>)
 8005d2c:	680a      	ldr	r2, [r1, #0]
 8005d2e:	4614      	mov	r4, r2
 8005d30:	b99c      	cbnz	r4, 8005d5a <_malloc_r+0x56>
 8005d32:	4f20      	ldr	r7, [pc, #128]	; (8005db4 <_malloc_r+0xb0>)
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	b923      	cbnz	r3, 8005d42 <_malloc_r+0x3e>
 8005d38:	4621      	mov	r1, r4
 8005d3a:	4630      	mov	r0, r6
 8005d3c:	f000 f862 	bl	8005e04 <_sbrk_r>
 8005d40:	6038      	str	r0, [r7, #0]
 8005d42:	4629      	mov	r1, r5
 8005d44:	4630      	mov	r0, r6
 8005d46:	f000 f85d 	bl	8005e04 <_sbrk_r>
 8005d4a:	1c43      	adds	r3, r0, #1
 8005d4c:	d123      	bne.n	8005d96 <_malloc_r+0x92>
 8005d4e:	230c      	movs	r3, #12
 8005d50:	6033      	str	r3, [r6, #0]
 8005d52:	4630      	mov	r0, r6
 8005d54:	f000 f86c 	bl	8005e30 <__malloc_unlock>
 8005d58:	e7e3      	b.n	8005d22 <_malloc_r+0x1e>
 8005d5a:	6823      	ldr	r3, [r4, #0]
 8005d5c:	1b5b      	subs	r3, r3, r5
 8005d5e:	d417      	bmi.n	8005d90 <_malloc_r+0x8c>
 8005d60:	2b0b      	cmp	r3, #11
 8005d62:	d903      	bls.n	8005d6c <_malloc_r+0x68>
 8005d64:	6023      	str	r3, [r4, #0]
 8005d66:	441c      	add	r4, r3
 8005d68:	6025      	str	r5, [r4, #0]
 8005d6a:	e004      	b.n	8005d76 <_malloc_r+0x72>
 8005d6c:	6863      	ldr	r3, [r4, #4]
 8005d6e:	42a2      	cmp	r2, r4
 8005d70:	bf0c      	ite	eq
 8005d72:	600b      	streq	r3, [r1, #0]
 8005d74:	6053      	strne	r3, [r2, #4]
 8005d76:	4630      	mov	r0, r6
 8005d78:	f000 f85a 	bl	8005e30 <__malloc_unlock>
 8005d7c:	f104 000b 	add.w	r0, r4, #11
 8005d80:	1d23      	adds	r3, r4, #4
 8005d82:	f020 0007 	bic.w	r0, r0, #7
 8005d86:	1ac2      	subs	r2, r0, r3
 8005d88:	d0cc      	beq.n	8005d24 <_malloc_r+0x20>
 8005d8a:	1a1b      	subs	r3, r3, r0
 8005d8c:	50a3      	str	r3, [r4, r2]
 8005d8e:	e7c9      	b.n	8005d24 <_malloc_r+0x20>
 8005d90:	4622      	mov	r2, r4
 8005d92:	6864      	ldr	r4, [r4, #4]
 8005d94:	e7cc      	b.n	8005d30 <_malloc_r+0x2c>
 8005d96:	1cc4      	adds	r4, r0, #3
 8005d98:	f024 0403 	bic.w	r4, r4, #3
 8005d9c:	42a0      	cmp	r0, r4
 8005d9e:	d0e3      	beq.n	8005d68 <_malloc_r+0x64>
 8005da0:	1a21      	subs	r1, r4, r0
 8005da2:	4630      	mov	r0, r6
 8005da4:	f000 f82e 	bl	8005e04 <_sbrk_r>
 8005da8:	3001      	adds	r0, #1
 8005daa:	d1dd      	bne.n	8005d68 <_malloc_r+0x64>
 8005dac:	e7cf      	b.n	8005d4e <_malloc_r+0x4a>
 8005dae:	bf00      	nop
 8005db0:	200001f8 	.word	0x200001f8
 8005db4:	200001fc 	.word	0x200001fc

08005db8 <_realloc_r>:
 8005db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dba:	4607      	mov	r7, r0
 8005dbc:	4614      	mov	r4, r2
 8005dbe:	460e      	mov	r6, r1
 8005dc0:	b921      	cbnz	r1, 8005dcc <_realloc_r+0x14>
 8005dc2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005dc6:	4611      	mov	r1, r2
 8005dc8:	f7ff bf9c 	b.w	8005d04 <_malloc_r>
 8005dcc:	b922      	cbnz	r2, 8005dd8 <_realloc_r+0x20>
 8005dce:	f7ff ff49 	bl	8005c64 <_free_r>
 8005dd2:	4625      	mov	r5, r4
 8005dd4:	4628      	mov	r0, r5
 8005dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005dd8:	f000 f830 	bl	8005e3c <_malloc_usable_size_r>
 8005ddc:	42a0      	cmp	r0, r4
 8005dde:	d20f      	bcs.n	8005e00 <_realloc_r+0x48>
 8005de0:	4621      	mov	r1, r4
 8005de2:	4638      	mov	r0, r7
 8005de4:	f7ff ff8e 	bl	8005d04 <_malloc_r>
 8005de8:	4605      	mov	r5, r0
 8005dea:	2800      	cmp	r0, #0
 8005dec:	d0f2      	beq.n	8005dd4 <_realloc_r+0x1c>
 8005dee:	4631      	mov	r1, r6
 8005df0:	4622      	mov	r2, r4
 8005df2:	f7ff ff0f 	bl	8005c14 <memcpy>
 8005df6:	4631      	mov	r1, r6
 8005df8:	4638      	mov	r0, r7
 8005dfa:	f7ff ff33 	bl	8005c64 <_free_r>
 8005dfe:	e7e9      	b.n	8005dd4 <_realloc_r+0x1c>
 8005e00:	4635      	mov	r5, r6
 8005e02:	e7e7      	b.n	8005dd4 <_realloc_r+0x1c>

08005e04 <_sbrk_r>:
 8005e04:	b538      	push	{r3, r4, r5, lr}
 8005e06:	4d06      	ldr	r5, [pc, #24]	; (8005e20 <_sbrk_r+0x1c>)
 8005e08:	2300      	movs	r3, #0
 8005e0a:	4604      	mov	r4, r0
 8005e0c:	4608      	mov	r0, r1
 8005e0e:	602b      	str	r3, [r5, #0]
 8005e10:	f7fb fd2e 	bl	8001870 <_sbrk>
 8005e14:	1c43      	adds	r3, r0, #1
 8005e16:	d102      	bne.n	8005e1e <_sbrk_r+0x1a>
 8005e18:	682b      	ldr	r3, [r5, #0]
 8005e1a:	b103      	cbz	r3, 8005e1e <_sbrk_r+0x1a>
 8005e1c:	6023      	str	r3, [r4, #0]
 8005e1e:	bd38      	pop	{r3, r4, r5, pc}
 8005e20:	20000554 	.word	0x20000554

08005e24 <__malloc_lock>:
 8005e24:	4801      	ldr	r0, [pc, #4]	; (8005e2c <__malloc_lock+0x8>)
 8005e26:	f000 b811 	b.w	8005e4c <__retarget_lock_acquire_recursive>
 8005e2a:	bf00      	nop
 8005e2c:	2000055c 	.word	0x2000055c

08005e30 <__malloc_unlock>:
 8005e30:	4801      	ldr	r0, [pc, #4]	; (8005e38 <__malloc_unlock+0x8>)
 8005e32:	f000 b80c 	b.w	8005e4e <__retarget_lock_release_recursive>
 8005e36:	bf00      	nop
 8005e38:	2000055c 	.word	0x2000055c

08005e3c <_malloc_usable_size_r>:
 8005e3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e40:	1f18      	subs	r0, r3, #4
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	bfbc      	itt	lt
 8005e46:	580b      	ldrlt	r3, [r1, r0]
 8005e48:	18c0      	addlt	r0, r0, r3
 8005e4a:	4770      	bx	lr

08005e4c <__retarget_lock_acquire_recursive>:
 8005e4c:	4770      	bx	lr

08005e4e <__retarget_lock_release_recursive>:
 8005e4e:	4770      	bx	lr

08005e50 <_init>:
 8005e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e52:	bf00      	nop
 8005e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e56:	bc08      	pop	{r3}
 8005e58:	469e      	mov	lr, r3
 8005e5a:	4770      	bx	lr

08005e5c <_fini>:
 8005e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e5e:	bf00      	nop
 8005e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e62:	bc08      	pop	{r3}
 8005e64:	469e      	mov	lr, r3
 8005e66:	4770      	bx	lr
