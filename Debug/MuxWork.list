
MuxWork.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c80  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08005e10  08005e10  00015e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ea0  08005ea0  000200d4  2**0
                  CONTENTS
  4 .ARM          00000008  08005ea0  08005ea0  00015ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ea8  08005ea8  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ea8  08005ea8  00015ea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005eac  08005eac  00015eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  08005eb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200d4  2**0
                  CONTENTS
 10 .bss          00000490  200000d4  200000d4  000200d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000564  20000564  000200d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011dd4  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023f0  00000000  00000000  00031ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e40  00000000  00000000  000342c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d68  00000000  00000000  00035108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000230d8  00000000  00000000  00035e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010e06  00000000  00000000  00058f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8d37  00000000  00000000  00069d4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00142a85  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003fa8  00000000  00000000  00142ad8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000d4 	.word	0x200000d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005df8 	.word	0x08005df8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000d8 	.word	0x200000d8
 80001cc:	08005df8 	.word	0x08005df8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <setup_bb>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
	void setup_bb() {
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
		CS_HIGH;
 800057c:	2201      	movs	r2, #1
 800057e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000582:	4805      	ldr	r0, [pc, #20]	; (8000598 <setup_bb+0x20>)
 8000584:	f002 fb26 	bl	8002bd4 <HAL_GPIO_WritePin>
		CLK_LOW;
 8000588:	2200      	movs	r2, #0
 800058a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800058e:	4802      	ldr	r0, [pc, #8]	; (8000598 <setup_bb+0x20>)
 8000590:	f002 fb20 	bl	8002bd4 <HAL_GPIO_WritePin>
	}
 8000594:	bf00      	nop
 8000596:	bd80      	pop	{r7, pc}
 8000598:	40020400 	.word	0x40020400

0800059c <small_delay>:

	void small_delay() {
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
		HAL_Delay(1);
 80005a0:	2001      	movs	r0, #1
 80005a2:	f001 f9ed 	bl	8001980 <HAL_Delay>
	}
 80005a6:	bf00      	nop
 80005a8:	bd80      	pop	{r7, pc}
	...

080005ac <bb_write_bit>:

	void bb_write_bit(int b) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
		if (b) DATA_HIGH;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d006      	beq.n	80005c8 <bb_write_bit+0x1c>
 80005ba:	2201      	movs	r2, #1
 80005bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005c0:	480e      	ldr	r0, [pc, #56]	; (80005fc <bb_write_bit+0x50>)
 80005c2:	f002 fb07 	bl	8002bd4 <HAL_GPIO_WritePin>
 80005c6:	e005      	b.n	80005d4 <bb_write_bit+0x28>
		else   DATA_LOW;
 80005c8:	2200      	movs	r2, #0
 80005ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005ce:	480b      	ldr	r0, [pc, #44]	; (80005fc <bb_write_bit+0x50>)
 80005d0:	f002 fb00 	bl	8002bd4 <HAL_GPIO_WritePin>
		small_delay();
 80005d4:	f7ff ffe2 	bl	800059c <small_delay>
		CLK_HIGH;
 80005d8:	2201      	movs	r2, #1
 80005da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005de:	4807      	ldr	r0, [pc, #28]	; (80005fc <bb_write_bit+0x50>)
 80005e0:	f002 faf8 	bl	8002bd4 <HAL_GPIO_WritePin>
		small_delay();
 80005e4:	f7ff ffda 	bl	800059c <small_delay>
		CLK_LOW;
 80005e8:	2200      	movs	r2, #0
 80005ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ee:	4803      	ldr	r0, [pc, #12]	; (80005fc <bb_write_bit+0x50>)
 80005f0:	f002 faf0 	bl	8002bd4 <HAL_GPIO_WritePin>
	}
 80005f4:	bf00      	nop
 80005f6:	3708      	adds	r7, #8
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	40020400 	.word	0x40020400

08000600 <bb_write_byte>:

	void bb_write_byte(int b) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
		for (int i = 7; i >= 0; --i) bb_write_bit((b >> i) & 1);
 8000608:	2307      	movs	r3, #7
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	e00b      	b.n	8000626 <bb_write_byte+0x26>
 800060e:	687a      	ldr	r2, [r7, #4]
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	fa42 f303 	asr.w	r3, r2, r3
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	4618      	mov	r0, r3
 800061c:	f7ff ffc6 	bl	80005ac <bb_write_bit>
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	3b01      	subs	r3, #1
 8000624:	60fb      	str	r3, [r7, #12]
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	2b00      	cmp	r3, #0
 800062a:	daf0      	bge.n	800060e <bb_write_byte+0xe>
	}
 800062c:	bf00      	nop
 800062e:	bf00      	nop
 8000630:	3710      	adds	r7, #16
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
	...

08000638 <bb_cmd>:

	void bb_cmd(int data) {
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
		CS_LOW;
 8000640:	2200      	movs	r2, #0
 8000642:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000646:	480e      	ldr	r0, [pc, #56]	; (8000680 <bb_cmd+0x48>)
 8000648:	f002 fac4 	bl	8002bd4 <HAL_GPIO_WritePin>
		small_delay();
 800064c:	f7ff ffa6 	bl	800059c <small_delay>
		bb_write_bit(0);
 8000650:	2000      	movs	r0, #0
 8000652:	f7ff ffab 	bl	80005ac <bb_write_bit>
		bb_write_bit(0);
 8000656:	2000      	movs	r0, #0
 8000658:	f7ff ffa8 	bl	80005ac <bb_write_bit>
		bb_write_byte(data);
 800065c:	6878      	ldr	r0, [r7, #4]
 800065e:	f7ff ffcf 	bl	8000600 <bb_write_byte>
		small_delay();
 8000662:	f7ff ff9b 	bl	800059c <small_delay>
		CS_HIGH;
 8000666:	2201      	movs	r2, #1
 8000668:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800066c:	4804      	ldr	r0, [pc, #16]	; (8000680 <bb_cmd+0x48>)
 800066e:	f002 fab1 	bl	8002bd4 <HAL_GPIO_WritePin>
		small_delay();
 8000672:	f7ff ff93 	bl	800059c <small_delay>
	}
 8000676:	bf00      	nop
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40020400 	.word	0x40020400

08000684 <bb_data>:

	void bb_data(int data) {
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
		CS_LOW;
 800068c:	2200      	movs	r2, #0
 800068e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000692:	480e      	ldr	r0, [pc, #56]	; (80006cc <bb_data+0x48>)
 8000694:	f002 fa9e 	bl	8002bd4 <HAL_GPIO_WritePin>
		small_delay();
 8000698:	f7ff ff80 	bl	800059c <small_delay>
		bb_write_bit(1);
 800069c:	2001      	movs	r0, #1
 800069e:	f7ff ff85 	bl	80005ac <bb_write_bit>
		bb_write_bit(0);
 80006a2:	2000      	movs	r0, #0
 80006a4:	f7ff ff82 	bl	80005ac <bb_write_bit>
		bb_write_byte(data);
 80006a8:	6878      	ldr	r0, [r7, #4]
 80006aa:	f7ff ffa9 	bl	8000600 <bb_write_byte>
		small_delay();
 80006ae:	f7ff ff75 	bl	800059c <small_delay>
		CS_HIGH;
 80006b2:	2201      	movs	r2, #1
 80006b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006b8:	4804      	ldr	r0, [pc, #16]	; (80006cc <bb_data+0x48>)
 80006ba:	f002 fa8b 	bl	8002bd4 <HAL_GPIO_WritePin>
		small_delay();
 80006be:	f7ff ff6d 	bl	800059c <small_delay>
	}
 80006c2:	bf00      	nop
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40020400 	.word	0x40020400

080006d0 <bb_init_oled>:

	void bb_init_oled() {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
		HAL_Delay(1); // 1 ms
 80006d4:	2001      	movs	r0, #1
 80006d6:	f001 f953 	bl	8001980 <HAL_Delay>
		bb_cmd(0x38);
 80006da:	2038      	movs	r0, #56	; 0x38
 80006dc:	f7ff ffac 	bl	8000638 <bb_cmd>
		bb_cmd(0x08);
 80006e0:	2008      	movs	r0, #8
 80006e2:	f7ff ffa9 	bl	8000638 <bb_cmd>
		bb_cmd(0x01);
 80006e6:	2001      	movs	r0, #1
 80006e8:	f7ff ffa6 	bl	8000638 <bb_cmd>
		HAL_Delay(2); // 2 ms
 80006ec:	2002      	movs	r0, #2
 80006ee:	f001 f947 	bl	8001980 <HAL_Delay>
		bb_cmd(0x06);
 80006f2:	2006      	movs	r0, #6
 80006f4:	f7ff ffa0 	bl	8000638 <bb_cmd>
		bb_cmd(0x02);
 80006f8:	2002      	movs	r0, #2
 80006fa:	f7ff ff9d 	bl	8000638 <bb_cmd>
		bb_cmd(0x0c);
 80006fe:	200c      	movs	r0, #12
 8000700:	f7ff ff9a 	bl	8000638 <bb_cmd>
	}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}

08000708 <bb_display1>:

	void bb_display1 (const char* str) {
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
		bb_cmd(0x02);
 8000710:	2002      	movs	r0, #2
 8000712:	f7ff ff91 	bl	8000638 <bb_cmd>
		for (int i = 0; i < strlen(str); ++i) if (str[i] != '\0') bb_data(str[i]);
 8000716:	2300      	movs	r3, #0
 8000718:	60fb      	str	r3, [r7, #12]
 800071a:	e00f      	b.n	800073c <bb_display1+0x34>
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	687a      	ldr	r2, [r7, #4]
 8000720:	4413      	add	r3, r2
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d006      	beq.n	8000736 <bb_display1+0x2e>
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	687a      	ldr	r2, [r7, #4]
 800072c:	4413      	add	r3, r2
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff ffa7 	bl	8000684 <bb_data>
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	3301      	adds	r3, #1
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	6878      	ldr	r0, [r7, #4]
 800073e:	f7ff fd47 	bl	80001d0 <strlen>
 8000742:	4602      	mov	r2, r0
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	429a      	cmp	r2, r3
 8000748:	d8e8      	bhi.n	800071c <bb_display1+0x14>
	}
 800074a:	bf00      	nop
 800074c:	bf00      	nop
 800074e:	3710      	adds	r7, #16
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <bb_display2>:

	void bb_display2 (const char* str) {
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
		bb_cmd(0xc0);
 800075c:	20c0      	movs	r0, #192	; 0xc0
 800075e:	f7ff ff6b 	bl	8000638 <bb_cmd>
		for (int i = 0; i < strlen(str); ++i) if (str[i] != '\0') bb_data(str[i]);
 8000762:	2300      	movs	r3, #0
 8000764:	60fb      	str	r3, [r7, #12]
 8000766:	e00f      	b.n	8000788 <bb_display2+0x34>
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	687a      	ldr	r2, [r7, #4]
 800076c:	4413      	add	r3, r2
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d006      	beq.n	8000782 <bb_display2+0x2e>
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	687a      	ldr	r2, [r7, #4]
 8000778:	4413      	add	r3, r2
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	4618      	mov	r0, r3
 800077e:	f7ff ff81 	bl	8000684 <bb_data>
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	3301      	adds	r3, #1
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	6878      	ldr	r0, [r7, #4]
 800078a:	f7ff fd21 	bl	80001d0 <strlen>
 800078e:	4602      	mov	r2, r0
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	429a      	cmp	r2, r3
 8000794:	d8e8      	bhi.n	8000768 <bb_display2+0x14>
	}
 8000796:	bf00      	nop
 8000798:	bf00      	nop
 800079a:	3710      	adds	r7, #16
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <choseSelectLineMux>:
		}
	}

	//Works
	void choseSelectLineMux(int muxPin)
	{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
		//Reset all pins:
		for(int i=0;i<3;i++){
 80007a8:	2300      	movs	r3, #0
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	e00c      	b.n	80007c8 <choseSelectLineMux+0x28>
			HAL_GPIO_WritePin(GPIOD, selectPins[i], GPIO_PIN_RESET);
 80007ae:	4a19      	ldr	r2, [pc, #100]	; (8000814 <choseSelectLineMux+0x74>)
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007b6:	b29b      	uxth	r3, r3
 80007b8:	2200      	movs	r2, #0
 80007ba:	4619      	mov	r1, r3
 80007bc:	4816      	ldr	r0, [pc, #88]	; (8000818 <choseSelectLineMux+0x78>)
 80007be:	f002 fa09 	bl	8002bd4 <HAL_GPIO_WritePin>
		for(int i=0;i<3;i++){
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	3301      	adds	r3, #1
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	2b02      	cmp	r3, #2
 80007cc:	ddef      	ble.n	80007ae <choseSelectLineMux+0xe>
		}

		//Turn on correct pins:
		for(int i=2;i>=0;i--){
 80007ce:	2302      	movs	r3, #2
 80007d0:	60bb      	str	r3, [r7, #8]
 80007d2:	e017      	b.n	8000804 <choseSelectLineMux+0x64>
			if(onPins[muxPin][i]){
 80007d4:	4911      	ldr	r1, [pc, #68]	; (800081c <choseSelectLineMux+0x7c>)
 80007d6:	687a      	ldr	r2, [r7, #4]
 80007d8:	4613      	mov	r3, r2
 80007da:	005b      	lsls	r3, r3, #1
 80007dc:	4413      	add	r3, r2
 80007de:	68ba      	ldr	r2, [r7, #8]
 80007e0:	4413      	add	r3, r2
 80007e2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d009      	beq.n	80007fe <choseSelectLineMux+0x5e>
				HAL_GPIO_WritePin(GPIOD, selectPins[i], GPIO_PIN_SET);
 80007ea:	4a0a      	ldr	r2, [pc, #40]	; (8000814 <choseSelectLineMux+0x74>)
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007f2:	b29b      	uxth	r3, r3
 80007f4:	2201      	movs	r2, #1
 80007f6:	4619      	mov	r1, r3
 80007f8:	4807      	ldr	r0, [pc, #28]	; (8000818 <choseSelectLineMux+0x78>)
 80007fa:	f002 f9eb 	bl	8002bd4 <HAL_GPIO_WritePin>
		for(int i=2;i>=0;i--){
 80007fe:	68bb      	ldr	r3, [r7, #8]
 8000800:	3b01      	subs	r3, #1
 8000802:	60bb      	str	r3, [r7, #8]
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	2b00      	cmp	r3, #0
 8000808:	dae4      	bge.n	80007d4 <choseSelectLineMux+0x34>
			}
		}
	}
 800080a:	bf00      	nop
 800080c:	bf00      	nop
 800080e:	3710      	adds	r7, #16
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	08005e34 	.word	0x08005e34
 8000818:	40020c00 	.word	0x40020c00
 800081c:	20000000 	.word	0x20000000

08000820 <choseSelectLineSuper>:

	//Works
	void choseSelectLineSuper(int muxPin)
		{
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
			//Reset all pins:
			for(int i=0;i<3;i++){
 8000828:	2300      	movs	r3, #0
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	e00c      	b.n	8000848 <choseSelectLineSuper+0x28>
				HAL_GPIO_WritePin(GPIOC, superPins[i], GPIO_PIN_RESET);
 800082e:	4a1a      	ldr	r2, [pc, #104]	; (8000898 <choseSelectLineSuper+0x78>)
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000836:	b29b      	uxth	r3, r3
 8000838:	2200      	movs	r2, #0
 800083a:	4619      	mov	r1, r3
 800083c:	4817      	ldr	r0, [pc, #92]	; (800089c <choseSelectLineSuper+0x7c>)
 800083e:	f002 f9c9 	bl	8002bd4 <HAL_GPIO_WritePin>
			for(int i=0;i<3;i++){
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	3301      	adds	r3, #1
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	2b02      	cmp	r3, #2
 800084c:	ddef      	ble.n	800082e <choseSelectLineSuper+0xe>
			}

			//Turn on correct pins:
			for(int i=2;i>=0;i--){
 800084e:	2302      	movs	r3, #2
 8000850:	60bb      	str	r3, [r7, #8]
 8000852:	e019      	b.n	8000888 <choseSelectLineSuper+0x68>
				if(onPins[muxPin][2-i]){
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	f1c3 0102 	rsb	r1, r3, #2
 800085a:	4811      	ldr	r0, [pc, #68]	; (80008a0 <choseSelectLineSuper+0x80>)
 800085c:	687a      	ldr	r2, [r7, #4]
 800085e:	4613      	mov	r3, r2
 8000860:	005b      	lsls	r3, r3, #1
 8000862:	4413      	add	r3, r2
 8000864:	440b      	add	r3, r1
 8000866:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d009      	beq.n	8000882 <choseSelectLineSuper+0x62>
					HAL_GPIO_WritePin(GPIOC, superPins[i], GPIO_PIN_SET);
 800086e:	4a0a      	ldr	r2, [pc, #40]	; (8000898 <choseSelectLineSuper+0x78>)
 8000870:	68bb      	ldr	r3, [r7, #8]
 8000872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000876:	b29b      	uxth	r3, r3
 8000878:	2201      	movs	r2, #1
 800087a:	4619      	mov	r1, r3
 800087c:	4807      	ldr	r0, [pc, #28]	; (800089c <choseSelectLineSuper+0x7c>)
 800087e:	f002 f9a9 	bl	8002bd4 <HAL_GPIO_WritePin>
			for(int i=2;i>=0;i--){
 8000882:	68bb      	ldr	r3, [r7, #8]
 8000884:	3b01      	subs	r3, #1
 8000886:	60bb      	str	r3, [r7, #8]
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	2b00      	cmp	r3, #0
 800088c:	dae2      	bge.n	8000854 <choseSelectLineSuper+0x34>
				}
			}
		}
 800088e:	bf00      	nop
 8000890:	bf00      	nop
 8000892:	3710      	adds	r7, #16
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	08005e40 	.word	0x08005e40
 800089c:	40020800 	.word	0x40020800
 80008a0:	20000000 	.word	0x20000000

080008a4 <readSuperMux>:

	//To be verified
	void readSuperMux(){
 80008a4:	b5b0      	push	{r4, r5, r7, lr}
 80008a6:	b09e      	sub	sp, #120	; 0x78
 80008a8:	af00      	add	r7, sp, #0
		//MIGHT WANT TO NOT USE A GLOBAL SOURCE!
		int dest_row=-1, dest_hall=-1, source_row=-1, source_hall=-1; //x,y coordinates for source and destination of piece
 80008aa:	f04f 33ff 	mov.w	r3, #4294967295
 80008ae:	677b      	str	r3, [r7, #116]	; 0x74
 80008b0:	f04f 33ff 	mov.w	r3, #4294967295
 80008b4:	673b      	str	r3, [r7, #112]	; 0x70
 80008b6:	f04f 33ff 	mov.w	r3, #4294967295
 80008ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 80008bc:	f04f 33ff 	mov.w	r3, #4294967295
 80008c0:	66bb      	str	r3, [r7, #104]	; 0x68

		int change_detected = 0; //0 means no, 1 means yes
 80008c2:	2300      	movs	r3, #0
 80008c4:	667b      	str	r3, [r7, #100]	; 0x64

		for(int row=0;row<8;row++){
 80008c6:	2300      	movs	r3, #0
 80008c8:	663b      	str	r3, [r7, #96]	; 0x60
 80008ca:	e03d      	b.n	8000948 <readSuperMux+0xa4>
			//Iterate through each ROW BOARD (line below selects 1 row at a time)
			choseSelectLineSuper(row);
 80008cc:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80008ce:	f7ff ffa7 	bl	8000820 <choseSelectLineSuper>

			for(int hall=0;hall<8;hall++){
 80008d2:	2300      	movs	r3, #0
 80008d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80008d6:	e031      	b.n	800093c <readSuperMux+0x98>
				//Iterate through each HALL SENSOR (line below selects 1 hall at a time)
				choseSelectLineMux(hall);
 80008d8:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80008da:	f7ff ff61 	bl	80007a0 <choseSelectLineMux>
				 * - (HAL_GPIO_ReadPin(GPIOD, SUPER_MUX_DATA)): 1 means piece NOT detected
				 * - boardData[row][col] == 0: Means position at {row, col} previously had a piece
				 * */

				//If the current location is nonzero, but the previous state is 0, we are moving a piece here
				if((!(HAL_GPIO_ReadPin(GPIOD, SUPER_MUX_DATA))) && boardData[row][hall] == 0){
 80008de:	2108      	movs	r1, #8
 80008e0:	4887      	ldr	r0, [pc, #540]	; (8000b00 <readSuperMux+0x25c>)
 80008e2:	f002 f95f 	bl	8002ba4 <HAL_GPIO_ReadPin>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d10e      	bne.n	800090a <readSuperMux+0x66>
 80008ec:	4985      	ldr	r1, [pc, #532]	; (8000b04 <readSuperMux+0x260>)
 80008ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80008f0:	00da      	lsls	r2, r3, #3
 80008f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80008f4:	4413      	add	r3, r2
 80008f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d105      	bne.n	800090a <readSuperMux+0x66>
					change_detected = 1;
 80008fe:	2301      	movs	r3, #1
 8000900:	667b      	str	r3, [r7, #100]	; 0x64
					dest_row = row;
 8000902:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000904:	677b      	str	r3, [r7, #116]	; 0x74
					dest_hall = hall;
 8000906:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000908:	673b      	str	r3, [r7, #112]	; 0x70
				}

				//If the current location is zero, but the previous state is nonzero, we are taking a piece from here
				if((HAL_GPIO_ReadPin(GPIOD, SUPER_MUX_DATA)) && boardData[row][hall] != 0){
 800090a:	2108      	movs	r1, #8
 800090c:	487c      	ldr	r0, [pc, #496]	; (8000b00 <readSuperMux+0x25c>)
 800090e:	f002 f949 	bl	8002ba4 <HAL_GPIO_ReadPin>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d00e      	beq.n	8000936 <readSuperMux+0x92>
 8000918:	497a      	ldr	r1, [pc, #488]	; (8000b04 <readSuperMux+0x260>)
 800091a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800091c:	00da      	lsls	r2, r3, #3
 800091e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000920:	4413      	add	r3, r2
 8000922:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d005      	beq.n	8000936 <readSuperMux+0x92>
					change_detected = 1;
 800092a:	2301      	movs	r3, #1
 800092c:	667b      	str	r3, [r7, #100]	; 0x64
					source_row = row;
 800092e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000930:	66fb      	str	r3, [r7, #108]	; 0x6c
					source_hall = hall;
 8000932:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000934:	66bb      	str	r3, [r7, #104]	; 0x68
			for(int hall=0;hall<8;hall++){
 8000936:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000938:	3301      	adds	r3, #1
 800093a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800093c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800093e:	2b07      	cmp	r3, #7
 8000940:	ddca      	ble.n	80008d8 <readSuperMux+0x34>
		for(int row=0;row<8;row++){
 8000942:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000944:	3301      	adds	r3, #1
 8000946:	663b      	str	r3, [r7, #96]	; 0x60
 8000948:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800094a:	2b07      	cmp	r3, #7
 800094c:	ddbe      	ble.n	80008cc <readSuperMux+0x28>
		}

		//If a change was detected (flag was raised)

//		bb_display2("             ");
		if(change_detected){ //Continue here...
 800094e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000950:	2b00      	cmp	r3, #0
 8000952:	f000 80d0 	beq.w	8000af6 <readSuperMux+0x252>
			change_detected = 0; //Reset value (redundant)
 8000956:	2300      	movs	r3, #0
 8000958:	667b      	str	r3, [r7, #100]	; 0x64

			char move_to_send[2]; //The array of information to send
			char test_with_display[3];


			if(dest_row != -1){ //Destination changed
 800095a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800095c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000960:	d01d      	beq.n	800099e <readSuperMux+0xfa>
				move_to_send[0] = (char)(((8*dest_row) + dest_hall) + 40);
 8000962:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000964:	b2db      	uxtb	r3, r3
 8000966:	00db      	lsls	r3, r3, #3
 8000968:	b2da      	uxtb	r2, r3
 800096a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800096c:	b2db      	uxtb	r3, r3
 800096e:	4413      	add	r3, r2
 8000970:	b2db      	uxtb	r3, r3
 8000972:	3328      	adds	r3, #40	; 0x28
 8000974:	b2db      	uxtb	r3, r3
 8000976:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
				sprintf(test_with_display, "%2d", ((8*dest_row) + dest_hall));
 800097a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800097c:	00da      	lsls	r2, r3, #3
 800097e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000980:	441a      	add	r2, r3
 8000982:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000986:	4960      	ldr	r1, [pc, #384]	; (8000b08 <readSuperMux+0x264>)
 8000988:	4618      	mov	r0, r3
 800098a:	f004 fe07 	bl	800559c <siprintf>
				move_to_send[1] = test_with_display[2] = 'd';
 800098e:	2364      	movs	r3, #100	; 0x64
 8000990:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8000994:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000998:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 800099c:	e01c      	b.n	80009d8 <readSuperMux+0x134>
			}else{ //Source changed
				move_to_send[0] = (char)(((8*source_row) + source_hall) + 40);
 800099e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	00db      	lsls	r3, r3, #3
 80009a4:	b2da      	uxtb	r2, r3
 80009a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	4413      	add	r3, r2
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	3328      	adds	r3, #40	; 0x28
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
				sprintf(test_with_display, "%2d", ((8*source_row) + source_hall));
 80009b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80009b8:	00da      	lsls	r2, r3, #3
 80009ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80009bc:	441a      	add	r2, r3
 80009be:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80009c2:	4951      	ldr	r1, [pc, #324]	; (8000b08 <readSuperMux+0x264>)
 80009c4:	4618      	mov	r0, r3
 80009c6:	f004 fde9 	bl	800559c <siprintf>
				move_to_send[1] = test_with_display[2] = 's';
 80009ca:	2373      	movs	r3, #115	; 0x73
 80009cc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80009d0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80009d4:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
//				move_to_send[2] = 's';
			}

			bb_display1(move_to_send);
 80009d8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80009dc:	4618      	mov	r0, r3
 80009de:	f7ff fe93 	bl	8000708 <bb_display1>
			bb_display2(test_with_display);
 80009e2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80009e6:	4618      	mov	r0, r3
 80009e8:	f7ff feb4 	bl	8000754 <bb_display2>
//			Send to Vik via USB UART code ...

		    HAL_UART_AbortReceive(&huart2);
 80009ec:	4847      	ldr	r0, [pc, #284]	; (8000b0c <readSuperMux+0x268>)
 80009ee:	f004 faca 	bl	8004f86 <HAL_UART_AbortReceive>
		    HAL_UART_Transmit(&huart2, move_to_send, sizeof(move_to_send), 10);
 80009f2:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80009f6:	230a      	movs	r3, #10
 80009f8:	2202      	movs	r2, #2
 80009fa:	4844      	ldr	r0, [pc, #272]	; (8000b0c <readSuperMux+0x268>)
 80009fc:	f004 f927 	bl	8004c4e <HAL_UART_Transmit>

		    //Wait to recieve squares to light up from Vik...
		    char squares_to_light[28]; //This is a char right???

		    //Initially render all LEDs black
		    all_black_render();
 8000a00:	f000 fafa 	bl	8000ff8 <all_black_render>

		    HAL_UART_AbortTransmit(&huart2);
 8000a04:	4841      	ldr	r0, [pc, #260]	; (8000b0c <readSuperMux+0x268>)
 8000a06:	f004 fa56 	bl	8004eb6 <HAL_UART_AbortTransmit>
		    HAL_UART_Receive(&huart2, squares_to_light, sizeof(squares_to_light), 10000000);
 8000a0a:	f107 0120 	add.w	r1, r7, #32
 8000a0e:	4b40      	ldr	r3, [pc, #256]	; (8000b10 <readSuperMux+0x26c>)
 8000a10:	221c      	movs	r2, #28
 8000a12:	483e      	ldr	r0, [pc, #248]	; (8000b0c <readSuperMux+0x268>)
 8000a14:	f004 f9ad 	bl	8004d72 <HAL_UART_Receive>

		    for(int i = 0;i < 28;i++){
 8000a18:	2300      	movs	r3, #0
 8000a1a:	65bb      	str	r3, [r7, #88]	; 0x58
 8000a1c:	e047      	b.n	8000aae <readSuperMux+0x20a>
		    	int square = (int) (squares_to_light[i] - 40);
 8000a1e:	f107 0220 	add.w	r2, r7, #32
 8000a22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000a24:	4413      	add	r3, r2
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	3b28      	subs	r3, #40	; 0x28
 8000a2a:	653b      	str	r3, [r7, #80]	; 0x50
		    	if(square < 0 || square > 63){
 8000a2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	db40      	blt.n	8000ab4 <readSuperMux+0x210>
 8000a32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a34:	2b3f      	cmp	r3, #63	; 0x3f
 8000a36:	dc3d      	bgt.n	8000ab4 <readSuperMux+0x210>
		    		break;
		    	}else{
		    		int data_recieved = (int) squares_to_light[i];
 8000a38:	f107 0220 	add.w	r2, r7, #32
 8000a3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000a3e:	4413      	add	r3, r2
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	64fb      	str	r3, [r7, #76]	; 0x4c

		    		//1. As there are 15 LEDs/row, determine which specific LED goes on
					 int square = (data_recieved*2) - (int)(8/data_recieved); //The first component accounts for 1 'working' LED for every 'hidden' LED.  The second component accounts for the fact that there are 15/row, not 16/row
 8000a44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a46:	005a      	lsls	r2, r3, #1
 8000a48:	f06f 0107 	mvn.w	r1, #7
 8000a4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a4e:	fb91 f3f3 	sdiv	r3, r1, r3
 8000a52:	4413      	add	r3, r2
 8000a54:	657b      	str	r3, [r7, #84]	; 0x54

					 //2. With how LEDs are wired, odd # rows (starting at 0) are 'backwards'
					 int row = (int)square/8;
 8000a56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	da00      	bge.n	8000a5e <readSuperMux+0x1ba>
 8000a5c:	3307      	adds	r3, #7
 8000a5e:	10db      	asrs	r3, r3, #3
 8000a60:	64bb      	str	r3, [r7, #72]	; 0x48

					 if(row % 2){ //If the row is odd...
 8000a62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000a64:	f003 0301 	and.w	r3, r3, #1
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d017      	beq.n	8000a9c <readSuperMux+0x1f8>
						 int first_row_index = 8*row; //Lowest square index in the row
 8000a6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000a6e:	00db      	lsls	r3, r3, #3
 8000a70:	647b      	str	r3, [r7, #68]	; 0x44

						 int flip_key[8][1] = {
 8000a72:	4b28      	ldr	r3, [pc, #160]	; (8000b14 <readSuperMux+0x270>)
 8000a74:	463c      	mov	r4, r7
 8000a76:	461d      	mov	r5, r3
 8000a78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a7c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000a80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								 {-1},
								 {-3},
								 {-5},
								 {-7}};

						 square += flip_key[square-first_row_index][0];
 8000a84:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000a86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a88:	1ad3      	subs	r3, r2, r3
 8000a8a:	009b      	lsls	r3, r3, #2
 8000a8c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8000a90:	4413      	add	r3, r2
 8000a92:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8000a96:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000a98:	4413      	add	r3, r2
 8000a9a:	657b      	str	r3, [r7, #84]	; 0x54
					 }

					 render_one_led(square, 50, 50, 0); //Render LED purple
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	2232      	movs	r2, #50	; 0x32
 8000aa0:	2132      	movs	r1, #50	; 0x32
 8000aa2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8000aa4:	f000 fad6 	bl	8001054 <render_one_led>
		    for(int i = 0;i < 28;i++){
 8000aa8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000aaa:	3301      	adds	r3, #1
 8000aac:	65bb      	str	r3, [r7, #88]	; 0x58
 8000aae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000ab0:	2b1b      	cmp	r3, #27
 8000ab2:	ddb4      	ble.n	8000a1e <readSuperMux+0x17a>
		    }

		    //BREAK (stuff below here works as expected)

		    //If the destination changed, update array representation of board:
			if(dest_row != -1 && dest_hall != -1){
 8000ab4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aba:	d00b      	beq.n	8000ad4 <readSuperMux+0x230>
 8000abc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ac2:	d007      	beq.n	8000ad4 <readSuperMux+0x230>
				boardData[dest_row][dest_hall] = 1; //findMissingPiece(); //boardData[SOURCE_X][SOURCE_Y];
 8000ac4:	490f      	ldr	r1, [pc, #60]	; (8000b04 <readSuperMux+0x260>)
 8000ac6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000ac8:	00da      	lsls	r2, r3, #3
 8000aca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000acc:	4413      	add	r3, r2
 8000ace:	2201      	movs	r2, #1
 8000ad0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			}

			//If the source changed, update array representation of board:
			if(source_row != -1 && source_hall != -1){
 8000ad4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ada:	d00c      	beq.n	8000af6 <readSuperMux+0x252>
 8000adc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ae2:	d008      	beq.n	8000af6 <readSuperMux+0x252>
				boardData[source_row][source_hall] = 0;
 8000ae4:	4907      	ldr	r1, [pc, #28]	; (8000b04 <readSuperMux+0x260>)
 8000ae6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000ae8:	00da      	lsls	r2, r3, #3
 8000aea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000aec:	4413      	add	r3, r2
 8000aee:	2200      	movs	r2, #0
 8000af0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			}
		}

		return boardData;
 8000af4:	bf00      	nop
 8000af6:	bf00      	nop
	}
 8000af8:	3778      	adds	r7, #120	; 0x78
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bdb0      	pop	{r4, r5, r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40020c00 	.word	0x40020c00
 8000b04:	200000f0 	.word	0x200000f0
 8000b08:	08005e10 	.word	0x08005e10
 8000b0c:	200002f0 	.word	0x200002f0
 8000b10:	00989680 	.word	0x00989680
 8000b14:	08005e14 	.word	0x08005e14

08000b18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b1e:	f000 feed 	bl	80018fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b22:	f000 f813 	bl	8000b4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b26:	f000 f9b7 	bl	8000e98 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000b2a:	f000 f879 	bl	8000c20 <MX_ADC1_Init>
  MX_DMA_Init();
 8000b2e:	f000 f993 	bl	8000e58 <MX_DMA_Init>
  MX_TIM8_Init();
 8000b32:	f000 f8c7 	bl	8000cc4 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8000b36:	f000 f965 	bl	8000e04 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  setup_bb();
 8000b3a:	f7ff fd1d 	bl	8000578 <setup_bb>
  bb_init_oled();
 8000b3e:	f7ff fdc7 	bl	80006d0 <bb_init_oled>
//  init_neopixel(WS2812B);
  all_black_render();
 8000b42:	f000 fa59 	bl	8000ff8 <all_black_render>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  readSuperMux();
 8000b46:	f7ff fead 	bl	80008a4 <readSuperMux>
 8000b4a:	e7fc      	b.n	8000b46 <main+0x2e>

08000b4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b094      	sub	sp, #80	; 0x50
 8000b50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b52:	f107 0320 	add.w	r3, r7, #32
 8000b56:	2230      	movs	r2, #48	; 0x30
 8000b58:	2100      	movs	r1, #0
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f004 fd16 	bl	800558c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b60:	f107 030c 	add.w	r3, r7, #12
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b70:	2300      	movs	r3, #0
 8000b72:	60bb      	str	r3, [r7, #8]
 8000b74:	4b28      	ldr	r3, [pc, #160]	; (8000c18 <SystemClock_Config+0xcc>)
 8000b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b78:	4a27      	ldr	r2, [pc, #156]	; (8000c18 <SystemClock_Config+0xcc>)
 8000b7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b80:	4b25      	ldr	r3, [pc, #148]	; (8000c18 <SystemClock_Config+0xcc>)
 8000b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b88:	60bb      	str	r3, [r7, #8]
 8000b8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	607b      	str	r3, [r7, #4]
 8000b90:	4b22      	ldr	r3, [pc, #136]	; (8000c1c <SystemClock_Config+0xd0>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a21      	ldr	r2, [pc, #132]	; (8000c1c <SystemClock_Config+0xd0>)
 8000b96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b9a:	6013      	str	r3, [r2, #0]
 8000b9c:	4b1f      	ldr	r3, [pc, #124]	; (8000c1c <SystemClock_Config+0xd0>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ba4:	607b      	str	r3, [r7, #4]
 8000ba6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bac:	2301      	movs	r3, #1
 8000bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bb0:	2310      	movs	r3, #16
 8000bb2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000bbc:	2308      	movs	r3, #8
 8000bbe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000bc0:	2332      	movs	r3, #50	; 0x32
 8000bc2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000bc8:	2307      	movs	r3, #7
 8000bca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bcc:	f107 0320 	add.w	r3, r7, #32
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f002 f819 	bl	8002c08 <HAL_RCC_OscConfig>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000bdc:	f000 fa06 	bl	8000fec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000be0:	230f      	movs	r3, #15
 8000be2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000be4:	2302      	movs	r3, #2
 8000be6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000be8:	2300      	movs	r3, #0
 8000bea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000bf0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000bf2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000bf6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000bf8:	f107 030c 	add.w	r3, r7, #12
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f002 fa7a 	bl	80030f8 <HAL_RCC_ClockConfig>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000c0a:	f000 f9ef 	bl	8000fec <Error_Handler>
  }
}
 8000c0e:	bf00      	nop
 8000c10:	3750      	adds	r7, #80	; 0x50
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40007000 	.word	0x40007000

08000c20 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c26:	463b      	mov	r3, r7
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c32:	4b21      	ldr	r3, [pc, #132]	; (8000cb8 <MX_ADC1_Init+0x98>)
 8000c34:	4a21      	ldr	r2, [pc, #132]	; (8000cbc <MX_ADC1_Init+0x9c>)
 8000c36:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000c38:	4b1f      	ldr	r3, [pc, #124]	; (8000cb8 <MX_ADC1_Init+0x98>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c3e:	4b1e      	ldr	r3, [pc, #120]	; (8000cb8 <MX_ADC1_Init+0x98>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000c44:	4b1c      	ldr	r3, [pc, #112]	; (8000cb8 <MX_ADC1_Init+0x98>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c4a:	4b1b      	ldr	r3, [pc, #108]	; (8000cb8 <MX_ADC1_Init+0x98>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c50:	4b19      	ldr	r3, [pc, #100]	; (8000cb8 <MX_ADC1_Init+0x98>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c58:	4b17      	ldr	r3, [pc, #92]	; (8000cb8 <MX_ADC1_Init+0x98>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c5e:	4b16      	ldr	r3, [pc, #88]	; (8000cb8 <MX_ADC1_Init+0x98>)
 8000c60:	4a17      	ldr	r2, [pc, #92]	; (8000cc0 <MX_ADC1_Init+0xa0>)
 8000c62:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c64:	4b14      	ldr	r3, [pc, #80]	; (8000cb8 <MX_ADC1_Init+0x98>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000c6a:	4b13      	ldr	r3, [pc, #76]	; (8000cb8 <MX_ADC1_Init+0x98>)
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c70:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <MX_ADC1_Init+0x98>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c78:	4b0f      	ldr	r3, [pc, #60]	; (8000cb8 <MX_ADC1_Init+0x98>)
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c7e:	480e      	ldr	r0, [pc, #56]	; (8000cb8 <MX_ADC1_Init+0x98>)
 8000c80:	f000 fea2 	bl	80019c8 <HAL_ADC_Init>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000c8a:	f000 f9af 	bl	8000fec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000c92:	2301      	movs	r3, #1
 8000c94:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c96:	2300      	movs	r3, #0
 8000c98:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c9a:	463b      	mov	r3, r7
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4806      	ldr	r0, [pc, #24]	; (8000cb8 <MX_ADC1_Init+0x98>)
 8000ca0:	f000 fed6 	bl	8001a50 <HAL_ADC_ConfigChannel>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000caa:	f000 f99f 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cae:	bf00      	nop
 8000cb0:	3710      	adds	r7, #16
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	200002a8 	.word	0x200002a8
 8000cbc:	40012000 	.word	0x40012000
 8000cc0:	0f000001 	.word	0x0f000001

08000cc4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b096      	sub	sp, #88	; 0x58
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	605a      	str	r2, [r3, #4]
 8000cd4:	609a      	str	r2, [r3, #8]
 8000cd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cd8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ce2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	605a      	str	r2, [r3, #4]
 8000cec:	609a      	str	r2, [r3, #8]
 8000cee:	60da      	str	r2, [r3, #12]
 8000cf0:	611a      	str	r2, [r3, #16]
 8000cf2:	615a      	str	r2, [r3, #20]
 8000cf4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000cf6:	1d3b      	adds	r3, r7, #4
 8000cf8:	2220      	movs	r2, #32
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f004 fc45 	bl	800558c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000d02:	4b3e      	ldr	r3, [pc, #248]	; (8000dfc <MX_TIM8_Init+0x138>)
 8000d04:	4a3e      	ldr	r2, [pc, #248]	; (8000e00 <MX_TIM8_Init+0x13c>)
 8000d06:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000d08:	4b3c      	ldr	r3, [pc, #240]	; (8000dfc <MX_TIM8_Init+0x138>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d0e:	4b3b      	ldr	r3, [pc, #236]	; (8000dfc <MX_TIM8_Init+0x138>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 104;
 8000d14:	4b39      	ldr	r3, [pc, #228]	; (8000dfc <MX_TIM8_Init+0x138>)
 8000d16:	2268      	movs	r2, #104	; 0x68
 8000d18:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d1a:	4b38      	ldr	r3, [pc, #224]	; (8000dfc <MX_TIM8_Init+0x138>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000d20:	4b36      	ldr	r3, [pc, #216]	; (8000dfc <MX_TIM8_Init+0x138>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d26:	4b35      	ldr	r3, [pc, #212]	; (8000dfc <MX_TIM8_Init+0x138>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000d2c:	4833      	ldr	r0, [pc, #204]	; (8000dfc <MX_TIM8_Init+0x138>)
 8000d2e:	f002 fc11 	bl	8003554 <HAL_TIM_Base_Init>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8000d38:	f000 f958 	bl	8000fec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d40:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000d42:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000d46:	4619      	mov	r1, r3
 8000d48:	482c      	ldr	r0, [pc, #176]	; (8000dfc <MX_TIM8_Init+0x138>)
 8000d4a:	f003 f981 	bl	8004050 <HAL_TIM_ConfigClockSource>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8000d54:	f000 f94a 	bl	8000fec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000d58:	4828      	ldr	r0, [pc, #160]	; (8000dfc <MX_TIM8_Init+0x138>)
 8000d5a:	f002 fcbb 	bl	80036d4 <HAL_TIM_PWM_Init>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8000d64:	f000 f942 	bl	8000fec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000d70:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d74:	4619      	mov	r1, r3
 8000d76:	4821      	ldr	r0, [pc, #132]	; (8000dfc <MX_TIM8_Init+0x138>)
 8000d78:	f003 fe3a 	bl	80049f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8000d82:	f000 f933 	bl	8000fec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d86:	2360      	movs	r3, #96	; 0x60
 8000d88:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d92:	2300      	movs	r3, #0
 8000d94:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d96:	2300      	movs	r3, #0
 8000d98:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000da2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da6:	2200      	movs	r2, #0
 8000da8:	4619      	mov	r1, r3
 8000daa:	4814      	ldr	r0, [pc, #80]	; (8000dfc <MX_TIM8_Init+0x138>)
 8000dac:	f003 f88e 	bl	8003ecc <HAL_TIM_PWM_ConfigChannel>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 8000db6:	f000 f919 	bl	8000fec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000dce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dd2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000dd8:	1d3b      	adds	r3, r7, #4
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4807      	ldr	r0, [pc, #28]	; (8000dfc <MX_TIM8_Init+0x138>)
 8000dde:	f003 fe83 	bl	8004ae8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8000de8:	f000 f900 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000dec:	4803      	ldr	r0, [pc, #12]	; (8000dfc <MX_TIM8_Init+0x138>)
 8000dee:	f000 fbf7 	bl	80015e0 <HAL_TIM_MspPostInit>

}
 8000df2:	bf00      	nop
 8000df4:	3758      	adds	r7, #88	; 0x58
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	20000200 	.word	0x20000200
 8000e00:	40010400 	.word	0x40010400

08000e04 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e08:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <MX_USART2_UART_Init+0x4c>)
 8000e0a:	4a12      	ldr	r2, [pc, #72]	; (8000e54 <MX_USART2_UART_Init+0x50>)
 8000e0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e0e:	4b10      	ldr	r3, [pc, #64]	; (8000e50 <MX_USART2_UART_Init+0x4c>)
 8000e10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e16:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <MX_USART2_UART_Init+0x4c>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e1c:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <MX_USART2_UART_Init+0x4c>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e22:	4b0b      	ldr	r3, [pc, #44]	; (8000e50 <MX_USART2_UART_Init+0x4c>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e28:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <MX_USART2_UART_Init+0x4c>)
 8000e2a:	220c      	movs	r2, #12
 8000e2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e2e:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <MX_USART2_UART_Init+0x4c>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e34:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <MX_USART2_UART_Init+0x4c>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e3a:	4805      	ldr	r0, [pc, #20]	; (8000e50 <MX_USART2_UART_Init+0x4c>)
 8000e3c:	f003 feba 	bl	8004bb4 <HAL_UART_Init>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e46:	f000 f8d1 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	200002f0 	.word	0x200002f0
 8000e54:	40004400 	.word	0x40004400

08000e58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	607b      	str	r3, [r7, #4]
 8000e62:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <MX_DMA_Init+0x3c>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	4a0b      	ldr	r2, [pc, #44]	; (8000e94 <MX_DMA_Init+0x3c>)
 8000e68:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6e:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <MX_DMA_Init+0x3c>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e76:	607b      	str	r3, [r7, #4]
 8000e78:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	203a      	movs	r0, #58	; 0x3a
 8000e80:	f001 f8bc 	bl	8001ffc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000e84:	203a      	movs	r0, #58	; 0x3a
 8000e86:	f001 f8d5 	bl	8002034 <HAL_NVIC_EnableIRQ>

}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40023800 	.word	0x40023800

08000e98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08a      	sub	sp, #40	; 0x28
 8000e9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9e:	f107 0314 	add.w	r3, r7, #20
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	605a      	str	r2, [r3, #4]
 8000ea8:	609a      	str	r2, [r3, #8]
 8000eaa:	60da      	str	r2, [r3, #12]
 8000eac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	613b      	str	r3, [r7, #16]
 8000eb2:	4b41      	ldr	r3, [pc, #260]	; (8000fb8 <MX_GPIO_Init+0x120>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	4a40      	ldr	r2, [pc, #256]	; (8000fb8 <MX_GPIO_Init+0x120>)
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ebe:	4b3e      	ldr	r3, [pc, #248]	; (8000fb8 <MX_GPIO_Init+0x120>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	613b      	str	r3, [r7, #16]
 8000ec8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	60fb      	str	r3, [r7, #12]
 8000ece:	4b3a      	ldr	r3, [pc, #232]	; (8000fb8 <MX_GPIO_Init+0x120>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	4a39      	ldr	r2, [pc, #228]	; (8000fb8 <MX_GPIO_Init+0x120>)
 8000ed4:	f043 0302 	orr.w	r3, r3, #2
 8000ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eda:	4b37      	ldr	r3, [pc, #220]	; (8000fb8 <MX_GPIO_Init+0x120>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	f003 0302 	and.w	r3, r3, #2
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60bb      	str	r3, [r7, #8]
 8000eea:	4b33      	ldr	r3, [pc, #204]	; (8000fb8 <MX_GPIO_Init+0x120>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	4a32      	ldr	r2, [pc, #200]	; (8000fb8 <MX_GPIO_Init+0x120>)
 8000ef0:	f043 0304 	orr.w	r3, r3, #4
 8000ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef6:	4b30      	ldr	r3, [pc, #192]	; (8000fb8 <MX_GPIO_Init+0x120>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	f003 0304 	and.w	r3, r3, #4
 8000efe:	60bb      	str	r3, [r7, #8]
 8000f00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	607b      	str	r3, [r7, #4]
 8000f06:	4b2c      	ldr	r3, [pc, #176]	; (8000fb8 <MX_GPIO_Init+0x120>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	4a2b      	ldr	r2, [pc, #172]	; (8000fb8 <MX_GPIO_Init+0x120>)
 8000f0c:	f043 0308 	orr.w	r3, r3, #8
 8000f10:	6313      	str	r3, [r2, #48]	; 0x30
 8000f12:	4b29      	ldr	r3, [pc, #164]	; (8000fb8 <MX_GPIO_Init+0x120>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	f003 0308 	and.w	r3, r3, #8
 8000f1a:	607b      	str	r3, [r7, #4]
 8000f1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f44f 4130 	mov.w	r1, #45056	; 0xb000
 8000f24:	4825      	ldr	r0, [pc, #148]	; (8000fbc <MX_GPIO_Init+0x124>)
 8000f26:	f001 fe55 	bl	8002bd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, S0_Super_Pin|S1_Super_Pin|S2_Super_Pin, GPIO_PIN_RESET);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000f30:	4823      	ldr	r0, [pc, #140]	; (8000fc0 <MX_GPIO_Init+0x128>)
 8000f32:	f001 fe4f 	bl	8002bd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, S0_Pin_Pin|S1_Pin_Pin|S2_Pin_Pin, GPIO_PIN_RESET);
 8000f36:	2200      	movs	r2, #0
 8000f38:	2107      	movs	r1, #7
 8000f3a:	4822      	ldr	r0, [pc, #136]	; (8000fc4 <MX_GPIO_Init+0x12c>)
 8000f3c:	f001 fe4a 	bl	8002bd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8000f40:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8000f44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f46:	2301      	movs	r3, #1
 8000f48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f52:	f107 0314 	add.w	r3, r7, #20
 8000f56:	4619      	mov	r1, r3
 8000f58:	4818      	ldr	r0, [pc, #96]	; (8000fbc <MX_GPIO_Init+0x124>)
 8000f5a:	f001 fc87 	bl	800286c <HAL_GPIO_Init>

  /*Configure GPIO pins : S0_Super_Pin S1_Super_Pin S2_Super_Pin */
  GPIO_InitStruct.Pin = S0_Super_Pin|S1_Super_Pin|S2_Super_Pin;
 8000f5e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000f62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f64:	2301      	movs	r3, #1
 8000f66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f70:	f107 0314 	add.w	r3, r7, #20
 8000f74:	4619      	mov	r1, r3
 8000f76:	4812      	ldr	r0, [pc, #72]	; (8000fc0 <MX_GPIO_Init+0x128>)
 8000f78:	f001 fc78 	bl	800286c <HAL_GPIO_Init>

  /*Configure GPIO pins : S0_Pin_Pin S1_Pin_Pin S2_Pin_Pin */
  GPIO_InitStruct.Pin = S0_Pin_Pin|S1_Pin_Pin|S2_Pin_Pin;
 8000f7c:	2307      	movs	r3, #7
 8000f7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f80:	2301      	movs	r3, #1
 8000f82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f8c:	f107 0314 	add.w	r3, r7, #20
 8000f90:	4619      	mov	r1, r3
 8000f92:	480c      	ldr	r0, [pc, #48]	; (8000fc4 <MX_GPIO_Init+0x12c>)
 8000f94:	f001 fc6a 	bl	800286c <HAL_GPIO_Init>

  /*Configure GPIO pin : Mux_Input_Pin */
  GPIO_InitStruct.Pin = Mux_Input_Pin;
 8000f98:	2308      	movs	r3, #8
 8000f9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Mux_Input_GPIO_Port, &GPIO_InitStruct);
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4806      	ldr	r0, [pc, #24]	; (8000fc4 <MX_GPIO_Init+0x12c>)
 8000fac:	f001 fc5e 	bl	800286c <HAL_GPIO_Init>

}
 8000fb0:	bf00      	nop
 8000fb2:	3728      	adds	r7, #40	; 0x28
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	40023800 	.word	0x40023800
 8000fbc:	40020400 	.word	0x40020400
 8000fc0:	40020800 	.word	0x40020800
 8000fc4:	40020c00 	.word	0x40020c00

08000fc8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a04      	ldr	r2, [pc, #16]	; (8000fe8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d101      	bne.n	8000fde <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000fda:	f000 fcb1 	bl	8001940 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40010000 	.word	0x40010000

08000fec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ff0:	b672      	cpsid	i
}
 8000ff2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ff4:	e7fe      	b.n	8000ff4 <Error_Handler+0x8>
	...

08000ff8 <all_black_render>:
	}
	all_black_render();
}

void all_black_render(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
	uint_fast16_t var;
	for (var = 0; var < ENDBUFFERLED; ++var)
 8000ffe:	2300      	movs	r3, #0
 8001000:	607b      	str	r3, [r7, #4]
 8001002:	e01c      	b.n	800103e <all_black_render+0x46>
	{
		allrgb[var].blue=0;
 8001004:	4912      	ldr	r1, [pc, #72]	; (8001050 <all_black_render+0x58>)
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	4613      	mov	r3, r2
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	4413      	add	r3, r2
 800100e:	440b      	add	r3, r1
 8001010:	3301      	adds	r3, #1
 8001012:	2200      	movs	r2, #0
 8001014:	701a      	strb	r2, [r3, #0]
		allrgb[var].red=0;
 8001016:	490e      	ldr	r1, [pc, #56]	; (8001050 <all_black_render+0x58>)
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	4613      	mov	r3, r2
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	4413      	add	r3, r2
 8001020:	440b      	add	r3, r1
 8001022:	2200      	movs	r2, #0
 8001024:	701a      	strb	r2, [r3, #0]
		allrgb[var].green=0;
 8001026:	490a      	ldr	r1, [pc, #40]	; (8001050 <all_black_render+0x58>)
 8001028:	687a      	ldr	r2, [r7, #4]
 800102a:	4613      	mov	r3, r2
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	4413      	add	r3, r2
 8001030:	440b      	add	r3, r1
 8001032:	3302      	adds	r3, #2
 8001034:	2200      	movs	r2, #0
 8001036:	701a      	strb	r2, [r3, #0]
	for (var = 0; var < ENDBUFFERLED; ++var)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3301      	adds	r3, #1
 800103c:	607b      	str	r3, [r7, #4]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2b79      	cmp	r3, #121	; 0x79
 8001042:	d9df      	bls.n	8001004 <all_black_render+0xc>
	}
	render_neopixel();
 8001044:	f000 f838 	bl	80010b8 <render_neopixel>
}
 8001048:	bf00      	nop
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20000334 	.word	0x20000334

08001054 <render_one_led>:

void render_one_led(int index,uint8_t blue,uint8_t red,uint8_t green)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	4608      	mov	r0, r1
 800105e:	4611      	mov	r1, r2
 8001060:	461a      	mov	r2, r3
 8001062:	4603      	mov	r3, r0
 8001064:	70fb      	strb	r3, [r7, #3]
 8001066:	460b      	mov	r3, r1
 8001068:	70bb      	strb	r3, [r7, #2]
 800106a:	4613      	mov	r3, r2
 800106c:	707b      	strb	r3, [r7, #1]
	allrgb[STARTBUFFERLED + index].blue=blue;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	1c9a      	adds	r2, r3, #2
 8001072:	4910      	ldr	r1, [pc, #64]	; (80010b4 <render_one_led+0x60>)
 8001074:	4613      	mov	r3, r2
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	4413      	add	r3, r2
 800107a:	440b      	add	r3, r1
 800107c:	3301      	adds	r3, #1
 800107e:	78fa      	ldrb	r2, [r7, #3]
 8001080:	701a      	strb	r2, [r3, #0]
	allrgb[STARTBUFFERLED + index].red=red;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	1c9a      	adds	r2, r3, #2
 8001086:	490b      	ldr	r1, [pc, #44]	; (80010b4 <render_one_led+0x60>)
 8001088:	4613      	mov	r3, r2
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	4413      	add	r3, r2
 800108e:	440b      	add	r3, r1
 8001090:	78ba      	ldrb	r2, [r7, #2]
 8001092:	701a      	strb	r2, [r3, #0]
	allrgb[STARTBUFFERLED + index].green=green;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	1c9a      	adds	r2, r3, #2
 8001098:	4906      	ldr	r1, [pc, #24]	; (80010b4 <render_one_led+0x60>)
 800109a:	4613      	mov	r3, r2
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	4413      	add	r3, r2
 80010a0:	440b      	add	r3, r1
 80010a2:	3302      	adds	r3, #2
 80010a4:	787a      	ldrb	r2, [r7, #1]
 80010a6:	701a      	strb	r2, [r3, #0]
//	render_neopixel();
}
 80010a8:	bf00      	nop
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	20000334 	.word	0x20000334

080010b8 <render_neopixel>:
		render_neopixel();
	}
}

void render_neopixel()
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
	mode=START;
 80010be:	4b21      	ldr	r3, [pc, #132]	; (8001144 <render_neopixel+0x8c>)
 80010c0:	2201      	movs	r2, #1
 80010c2:	701a      	strb	r2, [r3, #0]
	uint_fast16_t var;
	if(type_of_led!=NOTDEFINE)
 80010c4:	4b20      	ldr	r3, [pc, #128]	; (8001148 <render_neopixel+0x90>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d035      	beq.n	8001138 <render_neopixel+0x80>
	{
		present_led_counting=0;
 80010cc:	4b1f      	ldr	r3, [pc, #124]	; (800114c <render_neopixel+0x94>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	701a      	strb	r2, [r3, #0]
		for (var = 0; var < 8; ++var)
 80010d2:	2300      	movs	r3, #0
 80010d4:	607b      	str	r3, [r7, #4]
 80010d6:	e025      	b.n	8001124 <render_neopixel+0x6c>
		{
			buffer[var]=0<<(((allrgb[0].green<<var)&0x80)>0);
 80010d8:	4a1d      	ldr	r2, [pc, #116]	; (8001150 <render_neopixel+0x98>)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2100      	movs	r1, #0
 80010de:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			buffer[var+8]=0<<(((allrgb[0].red<<var)&0x80)>0);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	3308      	adds	r3, #8
 80010e6:	4a1a      	ldr	r2, [pc, #104]	; (8001150 <render_neopixel+0x98>)
 80010e8:	2100      	movs	r1, #0
 80010ea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			buffer[var+16]=0<<(((allrgb[0].blue<<var)&0x80)>0);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	3310      	adds	r3, #16
 80010f2:	4a17      	ldr	r2, [pc, #92]	; (8001150 <render_neopixel+0x98>)
 80010f4:	2100      	movs	r1, #0
 80010f6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			buffer[var+24]=0<<(((allrgb[1].green<<var)&0x80)>0);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	3318      	adds	r3, #24
 80010fe:	4a14      	ldr	r2, [pc, #80]	; (8001150 <render_neopixel+0x98>)
 8001100:	2100      	movs	r1, #0
 8001102:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			buffer[var+32]=0<<(((allrgb[1].red<<var)&0x80)>0);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	3320      	adds	r3, #32
 800110a:	4a11      	ldr	r2, [pc, #68]	; (8001150 <render_neopixel+0x98>)
 800110c:	2100      	movs	r1, #0
 800110e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			buffer[var+40]=0<<(((allrgb[1].blue<<var)&0x80)>0);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	3328      	adds	r3, #40	; 0x28
 8001116:	4a0e      	ldr	r2, [pc, #56]	; (8001150 <render_neopixel+0x98>)
 8001118:	2100      	movs	r1, #0
 800111a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (var = 0; var < 8; ++var)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	3301      	adds	r3, #1
 8001122:	607b      	str	r3, [r7, #4]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2b07      	cmp	r3, #7
 8001128:	d9d6      	bls.n	80010d8 <render_neopixel+0x20>
		}
		HAL_TIM_PWM_Start_DMA(&htim8, TIM_CHANNEL_1, (uint32_t *)buffer, 48);
 800112a:	2330      	movs	r3, #48	; 0x30
 800112c:	4a08      	ldr	r2, [pc, #32]	; (8001150 <render_neopixel+0x98>)
 800112e:	2100      	movs	r1, #0
 8001130:	4808      	ldr	r0, [pc, #32]	; (8001154 <render_neopixel+0x9c>)
 8001132:	f002 fb29 	bl	8003788 <HAL_TIM_PWM_Start_DMA>
	}
	else
	{
		__NOP();
	}
}
 8001136:	e000      	b.n	800113a <render_neopixel+0x82>
		__NOP();
 8001138:	bf00      	nop
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	200001f1 	.word	0x200001f1
 8001148:	200001f0 	.word	0x200001f0
 800114c:	200001f2 	.word	0x200001f2
 8001150:	200004a4 	.word	0x200004a4
 8001154:	20000200 	.word	0x20000200

08001158 <prepare_next_led>:

void prepare_next_led(uint16_t position,uint8_t alpha)
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	460a      	mov	r2, r1
 8001162:	80fb      	strh	r3, [r7, #6]
 8001164:	4613      	mov	r3, r2
 8001166:	717b      	strb	r3, [r7, #5]
	uint_fast8_t var;
	++position;
 8001168:	88fb      	ldrh	r3, [r7, #6]
 800116a:	3301      	adds	r3, #1
 800116c:	80fb      	strh	r3, [r7, #6]
	if(alpha==1)
 800116e:	797b      	ldrb	r3, [r7, #5]
 8001170:	2b01      	cmp	r3, #1
 8001172:	d161      	bne.n	8001238 <prepare_next_led+0xe0>
	{
		for (var = 0; var < 8; ++var) {
 8001174:	2300      	movs	r3, #0
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	e05a      	b.n	8001230 <prepare_next_led+0xd8>
			buffer[var]=dutyoff<<(((allrgb[position].green<<var)&0x80)>0);
 800117a:	4b63      	ldr	r3, [pc, #396]	; (8001308 <prepare_next_led+0x1b0>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	4618      	mov	r0, r3
 8001180:	88fa      	ldrh	r2, [r7, #6]
 8001182:	4962      	ldr	r1, [pc, #392]	; (800130c <prepare_next_led+0x1b4>)
 8001184:	4613      	mov	r3, r2
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	4413      	add	r3, r2
 800118a:	440b      	add	r3, r1
 800118c:	3302      	adds	r3, #2
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	461a      	mov	r2, r3
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800119c:	2b00      	cmp	r3, #0
 800119e:	bfcc      	ite	gt
 80011a0:	2301      	movgt	r3, #1
 80011a2:	2300      	movle	r3, #0
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	fa00 f303 	lsl.w	r3, r0, r3
 80011aa:	b299      	uxth	r1, r3
 80011ac:	4a58      	ldr	r2, [pc, #352]	; (8001310 <prepare_next_led+0x1b8>)
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			buffer[var+8]=dutyoff<<(((allrgb[position].red<<var)&0x80)>0);
 80011b4:	4b54      	ldr	r3, [pc, #336]	; (8001308 <prepare_next_led+0x1b0>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	4618      	mov	r0, r3
 80011ba:	88fa      	ldrh	r2, [r7, #6]
 80011bc:	4953      	ldr	r1, [pc, #332]	; (800130c <prepare_next_led+0x1b4>)
 80011be:	4613      	mov	r3, r2
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	4413      	add	r3, r2
 80011c4:	440b      	add	r3, r1
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	461a      	mov	r2, r3
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	bfcc      	ite	gt
 80011d8:	2301      	movgt	r3, #1
 80011da:	2300      	movle	r3, #0
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	fa00 f203 	lsl.w	r2, r0, r3
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	3308      	adds	r3, #8
 80011e6:	b291      	uxth	r1, r2
 80011e8:	4a49      	ldr	r2, [pc, #292]	; (8001310 <prepare_next_led+0x1b8>)
 80011ea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			buffer[var+16]=dutyoff<<(((allrgb[position].blue<<var)&0x80)>0);
 80011ee:	4b46      	ldr	r3, [pc, #280]	; (8001308 <prepare_next_led+0x1b0>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	4618      	mov	r0, r3
 80011f4:	88fa      	ldrh	r2, [r7, #6]
 80011f6:	4945      	ldr	r1, [pc, #276]	; (800130c <prepare_next_led+0x1b4>)
 80011f8:	4613      	mov	r3, r2
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	4413      	add	r3, r2
 80011fe:	440b      	add	r3, r1
 8001200:	3301      	adds	r3, #1
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	461a      	mov	r2, r3
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001210:	2b00      	cmp	r3, #0
 8001212:	bfcc      	ite	gt
 8001214:	2301      	movgt	r3, #1
 8001216:	2300      	movle	r3, #0
 8001218:	b2db      	uxtb	r3, r3
 800121a:	fa00 f203 	lsl.w	r2, r0, r3
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	3310      	adds	r3, #16
 8001222:	b291      	uxth	r1, r2
 8001224:	4a3a      	ldr	r2, [pc, #232]	; (8001310 <prepare_next_led+0x1b8>)
 8001226:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (var = 0; var < 8; ++var) {
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	3301      	adds	r3, #1
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	2b07      	cmp	r3, #7
 8001234:	d9a1      	bls.n	800117a <prepare_next_led+0x22>
			buffer[var+24]=dutyoff<<(((allrgb[position].green<<var)&0x80)>0);
			buffer[var+32]=dutyoff<<(((allrgb[position].red<<var)&0x80)>0);
			buffer[var+40]=dutyoff<<(((allrgb[position].blue<<var)&0x80)>0);
		}
	}
}
 8001236:	e061      	b.n	80012fc <prepare_next_led+0x1a4>
		for (var = 0; var < 8; ++var) {
 8001238:	2300      	movs	r3, #0
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	e05b      	b.n	80012f6 <prepare_next_led+0x19e>
			buffer[var+24]=dutyoff<<(((allrgb[position].green<<var)&0x80)>0);
 800123e:	4b32      	ldr	r3, [pc, #200]	; (8001308 <prepare_next_led+0x1b0>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	4618      	mov	r0, r3
 8001244:	88fa      	ldrh	r2, [r7, #6]
 8001246:	4931      	ldr	r1, [pc, #196]	; (800130c <prepare_next_led+0x1b4>)
 8001248:	4613      	mov	r3, r2
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	4413      	add	r3, r2
 800124e:	440b      	add	r3, r1
 8001250:	3302      	adds	r3, #2
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	461a      	mov	r2, r3
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001260:	2b00      	cmp	r3, #0
 8001262:	bfcc      	ite	gt
 8001264:	2301      	movgt	r3, #1
 8001266:	2300      	movle	r3, #0
 8001268:	b2db      	uxtb	r3, r3
 800126a:	fa00 f203 	lsl.w	r2, r0, r3
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	3318      	adds	r3, #24
 8001272:	b291      	uxth	r1, r2
 8001274:	4a26      	ldr	r2, [pc, #152]	; (8001310 <prepare_next_led+0x1b8>)
 8001276:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			buffer[var+32]=dutyoff<<(((allrgb[position].red<<var)&0x80)>0);
 800127a:	4b23      	ldr	r3, [pc, #140]	; (8001308 <prepare_next_led+0x1b0>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	4618      	mov	r0, r3
 8001280:	88fa      	ldrh	r2, [r7, #6]
 8001282:	4922      	ldr	r1, [pc, #136]	; (800130c <prepare_next_led+0x1b4>)
 8001284:	4613      	mov	r3, r2
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	4413      	add	r3, r2
 800128a:	440b      	add	r3, r1
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	461a      	mov	r2, r3
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800129a:	2b00      	cmp	r3, #0
 800129c:	bfcc      	ite	gt
 800129e:	2301      	movgt	r3, #1
 80012a0:	2300      	movle	r3, #0
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	fa00 f203 	lsl.w	r2, r0, r3
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	3320      	adds	r3, #32
 80012ac:	b291      	uxth	r1, r2
 80012ae:	4a18      	ldr	r2, [pc, #96]	; (8001310 <prepare_next_led+0x1b8>)
 80012b0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			buffer[var+40]=dutyoff<<(((allrgb[position].blue<<var)&0x80)>0);
 80012b4:	4b14      	ldr	r3, [pc, #80]	; (8001308 <prepare_next_led+0x1b0>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	4618      	mov	r0, r3
 80012ba:	88fa      	ldrh	r2, [r7, #6]
 80012bc:	4913      	ldr	r1, [pc, #76]	; (800130c <prepare_next_led+0x1b4>)
 80012be:	4613      	mov	r3, r2
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	4413      	add	r3, r2
 80012c4:	440b      	add	r3, r1
 80012c6:	3301      	adds	r3, #1
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	461a      	mov	r2, r3
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	bfcc      	ite	gt
 80012da:	2301      	movgt	r3, #1
 80012dc:	2300      	movle	r3, #0
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	fa00 f203 	lsl.w	r2, r0, r3
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	3328      	adds	r3, #40	; 0x28
 80012e8:	b291      	uxth	r1, r2
 80012ea:	4a09      	ldr	r2, [pc, #36]	; (8001310 <prepare_next_led+0x1b8>)
 80012ec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (var = 0; var < 8; ++var) {
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	3301      	adds	r3, #1
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	2b07      	cmp	r3, #7
 80012fa:	d9a0      	bls.n	800123e <prepare_next_led+0xe6>
}
 80012fc:	bf00      	nop
 80012fe:	3714      	adds	r7, #20
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	20000062 	.word	0x20000062
 800130c:	20000334 	.word	0x20000334
 8001310:	200004a4 	.word	0x200004a4

08001314 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
	uint_fast8_t var;
	if(present_led_counting+2<numbers_of_led)
 800131c:	4b25      	ldr	r3, [pc, #148]	; (80013b4 <HAL_TIM_PWM_PulseFinishedCallback+0xa0>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	3302      	adds	r3, #2
 8001322:	4a25      	ldr	r2, [pc, #148]	; (80013b8 <HAL_TIM_PWM_PulseFinishedCallback+0xa4>)
 8001324:	8812      	ldrh	r2, [r2, #0]
 8001326:	4293      	cmp	r3, r2
 8001328:	da0d      	bge.n	8001346 <HAL_TIM_PWM_PulseFinishedCallback+0x32>
	{
		++present_led_counting;
 800132a:	4b22      	ldr	r3, [pc, #136]	; (80013b4 <HAL_TIM_PWM_PulseFinishedCallback+0xa0>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	3301      	adds	r3, #1
 8001330:	b2da      	uxtb	r2, r3
 8001332:	4b20      	ldr	r3, [pc, #128]	; (80013b4 <HAL_TIM_PWM_PulseFinishedCallback+0xa0>)
 8001334:	701a      	strb	r2, [r3, #0]
		prepare_next_led(present_led_counting,0);
 8001336:	4b1f      	ldr	r3, [pc, #124]	; (80013b4 <HAL_TIM_PWM_PulseFinishedCallback+0xa0>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	b29b      	uxth	r3, r3
 800133c:	2100      	movs	r1, #0
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff ff0a 	bl	8001158 <prepare_next_led>
	{
		enable_transmit=0;
		mode=HALT;
		HAL_TIM_PWM_Stop_DMA(&htim8, TIM_CHANNEL_1);
	}
}
 8001344:	e032      	b.n	80013ac <HAL_TIM_PWM_PulseFinishedCallback+0x98>
	else if(present_led_counting<numbers_of_led)
 8001346:	4b1b      	ldr	r3, [pc, #108]	; (80013b4 <HAL_TIM_PWM_PulseFinishedCallback+0xa0>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	b29a      	uxth	r2, r3
 800134c:	4b1a      	ldr	r3, [pc, #104]	; (80013b8 <HAL_TIM_PWM_PulseFinishedCallback+0xa4>)
 800134e:	881b      	ldrh	r3, [r3, #0]
 8001350:	429a      	cmp	r2, r3
 8001352:	d221      	bcs.n	8001398 <HAL_TIM_PWM_PulseFinishedCallback+0x84>
		++present_led_counting;
 8001354:	4b17      	ldr	r3, [pc, #92]	; (80013b4 <HAL_TIM_PWM_PulseFinishedCallback+0xa0>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	3301      	adds	r3, #1
 800135a:	b2da      	uxtb	r2, r3
 800135c:	4b15      	ldr	r3, [pc, #84]	; (80013b4 <HAL_TIM_PWM_PulseFinishedCallback+0xa0>)
 800135e:	701a      	strb	r2, [r3, #0]
		for (var = 0; var < 8; ++var) {
 8001360:	2300      	movs	r3, #0
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	e014      	b.n	8001390 <HAL_TIM_PWM_PulseFinishedCallback+0x7c>
			buffer[var+24]=0;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	3318      	adds	r3, #24
 800136a:	4a14      	ldr	r2, [pc, #80]	; (80013bc <HAL_TIM_PWM_PulseFinishedCallback+0xa8>)
 800136c:	2100      	movs	r1, #0
 800136e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			buffer[var+32]=0;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	3320      	adds	r3, #32
 8001376:	4a11      	ldr	r2, [pc, #68]	; (80013bc <HAL_TIM_PWM_PulseFinishedCallback+0xa8>)
 8001378:	2100      	movs	r1, #0
 800137a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			buffer[var+40]=0;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	3328      	adds	r3, #40	; 0x28
 8001382:	4a0e      	ldr	r2, [pc, #56]	; (80013bc <HAL_TIM_PWM_PulseFinishedCallback+0xa8>)
 8001384:	2100      	movs	r1, #0
 8001386:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (var = 0; var < 8; ++var) {
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	3301      	adds	r3, #1
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	2b07      	cmp	r3, #7
 8001394:	d9e7      	bls.n	8001366 <HAL_TIM_PWM_PulseFinishedCallback+0x52>
}
 8001396:	e009      	b.n	80013ac <HAL_TIM_PWM_PulseFinishedCallback+0x98>
		enable_transmit=0;
 8001398:	4b09      	ldr	r3, [pc, #36]	; (80013c0 <HAL_TIM_PWM_PulseFinishedCallback+0xac>)
 800139a:	2200      	movs	r2, #0
 800139c:	701a      	strb	r2, [r3, #0]
		mode=HALT;
 800139e:	4b09      	ldr	r3, [pc, #36]	; (80013c4 <HAL_TIM_PWM_PulseFinishedCallback+0xb0>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	701a      	strb	r2, [r3, #0]
		HAL_TIM_PWM_Stop_DMA(&htim8, TIM_CHANNEL_1);
 80013a4:	2100      	movs	r1, #0
 80013a6:	4808      	ldr	r0, [pc, #32]	; (80013c8 <HAL_TIM_PWM_PulseFinishedCallback+0xb4>)
 80013a8:	f002 fbb6 	bl	8003b18 <HAL_TIM_PWM_Stop_DMA>
}
 80013ac:	bf00      	nop
 80013ae:	3710      	adds	r7, #16
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	200001f2 	.word	0x200001f2
 80013b8:	20000060 	.word	0x20000060
 80013bc:	200004a4 	.word	0x200004a4
 80013c0:	200001f3 	.word	0x200001f3
 80013c4:	200001f1 	.word	0x200001f1
 80013c8:	20000200 	.word	0x20000200

080013cc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:

void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
	uint_fast8_t var;
	if(present_led_counting+2<numbers_of_led)
 80013d4:	4b1f      	ldr	r3, [pc, #124]	; (8001454 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x88>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	3302      	adds	r3, #2
 80013da:	4a1f      	ldr	r2, [pc, #124]	; (8001458 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x8c>)
 80013dc:	8812      	ldrh	r2, [r2, #0]
 80013de:	4293      	cmp	r3, r2
 80013e0:	da0d      	bge.n	80013fe <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x32>
	{
		++present_led_counting;
 80013e2:	4b1c      	ldr	r3, [pc, #112]	; (8001454 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x88>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	3301      	adds	r3, #1
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	4b1a      	ldr	r3, [pc, #104]	; (8001454 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x88>)
 80013ec:	701a      	strb	r2, [r3, #0]
		prepare_next_led(present_led_counting,1);
 80013ee:	4b19      	ldr	r3, [pc, #100]	; (8001454 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x88>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	2101      	movs	r1, #1
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff feae 	bl	8001158 <prepare_next_led>
			buffer[var]=0;
			buffer[var+8]=0;
			buffer[var+16]=0;
		}
	}
}
 80013fc:	e026      	b.n	800144c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x80>
	else if(present_led_counting<numbers_of_led)
 80013fe:	4b15      	ldr	r3, [pc, #84]	; (8001454 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x88>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	b29a      	uxth	r2, r3
 8001404:	4b14      	ldr	r3, [pc, #80]	; (8001458 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x8c>)
 8001406:	881b      	ldrh	r3, [r3, #0]
 8001408:	429a      	cmp	r2, r3
 800140a:	d21f      	bcs.n	800144c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x80>
		++present_led_counting;
 800140c:	4b11      	ldr	r3, [pc, #68]	; (8001454 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x88>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	3301      	adds	r3, #1
 8001412:	b2da      	uxtb	r2, r3
 8001414:	4b0f      	ldr	r3, [pc, #60]	; (8001454 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x88>)
 8001416:	701a      	strb	r2, [r3, #0]
		for (var = 0; var < 8; ++var) {
 8001418:	2300      	movs	r3, #0
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	e013      	b.n	8001446 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x7a>
			buffer[var]=0;
 800141e:	4a0f      	ldr	r2, [pc, #60]	; (800145c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x90>)
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	2100      	movs	r1, #0
 8001424:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			buffer[var+8]=0;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	3308      	adds	r3, #8
 800142c:	4a0b      	ldr	r2, [pc, #44]	; (800145c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x90>)
 800142e:	2100      	movs	r1, #0
 8001430:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			buffer[var+16]=0;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	3310      	adds	r3, #16
 8001438:	4a08      	ldr	r2, [pc, #32]	; (800145c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x90>)
 800143a:	2100      	movs	r1, #0
 800143c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (var = 0; var < 8; ++var) {
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	3301      	adds	r3, #1
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	2b07      	cmp	r3, #7
 800144a:	d9e8      	bls.n	800141e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x52>
}
 800144c:	bf00      	nop
 800144e:	3710      	adds	r7, #16
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	200001f2 	.word	0x200001f2
 8001458:	20000060 	.word	0x20000060
 800145c:	200004a4 	.word	0x200004a4

08001460 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	607b      	str	r3, [r7, #4]
 800146a:	4b10      	ldr	r3, [pc, #64]	; (80014ac <HAL_MspInit+0x4c>)
 800146c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146e:	4a0f      	ldr	r2, [pc, #60]	; (80014ac <HAL_MspInit+0x4c>)
 8001470:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001474:	6453      	str	r3, [r2, #68]	; 0x44
 8001476:	4b0d      	ldr	r3, [pc, #52]	; (80014ac <HAL_MspInit+0x4c>)
 8001478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800147e:	607b      	str	r3, [r7, #4]
 8001480:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	603b      	str	r3, [r7, #0]
 8001486:	4b09      	ldr	r3, [pc, #36]	; (80014ac <HAL_MspInit+0x4c>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	4a08      	ldr	r2, [pc, #32]	; (80014ac <HAL_MspInit+0x4c>)
 800148c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001490:	6413      	str	r3, [r2, #64]	; 0x40
 8001492:	4b06      	ldr	r3, [pc, #24]	; (80014ac <HAL_MspInit+0x4c>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800149a:	603b      	str	r3, [r7, #0]
 800149c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800149e:	2007      	movs	r0, #7
 80014a0:	f000 fda1 	bl	8001fe6 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014a4:	bf00      	nop
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40023800 	.word	0x40023800

080014b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08a      	sub	sp, #40	; 0x28
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b8:	f107 0314 	add.w	r3, r7, #20
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	60da      	str	r2, [r3, #12]
 80014c6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a17      	ldr	r2, [pc, #92]	; (800152c <HAL_ADC_MspInit+0x7c>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d127      	bne.n	8001522 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	613b      	str	r3, [r7, #16]
 80014d6:	4b16      	ldr	r3, [pc, #88]	; (8001530 <HAL_ADC_MspInit+0x80>)
 80014d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014da:	4a15      	ldr	r2, [pc, #84]	; (8001530 <HAL_ADC_MspInit+0x80>)
 80014dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e0:	6453      	str	r3, [r2, #68]	; 0x44
 80014e2:	4b13      	ldr	r3, [pc, #76]	; (8001530 <HAL_ADC_MspInit+0x80>)
 80014e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ea:	613b      	str	r3, [r7, #16]
 80014ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	4b0f      	ldr	r3, [pc, #60]	; (8001530 <HAL_ADC_MspInit+0x80>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	4a0e      	ldr	r2, [pc, #56]	; (8001530 <HAL_ADC_MspInit+0x80>)
 80014f8:	f043 0301 	orr.w	r3, r3, #1
 80014fc:	6313      	str	r3, [r2, #48]	; 0x30
 80014fe:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <HAL_ADC_MspInit+0x80>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800150a:	2302      	movs	r3, #2
 800150c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800150e:	2303      	movs	r3, #3
 8001510:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001516:	f107 0314 	add.w	r3, r7, #20
 800151a:	4619      	mov	r1, r3
 800151c:	4805      	ldr	r0, [pc, #20]	; (8001534 <HAL_ADC_MspInit+0x84>)
 800151e:	f001 f9a5 	bl	800286c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001522:	bf00      	nop
 8001524:	3728      	adds	r7, #40	; 0x28
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40012000 	.word	0x40012000
 8001530:	40023800 	.word	0x40023800
 8001534:	40020000 	.word	0x40020000

08001538 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a22      	ldr	r2, [pc, #136]	; (80015d0 <HAL_TIM_Base_MspInit+0x98>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d13e      	bne.n	80015c8 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	4b21      	ldr	r3, [pc, #132]	; (80015d4 <HAL_TIM_Base_MspInit+0x9c>)
 8001550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001552:	4a20      	ldr	r2, [pc, #128]	; (80015d4 <HAL_TIM_Base_MspInit+0x9c>)
 8001554:	f043 0302 	orr.w	r3, r3, #2
 8001558:	6453      	str	r3, [r2, #68]	; 0x44
 800155a:	4b1e      	ldr	r3, [pc, #120]	; (80015d4 <HAL_TIM_Base_MspInit+0x9c>)
 800155c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	68fb      	ldr	r3, [r7, #12]

    /* TIM8 DMA Init */
    /* TIM8_CH1 Init */
    hdma_tim8_ch1.Instance = DMA2_Stream2;
 8001566:	4b1c      	ldr	r3, [pc, #112]	; (80015d8 <HAL_TIM_Base_MspInit+0xa0>)
 8001568:	4a1c      	ldr	r2, [pc, #112]	; (80015dc <HAL_TIM_Base_MspInit+0xa4>)
 800156a:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch1.Init.Channel = DMA_CHANNEL_7;
 800156c:	4b1a      	ldr	r3, [pc, #104]	; (80015d8 <HAL_TIM_Base_MspInit+0xa0>)
 800156e:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001572:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001574:	4b18      	ldr	r3, [pc, #96]	; (80015d8 <HAL_TIM_Base_MspInit+0xa0>)
 8001576:	2240      	movs	r2, #64	; 0x40
 8001578:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800157a:	4b17      	ldr	r3, [pc, #92]	; (80015d8 <HAL_TIM_Base_MspInit+0xa0>)
 800157c:	2200      	movs	r2, #0
 800157e:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001580:	4b15      	ldr	r3, [pc, #84]	; (80015d8 <HAL_TIM_Base_MspInit+0xa0>)
 8001582:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001586:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001588:	4b13      	ldr	r3, [pc, #76]	; (80015d8 <HAL_TIM_Base_MspInit+0xa0>)
 800158a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800158e:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001590:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <HAL_TIM_Base_MspInit+0xa0>)
 8001592:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001596:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch1.Init.Mode = DMA_NORMAL;
 8001598:	4b0f      	ldr	r3, [pc, #60]	; (80015d8 <HAL_TIM_Base_MspInit+0xa0>)
 800159a:	2200      	movs	r2, #0
 800159c:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 800159e:	4b0e      	ldr	r3, [pc, #56]	; (80015d8 <HAL_TIM_Base_MspInit+0xa0>)
 80015a0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015a4:	621a      	str	r2, [r3, #32]
    hdma_tim8_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015a6:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <HAL_TIM_Base_MspInit+0xa0>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim8_ch1) != HAL_OK)
 80015ac:	480a      	ldr	r0, [pc, #40]	; (80015d8 <HAL_TIM_Base_MspInit+0xa0>)
 80015ae:	f000 fd4f 	bl	8002050 <HAL_DMA_Init>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 80015b8:	f7ff fd18 	bl	8000fec <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim8_ch1);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	4a06      	ldr	r2, [pc, #24]	; (80015d8 <HAL_TIM_Base_MspInit+0xa0>)
 80015c0:	625a      	str	r2, [r3, #36]	; 0x24
 80015c2:	4a05      	ldr	r2, [pc, #20]	; (80015d8 <HAL_TIM_Base_MspInit+0xa0>)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80015c8:	bf00      	nop
 80015ca:	3710      	adds	r7, #16
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40010400 	.word	0x40010400
 80015d4:	40023800 	.word	0x40023800
 80015d8:	20000248 	.word	0x20000248
 80015dc:	40026440 	.word	0x40026440

080015e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b088      	sub	sp, #32
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e8:	f107 030c 	add.w	r3, r7, #12
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	60da      	str	r2, [r3, #12]
 80015f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a12      	ldr	r2, [pc, #72]	; (8001648 <HAL_TIM_MspPostInit+0x68>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d11d      	bne.n	800163e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	60bb      	str	r3, [r7, #8]
 8001606:	4b11      	ldr	r3, [pc, #68]	; (800164c <HAL_TIM_MspPostInit+0x6c>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	4a10      	ldr	r2, [pc, #64]	; (800164c <HAL_TIM_MspPostInit+0x6c>)
 800160c:	f043 0304 	orr.w	r3, r3, #4
 8001610:	6313      	str	r3, [r2, #48]	; 0x30
 8001612:	4b0e      	ldr	r3, [pc, #56]	; (800164c <HAL_TIM_MspPostInit+0x6c>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	f003 0304 	and.w	r3, r3, #4
 800161a:	60bb      	str	r3, [r7, #8]
 800161c:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800161e:	2340      	movs	r3, #64	; 0x40
 8001620:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001622:	2302      	movs	r3, #2
 8001624:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162a:	2300      	movs	r3, #0
 800162c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800162e:	2303      	movs	r3, #3
 8001630:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001632:	f107 030c 	add.w	r3, r7, #12
 8001636:	4619      	mov	r1, r3
 8001638:	4805      	ldr	r0, [pc, #20]	; (8001650 <HAL_TIM_MspPostInit+0x70>)
 800163a:	f001 f917 	bl	800286c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800163e:	bf00      	nop
 8001640:	3720      	adds	r7, #32
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40010400 	.word	0x40010400
 800164c:	40023800 	.word	0x40023800
 8001650:	40020800 	.word	0x40020800

08001654 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b08a      	sub	sp, #40	; 0x28
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165c:	f107 0314 	add.w	r3, r7, #20
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	60da      	str	r2, [r3, #12]
 800166a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a19      	ldr	r2, [pc, #100]	; (80016d8 <HAL_UART_MspInit+0x84>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d12b      	bne.n	80016ce <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	613b      	str	r3, [r7, #16]
 800167a:	4b18      	ldr	r3, [pc, #96]	; (80016dc <HAL_UART_MspInit+0x88>)
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	4a17      	ldr	r2, [pc, #92]	; (80016dc <HAL_UART_MspInit+0x88>)
 8001680:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001684:	6413      	str	r3, [r2, #64]	; 0x40
 8001686:	4b15      	ldr	r3, [pc, #84]	; (80016dc <HAL_UART_MspInit+0x88>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168e:	613b      	str	r3, [r7, #16]
 8001690:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	60fb      	str	r3, [r7, #12]
 8001696:	4b11      	ldr	r3, [pc, #68]	; (80016dc <HAL_UART_MspInit+0x88>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	4a10      	ldr	r2, [pc, #64]	; (80016dc <HAL_UART_MspInit+0x88>)
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	6313      	str	r3, [r2, #48]	; 0x30
 80016a2:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <HAL_UART_MspInit+0x88>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016ae:	230c      	movs	r3, #12
 80016b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b2:	2302      	movs	r3, #2
 80016b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b6:	2300      	movs	r3, #0
 80016b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ba:	2303      	movs	r3, #3
 80016bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016be:	2307      	movs	r3, #7
 80016c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c2:	f107 0314 	add.w	r3, r7, #20
 80016c6:	4619      	mov	r1, r3
 80016c8:	4805      	ldr	r0, [pc, #20]	; (80016e0 <HAL_UART_MspInit+0x8c>)
 80016ca:	f001 f8cf 	bl	800286c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016ce:	bf00      	nop
 80016d0:	3728      	adds	r7, #40	; 0x28
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40004400 	.word	0x40004400
 80016dc:	40023800 	.word	0x40023800
 80016e0:	40020000 	.word	0x40020000

080016e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b08c      	sub	sp, #48	; 0x30
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80016ec:	2300      	movs	r3, #0
 80016ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80016f0:	2300      	movs	r3, #0
 80016f2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80016f4:	2200      	movs	r2, #0
 80016f6:	6879      	ldr	r1, [r7, #4]
 80016f8:	2019      	movs	r0, #25
 80016fa:	f000 fc7f 	bl	8001ffc <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80016fe:	2019      	movs	r0, #25
 8001700:	f000 fc98 	bl	8002034 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001704:	2300      	movs	r3, #0
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	4b1f      	ldr	r3, [pc, #124]	; (8001788 <HAL_InitTick+0xa4>)
 800170a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170c:	4a1e      	ldr	r2, [pc, #120]	; (8001788 <HAL_InitTick+0xa4>)
 800170e:	f043 0301 	orr.w	r3, r3, #1
 8001712:	6453      	str	r3, [r2, #68]	; 0x44
 8001714:	4b1c      	ldr	r3, [pc, #112]	; (8001788 <HAL_InitTick+0xa4>)
 8001716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001718:	f003 0301 	and.w	r3, r3, #1
 800171c:	60fb      	str	r3, [r7, #12]
 800171e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001720:	f107 0210 	add.w	r2, r7, #16
 8001724:	f107 0314 	add.w	r3, r7, #20
 8001728:	4611      	mov	r1, r2
 800172a:	4618      	mov	r0, r3
 800172c:	f001 fee0 	bl	80034f0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001730:	f001 feca 	bl	80034c8 <HAL_RCC_GetPCLK2Freq>
 8001734:	4603      	mov	r3, r0
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800173a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800173c:	4a13      	ldr	r2, [pc, #76]	; (800178c <HAL_InitTick+0xa8>)
 800173e:	fba2 2303 	umull	r2, r3, r2, r3
 8001742:	0c9b      	lsrs	r3, r3, #18
 8001744:	3b01      	subs	r3, #1
 8001746:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001748:	4b11      	ldr	r3, [pc, #68]	; (8001790 <HAL_InitTick+0xac>)
 800174a:	4a12      	ldr	r2, [pc, #72]	; (8001794 <HAL_InitTick+0xb0>)
 800174c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800174e:	4b10      	ldr	r3, [pc, #64]	; (8001790 <HAL_InitTick+0xac>)
 8001750:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001754:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001756:	4a0e      	ldr	r2, [pc, #56]	; (8001790 <HAL_InitTick+0xac>)
 8001758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800175a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800175c:	4b0c      	ldr	r3, [pc, #48]	; (8001790 <HAL_InitTick+0xac>)
 800175e:	2200      	movs	r2, #0
 8001760:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001762:	4b0b      	ldr	r3, [pc, #44]	; (8001790 <HAL_InitTick+0xac>)
 8001764:	2200      	movs	r2, #0
 8001766:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001768:	4809      	ldr	r0, [pc, #36]	; (8001790 <HAL_InitTick+0xac>)
 800176a:	f001 fef3 	bl	8003554 <HAL_TIM_Base_Init>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d104      	bne.n	800177e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001774:	4806      	ldr	r0, [pc, #24]	; (8001790 <HAL_InitTick+0xac>)
 8001776:	f001 ff3d 	bl	80035f4 <HAL_TIM_Base_Start_IT>
 800177a:	4603      	mov	r3, r0
 800177c:	e000      	b.n	8001780 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
}
 8001780:	4618      	mov	r0, r3
 8001782:	3730      	adds	r7, #48	; 0x30
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	40023800 	.word	0x40023800
 800178c:	431bde83 	.word	0x431bde83
 8001790:	20000508 	.word	0x20000508
 8001794:	40010000 	.word	0x40010000

08001798 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800179c:	e7fe      	b.n	800179c <NMI_Handler+0x4>

0800179e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017a2:	e7fe      	b.n	80017a2 <HardFault_Handler+0x4>

080017a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a8:	e7fe      	b.n	80017a8 <MemManage_Handler+0x4>

080017aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017aa:	b480      	push	{r7}
 80017ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ae:	e7fe      	b.n	80017ae <BusFault_Handler+0x4>

080017b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017b4:	e7fe      	b.n	80017b4 <UsageFault_Handler+0x4>

080017b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017d2:	b480      	push	{r7}
 80017d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
	...

080017f0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017f4:	4802      	ldr	r0, [pc, #8]	; (8001800 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80017f6:	f002 fa61 	bl	8003cbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000508 	.word	0x20000508

08001804 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch1);
 8001808:	4802      	ldr	r0, [pc, #8]	; (8001814 <DMA2_Stream2_IRQHandler+0x10>)
 800180a:	f000 fdb9 	bl	8002380 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20000248 	.word	0x20000248

08001818 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001820:	4a14      	ldr	r2, [pc, #80]	; (8001874 <_sbrk+0x5c>)
 8001822:	4b15      	ldr	r3, [pc, #84]	; (8001878 <_sbrk+0x60>)
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800182c:	4b13      	ldr	r3, [pc, #76]	; (800187c <_sbrk+0x64>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d102      	bne.n	800183a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001834:	4b11      	ldr	r3, [pc, #68]	; (800187c <_sbrk+0x64>)
 8001836:	4a12      	ldr	r2, [pc, #72]	; (8001880 <_sbrk+0x68>)
 8001838:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800183a:	4b10      	ldr	r3, [pc, #64]	; (800187c <_sbrk+0x64>)
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4413      	add	r3, r2
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	429a      	cmp	r2, r3
 8001846:	d207      	bcs.n	8001858 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001848:	f003 fe76 	bl	8005538 <__errno>
 800184c:	4603      	mov	r3, r0
 800184e:	220c      	movs	r2, #12
 8001850:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001852:	f04f 33ff 	mov.w	r3, #4294967295
 8001856:	e009      	b.n	800186c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001858:	4b08      	ldr	r3, [pc, #32]	; (800187c <_sbrk+0x64>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800185e:	4b07      	ldr	r3, [pc, #28]	; (800187c <_sbrk+0x64>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4413      	add	r3, r2
 8001866:	4a05      	ldr	r2, [pc, #20]	; (800187c <_sbrk+0x64>)
 8001868:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800186a:	68fb      	ldr	r3, [r7, #12]
}
 800186c:	4618      	mov	r0, r3
 800186e:	3718      	adds	r7, #24
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	20020000 	.word	0x20020000
 8001878:	00000400 	.word	0x00000400
 800187c:	200001f4 	.word	0x200001f4
 8001880:	20000568 	.word	0x20000568

08001884 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001888:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <SystemInit+0x20>)
 800188a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800188e:	4a05      	ldr	r2, [pc, #20]	; (80018a4 <SystemInit+0x20>)
 8001890:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001894:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	e000ed00 	.word	0xe000ed00

080018a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80018a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018ac:	480d      	ldr	r0, [pc, #52]	; (80018e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018ae:	490e      	ldr	r1, [pc, #56]	; (80018e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018b0:	4a0e      	ldr	r2, [pc, #56]	; (80018ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018b4:	e002      	b.n	80018bc <LoopCopyDataInit>

080018b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ba:	3304      	adds	r3, #4

080018bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018c0:	d3f9      	bcc.n	80018b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018c2:	4a0b      	ldr	r2, [pc, #44]	; (80018f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018c4:	4c0b      	ldr	r4, [pc, #44]	; (80018f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80018c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018c8:	e001      	b.n	80018ce <LoopFillZerobss>

080018ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018cc:	3204      	adds	r2, #4

080018ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018d0:	d3fb      	bcc.n	80018ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80018d2:	f7ff ffd7 	bl	8001884 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018d6:	f003 fe35 	bl	8005544 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018da:	f7ff f91d 	bl	8000b18 <main>
  bx  lr    
 80018de:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80018e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018e8:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 80018ec:	08005eb0 	.word	0x08005eb0
  ldr r2, =_sbss
 80018f0:	200000d4 	.word	0x200000d4
  ldr r4, =_ebss
 80018f4:	20000564 	.word	0x20000564

080018f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018f8:	e7fe      	b.n	80018f8 <ADC_IRQHandler>
	...

080018fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001900:	4b0e      	ldr	r3, [pc, #56]	; (800193c <HAL_Init+0x40>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a0d      	ldr	r2, [pc, #52]	; (800193c <HAL_Init+0x40>)
 8001906:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800190a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800190c:	4b0b      	ldr	r3, [pc, #44]	; (800193c <HAL_Init+0x40>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a0a      	ldr	r2, [pc, #40]	; (800193c <HAL_Init+0x40>)
 8001912:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001916:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001918:	4b08      	ldr	r3, [pc, #32]	; (800193c <HAL_Init+0x40>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a07      	ldr	r2, [pc, #28]	; (800193c <HAL_Init+0x40>)
 800191e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001922:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001924:	2003      	movs	r0, #3
 8001926:	f000 fb5e 	bl	8001fe6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800192a:	2000      	movs	r0, #0
 800192c:	f7ff feda 	bl	80016e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001930:	f7ff fd96 	bl	8001460 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	40023c00 	.word	0x40023c00

08001940 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001944:	4b06      	ldr	r3, [pc, #24]	; (8001960 <HAL_IncTick+0x20>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	461a      	mov	r2, r3
 800194a:	4b06      	ldr	r3, [pc, #24]	; (8001964 <HAL_IncTick+0x24>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4413      	add	r3, r2
 8001950:	4a04      	ldr	r2, [pc, #16]	; (8001964 <HAL_IncTick+0x24>)
 8001952:	6013      	str	r3, [r2, #0]
}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	2000006c 	.word	0x2000006c
 8001964:	20000550 	.word	0x20000550

08001968 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  return uwTick;
 800196c:	4b03      	ldr	r3, [pc, #12]	; (800197c <HAL_GetTick+0x14>)
 800196e:	681b      	ldr	r3, [r3, #0]
}
 8001970:	4618      	mov	r0, r3
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	20000550 	.word	0x20000550

08001980 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001988:	f7ff ffee 	bl	8001968 <HAL_GetTick>
 800198c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001998:	d005      	beq.n	80019a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800199a:	4b0a      	ldr	r3, [pc, #40]	; (80019c4 <HAL_Delay+0x44>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	461a      	mov	r2, r3
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	4413      	add	r3, r2
 80019a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019a6:	bf00      	nop
 80019a8:	f7ff ffde 	bl	8001968 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d8f7      	bhi.n	80019a8 <HAL_Delay+0x28>
  {
  }
}
 80019b8:	bf00      	nop
 80019ba:	bf00      	nop
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	2000006c 	.word	0x2000006c

080019c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019d0:	2300      	movs	r3, #0
 80019d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d101      	bne.n	80019de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e033      	b.n	8001a46 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d109      	bne.n	80019fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7ff fd62 	bl	80014b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fe:	f003 0310 	and.w	r3, r3, #16
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d118      	bne.n	8001a38 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a0e:	f023 0302 	bic.w	r3, r3, #2
 8001a12:	f043 0202 	orr.w	r2, r3, #2
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f000 f93a 	bl	8001c94 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2a:	f023 0303 	bic.w	r3, r3, #3
 8001a2e:	f043 0201 	orr.w	r2, r3, #1
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	641a      	str	r2, [r3, #64]	; 0x40
 8001a36:	e001      	b.n	8001a3c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
	...

08001a50 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d101      	bne.n	8001a6c <HAL_ADC_ConfigChannel+0x1c>
 8001a68:	2302      	movs	r3, #2
 8001a6a:	e105      	b.n	8001c78 <HAL_ADC_ConfigChannel+0x228>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2b09      	cmp	r3, #9
 8001a7a:	d925      	bls.n	8001ac8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	68d9      	ldr	r1, [r3, #12]
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	461a      	mov	r2, r3
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	4413      	add	r3, r2
 8001a90:	3b1e      	subs	r3, #30
 8001a92:	2207      	movs	r2, #7
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	43da      	mvns	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	400a      	ands	r2, r1
 8001aa0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	68d9      	ldr	r1, [r3, #12]
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	689a      	ldr	r2, [r3, #8]
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	4403      	add	r3, r0
 8001aba:	3b1e      	subs	r3, #30
 8001abc:	409a      	lsls	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	430a      	orrs	r2, r1
 8001ac4:	60da      	str	r2, [r3, #12]
 8001ac6:	e022      	b.n	8001b0e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	6919      	ldr	r1, [r3, #16]
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	4413      	add	r3, r2
 8001adc:	2207      	movs	r2, #7
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	43da      	mvns	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	400a      	ands	r2, r1
 8001aea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	6919      	ldr	r1, [r3, #16]
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	689a      	ldr	r2, [r3, #8]
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	4618      	mov	r0, r3
 8001afe:	4603      	mov	r3, r0
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	4403      	add	r3, r0
 8001b04:	409a      	lsls	r2, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	2b06      	cmp	r3, #6
 8001b14:	d824      	bhi.n	8001b60 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685a      	ldr	r2, [r3, #4]
 8001b20:	4613      	mov	r3, r2
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	4413      	add	r3, r2
 8001b26:	3b05      	subs	r3, #5
 8001b28:	221f      	movs	r2, #31
 8001b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2e:	43da      	mvns	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	400a      	ands	r2, r1
 8001b36:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	4618      	mov	r0, r3
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685a      	ldr	r2, [r3, #4]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	4413      	add	r3, r2
 8001b50:	3b05      	subs	r3, #5
 8001b52:	fa00 f203 	lsl.w	r2, r0, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	635a      	str	r2, [r3, #52]	; 0x34
 8001b5e:	e04c      	b.n	8001bfa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	2b0c      	cmp	r3, #12
 8001b66:	d824      	bhi.n	8001bb2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685a      	ldr	r2, [r3, #4]
 8001b72:	4613      	mov	r3, r2
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	4413      	add	r3, r2
 8001b78:	3b23      	subs	r3, #35	; 0x23
 8001b7a:	221f      	movs	r2, #31
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	43da      	mvns	r2, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	400a      	ands	r2, r1
 8001b88:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	4618      	mov	r0, r3
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685a      	ldr	r2, [r3, #4]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	4413      	add	r3, r2
 8001ba2:	3b23      	subs	r3, #35	; 0x23
 8001ba4:	fa00 f203 	lsl.w	r2, r0, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	430a      	orrs	r2, r1
 8001bae:	631a      	str	r2, [r3, #48]	; 0x30
 8001bb0:	e023      	b.n	8001bfa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685a      	ldr	r2, [r3, #4]
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	4413      	add	r3, r2
 8001bc2:	3b41      	subs	r3, #65	; 0x41
 8001bc4:	221f      	movs	r2, #31
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	43da      	mvns	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	400a      	ands	r2, r1
 8001bd2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	4618      	mov	r0, r3
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685a      	ldr	r2, [r3, #4]
 8001be6:	4613      	mov	r3, r2
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	4413      	add	r3, r2
 8001bec:	3b41      	subs	r3, #65	; 0x41
 8001bee:	fa00 f203 	lsl.w	r2, r0, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bfa:	4b22      	ldr	r3, [pc, #136]	; (8001c84 <HAL_ADC_ConfigChannel+0x234>)
 8001bfc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a21      	ldr	r2, [pc, #132]	; (8001c88 <HAL_ADC_ConfigChannel+0x238>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d109      	bne.n	8001c1c <HAL_ADC_ConfigChannel+0x1cc>
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2b12      	cmp	r3, #18
 8001c0e:	d105      	bne.n	8001c1c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a19      	ldr	r2, [pc, #100]	; (8001c88 <HAL_ADC_ConfigChannel+0x238>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d123      	bne.n	8001c6e <HAL_ADC_ConfigChannel+0x21e>
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2b10      	cmp	r3, #16
 8001c2c:	d003      	beq.n	8001c36 <HAL_ADC_ConfigChannel+0x1e6>
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2b11      	cmp	r3, #17
 8001c34:	d11b      	bne.n	8001c6e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2b10      	cmp	r3, #16
 8001c48:	d111      	bne.n	8001c6e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c4a:	4b10      	ldr	r3, [pc, #64]	; (8001c8c <HAL_ADC_ConfigChannel+0x23c>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a10      	ldr	r2, [pc, #64]	; (8001c90 <HAL_ADC_ConfigChannel+0x240>)
 8001c50:	fba2 2303 	umull	r2, r3, r2, r3
 8001c54:	0c9a      	lsrs	r2, r3, #18
 8001c56:	4613      	mov	r3, r2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	4413      	add	r3, r2
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c60:	e002      	b.n	8001c68 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	3b01      	subs	r3, #1
 8001c66:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d1f9      	bne.n	8001c62 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001c76:	2300      	movs	r3, #0
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3714      	adds	r7, #20
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr
 8001c84:	40012300 	.word	0x40012300
 8001c88:	40012000 	.word	0x40012000
 8001c8c:	20000064 	.word	0x20000064
 8001c90:	431bde83 	.word	0x431bde83

08001c94 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c9c:	4b79      	ldr	r3, [pc, #484]	; (8001e84 <ADC_Init+0x1f0>)
 8001c9e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	685a      	ldr	r2, [r3, #4]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	431a      	orrs	r2, r3
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	685a      	ldr	r2, [r3, #4]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001cc8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	6859      	ldr	r1, [r3, #4]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	691b      	ldr	r3, [r3, #16]
 8001cd4:	021a      	lsls	r2, r3, #8
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	685a      	ldr	r2, [r3, #4]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001cec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	6859      	ldr	r1, [r3, #4]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689a      	ldr	r2, [r3, #8]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	689a      	ldr	r2, [r3, #8]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d0e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	6899      	ldr	r1, [r3, #8]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	68da      	ldr	r2, [r3, #12]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d26:	4a58      	ldr	r2, [pc, #352]	; (8001e88 <ADC_Init+0x1f4>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d022      	beq.n	8001d72 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	689a      	ldr	r2, [r3, #8]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d3a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	6899      	ldr	r1, [r3, #8]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	689a      	ldr	r2, [r3, #8]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d5c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	6899      	ldr	r1, [r3, #8]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	609a      	str	r2, [r3, #8]
 8001d70:	e00f      	b.n	8001d92 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	689a      	ldr	r2, [r3, #8]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	689a      	ldr	r2, [r3, #8]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d90:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	689a      	ldr	r2, [r3, #8]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f022 0202 	bic.w	r2, r2, #2
 8001da0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	6899      	ldr	r1, [r3, #8]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	7e1b      	ldrb	r3, [r3, #24]
 8001dac:	005a      	lsls	r2, r3, #1
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	430a      	orrs	r2, r1
 8001db4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d01b      	beq.n	8001df8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	685a      	ldr	r2, [r3, #4]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001dce:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	685a      	ldr	r2, [r3, #4]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001dde:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	6859      	ldr	r1, [r3, #4]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dea:	3b01      	subs	r3, #1
 8001dec:	035a      	lsls	r2, r3, #13
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	430a      	orrs	r2, r1
 8001df4:	605a      	str	r2, [r3, #4]
 8001df6:	e007      	b.n	8001e08 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	685a      	ldr	r2, [r3, #4]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e06:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001e16:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	69db      	ldr	r3, [r3, #28]
 8001e22:	3b01      	subs	r3, #1
 8001e24:	051a      	lsls	r2, r3, #20
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	689a      	ldr	r2, [r3, #8]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	6899      	ldr	r1, [r3, #8]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e4a:	025a      	lsls	r2, r3, #9
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	430a      	orrs	r2, r1
 8001e52:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	689a      	ldr	r2, [r3, #8]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	6899      	ldr	r1, [r3, #8]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	695b      	ldr	r3, [r3, #20]
 8001e6e:	029a      	lsls	r2, r3, #10
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	430a      	orrs	r2, r1
 8001e76:	609a      	str	r2, [r3, #8]
}
 8001e78:	bf00      	nop
 8001e7a:	3714      	adds	r7, #20
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	40012300 	.word	0x40012300
 8001e88:	0f000001 	.word	0x0f000001

08001e8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f003 0307 	and.w	r3, r3, #7
 8001e9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e9c:	4b0c      	ldr	r3, [pc, #48]	; (8001ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ea2:	68ba      	ldr	r2, [r7, #8]
 8001ea4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001eb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001eb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ebc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ebe:	4a04      	ldr	r2, [pc, #16]	; (8001ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	60d3      	str	r3, [r2, #12]
}
 8001ec4:	bf00      	nop
 8001ec6:	3714      	adds	r7, #20
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr
 8001ed0:	e000ed00 	.word	0xe000ed00

08001ed4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ed8:	4b04      	ldr	r3, [pc, #16]	; (8001eec <__NVIC_GetPriorityGrouping+0x18>)
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	0a1b      	lsrs	r3, r3, #8
 8001ede:	f003 0307 	and.w	r3, r3, #7
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr
 8001eec:	e000ed00 	.word	0xe000ed00

08001ef0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	db0b      	blt.n	8001f1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f02:	79fb      	ldrb	r3, [r7, #7]
 8001f04:	f003 021f 	and.w	r2, r3, #31
 8001f08:	4907      	ldr	r1, [pc, #28]	; (8001f28 <__NVIC_EnableIRQ+0x38>)
 8001f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0e:	095b      	lsrs	r3, r3, #5
 8001f10:	2001      	movs	r0, #1
 8001f12:	fa00 f202 	lsl.w	r2, r0, r2
 8001f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f1a:	bf00      	nop
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	e000e100 	.word	0xe000e100

08001f2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	6039      	str	r1, [r7, #0]
 8001f36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	db0a      	blt.n	8001f56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	b2da      	uxtb	r2, r3
 8001f44:	490c      	ldr	r1, [pc, #48]	; (8001f78 <__NVIC_SetPriority+0x4c>)
 8001f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4a:	0112      	lsls	r2, r2, #4
 8001f4c:	b2d2      	uxtb	r2, r2
 8001f4e:	440b      	add	r3, r1
 8001f50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f54:	e00a      	b.n	8001f6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	b2da      	uxtb	r2, r3
 8001f5a:	4908      	ldr	r1, [pc, #32]	; (8001f7c <__NVIC_SetPriority+0x50>)
 8001f5c:	79fb      	ldrb	r3, [r7, #7]
 8001f5e:	f003 030f 	and.w	r3, r3, #15
 8001f62:	3b04      	subs	r3, #4
 8001f64:	0112      	lsls	r2, r2, #4
 8001f66:	b2d2      	uxtb	r2, r2
 8001f68:	440b      	add	r3, r1
 8001f6a:	761a      	strb	r2, [r3, #24]
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	e000e100 	.word	0xe000e100
 8001f7c:	e000ed00 	.word	0xe000ed00

08001f80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b089      	sub	sp, #36	; 0x24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f003 0307 	and.w	r3, r3, #7
 8001f92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	f1c3 0307 	rsb	r3, r3, #7
 8001f9a:	2b04      	cmp	r3, #4
 8001f9c:	bf28      	it	cs
 8001f9e:	2304      	movcs	r3, #4
 8001fa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	3304      	adds	r3, #4
 8001fa6:	2b06      	cmp	r3, #6
 8001fa8:	d902      	bls.n	8001fb0 <NVIC_EncodePriority+0x30>
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	3b03      	subs	r3, #3
 8001fae:	e000      	b.n	8001fb2 <NVIC_EncodePriority+0x32>
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbe:	43da      	mvns	r2, r3
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	401a      	ands	r2, r3
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fc8:	f04f 31ff 	mov.w	r1, #4294967295
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd2:	43d9      	mvns	r1, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd8:	4313      	orrs	r3, r2
         );
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3724      	adds	r7, #36	; 0x24
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b082      	sub	sp, #8
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f7ff ff4c 	bl	8001e8c <__NVIC_SetPriorityGrouping>
}
 8001ff4:	bf00      	nop
 8001ff6:	3708      	adds	r7, #8
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
 8002002:	4603      	mov	r3, r0
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
 8002008:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800200a:	2300      	movs	r3, #0
 800200c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800200e:	f7ff ff61 	bl	8001ed4 <__NVIC_GetPriorityGrouping>
 8002012:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	68b9      	ldr	r1, [r7, #8]
 8002018:	6978      	ldr	r0, [r7, #20]
 800201a:	f7ff ffb1 	bl	8001f80 <NVIC_EncodePriority>
 800201e:	4602      	mov	r2, r0
 8002020:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002024:	4611      	mov	r1, r2
 8002026:	4618      	mov	r0, r3
 8002028:	f7ff ff80 	bl	8001f2c <__NVIC_SetPriority>
}
 800202c:	bf00      	nop
 800202e:	3718      	adds	r7, #24
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	4603      	mov	r3, r0
 800203c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800203e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff ff54 	bl	8001ef0 <__NVIC_EnableIRQ>
}
 8002048:	bf00      	nop
 800204a:	3708      	adds	r7, #8
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002058:	2300      	movs	r3, #0
 800205a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800205c:	f7ff fc84 	bl	8001968 <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d101      	bne.n	800206c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e099      	b.n	80021a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2202      	movs	r2, #2
 8002070:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2200      	movs	r2, #0
 8002078:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f022 0201 	bic.w	r2, r2, #1
 800208a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800208c:	e00f      	b.n	80020ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800208e:	f7ff fc6b 	bl	8001968 <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b05      	cmp	r3, #5
 800209a:	d908      	bls.n	80020ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2220      	movs	r2, #32
 80020a0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2203      	movs	r2, #3
 80020a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e078      	b.n	80021a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0301 	and.w	r3, r3, #1
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d1e8      	bne.n	800208e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80020c4:	697a      	ldr	r2, [r7, #20]
 80020c6:	4b38      	ldr	r3, [pc, #224]	; (80021a8 <HAL_DMA_Init+0x158>)
 80020c8:	4013      	ands	r3, r2
 80020ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685a      	ldr	r2, [r3, #4]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	691b      	ldr	r3, [r3, #16]
 80020e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a1b      	ldr	r3, [r3, #32]
 80020f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020fa:	697a      	ldr	r2, [r7, #20]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002104:	2b04      	cmp	r3, #4
 8002106:	d107      	bne.n	8002118 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002110:	4313      	orrs	r3, r2
 8002112:	697a      	ldr	r2, [r7, #20]
 8002114:	4313      	orrs	r3, r2
 8002116:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	697a      	ldr	r2, [r7, #20]
 800211e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	695b      	ldr	r3, [r3, #20]
 8002126:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	f023 0307 	bic.w	r3, r3, #7
 800212e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002134:	697a      	ldr	r2, [r7, #20]
 8002136:	4313      	orrs	r3, r2
 8002138:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213e:	2b04      	cmp	r3, #4
 8002140:	d117      	bne.n	8002172 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002146:	697a      	ldr	r2, [r7, #20]
 8002148:	4313      	orrs	r3, r2
 800214a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002150:	2b00      	cmp	r3, #0
 8002152:	d00e      	beq.n	8002172 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f000 fb0d 	bl	8002774 <DMA_CheckFifoParam>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d008      	beq.n	8002172 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2240      	movs	r2, #64	; 0x40
 8002164:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2201      	movs	r2, #1
 800216a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800216e:	2301      	movs	r3, #1
 8002170:	e016      	b.n	80021a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	697a      	ldr	r2, [r7, #20]
 8002178:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f000 fac4 	bl	8002708 <DMA_CalcBaseAndBitshift>
 8002180:	4603      	mov	r3, r0
 8002182:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002188:	223f      	movs	r2, #63	; 0x3f
 800218a:	409a      	lsls	r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2201      	movs	r2, #1
 800219a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800219e:	2300      	movs	r3, #0
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3718      	adds	r7, #24
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	f010803f 	.word	0xf010803f

080021ac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
 80021b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021ba:	2300      	movs	r3, #0
 80021bc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d101      	bne.n	80021d2 <HAL_DMA_Start_IT+0x26>
 80021ce:	2302      	movs	r3, #2
 80021d0:	e040      	b.n	8002254 <HAL_DMA_Start_IT+0xa8>
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2201      	movs	r2, #1
 80021d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d12f      	bne.n	8002246 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2202      	movs	r2, #2
 80021ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2200      	movs	r2, #0
 80021f2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	68b9      	ldr	r1, [r7, #8]
 80021fa:	68f8      	ldr	r0, [r7, #12]
 80021fc:	f000 fa56 	bl	80026ac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002204:	223f      	movs	r2, #63	; 0x3f
 8002206:	409a      	lsls	r2, r3
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f042 0216 	orr.w	r2, r2, #22
 800221a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002220:	2b00      	cmp	r3, #0
 8002222:	d007      	beq.n	8002234 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f042 0208 	orr.w	r2, r2, #8
 8002232:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f042 0201 	orr.w	r2, r2, #1
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	e005      	b.n	8002252 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800224e:	2302      	movs	r3, #2
 8002250:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002252:	7dfb      	ldrb	r3, [r7, #23]
}
 8002254:	4618      	mov	r0, r3
 8002256:	3718      	adds	r7, #24
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002268:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800226a:	f7ff fb7d 	bl	8001968 <HAL_GetTick>
 800226e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002276:	b2db      	uxtb	r3, r3
 8002278:	2b02      	cmp	r3, #2
 800227a:	d008      	beq.n	800228e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2280      	movs	r2, #128	; 0x80
 8002280:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e052      	b.n	8002334 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f022 0216 	bic.w	r2, r2, #22
 800229c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	695a      	ldr	r2, [r3, #20]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022ac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d103      	bne.n	80022be <HAL_DMA_Abort+0x62>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d007      	beq.n	80022ce <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f022 0208 	bic.w	r2, r2, #8
 80022cc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f022 0201 	bic.w	r2, r2, #1
 80022dc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022de:	e013      	b.n	8002308 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022e0:	f7ff fb42 	bl	8001968 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b05      	cmp	r3, #5
 80022ec:	d90c      	bls.n	8002308 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2220      	movs	r2, #32
 80022f2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2203      	movs	r2, #3
 80022f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e015      	b.n	8002334 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1e4      	bne.n	80022e0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800231a:	223f      	movs	r2, #63	; 0x3f
 800231c:	409a      	lsls	r2, r3
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2201      	movs	r2, #1
 8002326:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	3710      	adds	r7, #16
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800234a:	b2db      	uxtb	r3, r3
 800234c:	2b02      	cmp	r3, #2
 800234e:	d004      	beq.n	800235a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2280      	movs	r2, #128	; 0x80
 8002354:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e00c      	b.n	8002374 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2205      	movs	r2, #5
 800235e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f022 0201 	bic.w	r2, r2, #1
 8002370:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002388:	2300      	movs	r3, #0
 800238a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800238c:	4b92      	ldr	r3, [pc, #584]	; (80025d8 <HAL_DMA_IRQHandler+0x258>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a92      	ldr	r2, [pc, #584]	; (80025dc <HAL_DMA_IRQHandler+0x25c>)
 8002392:	fba2 2303 	umull	r2, r3, r2, r3
 8002396:	0a9b      	lsrs	r3, r3, #10
 8002398:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800239e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023aa:	2208      	movs	r2, #8
 80023ac:	409a      	lsls	r2, r3
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	4013      	ands	r3, r2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d01a      	beq.n	80023ec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0304 	and.w	r3, r3, #4
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d013      	beq.n	80023ec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f022 0204 	bic.w	r2, r2, #4
 80023d2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023d8:	2208      	movs	r2, #8
 80023da:	409a      	lsls	r2, r3
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e4:	f043 0201 	orr.w	r2, r3, #1
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f0:	2201      	movs	r2, #1
 80023f2:	409a      	lsls	r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	4013      	ands	r3, r2
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d012      	beq.n	8002422 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002406:	2b00      	cmp	r3, #0
 8002408:	d00b      	beq.n	8002422 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800240e:	2201      	movs	r2, #1
 8002410:	409a      	lsls	r2, r3
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800241a:	f043 0202 	orr.w	r2, r3, #2
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002426:	2204      	movs	r2, #4
 8002428:	409a      	lsls	r2, r3
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	4013      	ands	r3, r2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d012      	beq.n	8002458 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d00b      	beq.n	8002458 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002444:	2204      	movs	r2, #4
 8002446:	409a      	lsls	r2, r3
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002450:	f043 0204 	orr.w	r2, r3, #4
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800245c:	2210      	movs	r2, #16
 800245e:	409a      	lsls	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	4013      	ands	r3, r2
 8002464:	2b00      	cmp	r3, #0
 8002466:	d043      	beq.n	80024f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0308 	and.w	r3, r3, #8
 8002472:	2b00      	cmp	r3, #0
 8002474:	d03c      	beq.n	80024f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800247a:	2210      	movs	r2, #16
 800247c:	409a      	lsls	r2, r3
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d018      	beq.n	80024c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d108      	bne.n	80024b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d024      	beq.n	80024f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	4798      	blx	r3
 80024ae:	e01f      	b.n	80024f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d01b      	beq.n	80024f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	4798      	blx	r3
 80024c0:	e016      	b.n	80024f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d107      	bne.n	80024e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f022 0208 	bic.w	r2, r2, #8
 80024de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d003      	beq.n	80024f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f4:	2220      	movs	r2, #32
 80024f6:	409a      	lsls	r2, r3
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	4013      	ands	r3, r2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f000 808e 	beq.w	800261e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0310 	and.w	r3, r3, #16
 800250c:	2b00      	cmp	r3, #0
 800250e:	f000 8086 	beq.w	800261e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002516:	2220      	movs	r2, #32
 8002518:	409a      	lsls	r2, r3
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002524:	b2db      	uxtb	r3, r3
 8002526:	2b05      	cmp	r3, #5
 8002528:	d136      	bne.n	8002598 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f022 0216 	bic.w	r2, r2, #22
 8002538:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	695a      	ldr	r2, [r3, #20]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002548:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	2b00      	cmp	r3, #0
 8002550:	d103      	bne.n	800255a <HAL_DMA_IRQHandler+0x1da>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002556:	2b00      	cmp	r3, #0
 8002558:	d007      	beq.n	800256a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f022 0208 	bic.w	r2, r2, #8
 8002568:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800256e:	223f      	movs	r2, #63	; 0x3f
 8002570:	409a      	lsls	r2, r3
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2201      	movs	r2, #1
 800257a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800258a:	2b00      	cmp	r3, #0
 800258c:	d07d      	beq.n	800268a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	4798      	blx	r3
        }
        return;
 8002596:	e078      	b.n	800268a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d01c      	beq.n	80025e0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d108      	bne.n	80025c6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d030      	beq.n	800261e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	4798      	blx	r3
 80025c4:	e02b      	b.n	800261e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d027      	beq.n	800261e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	4798      	blx	r3
 80025d6:	e022      	b.n	800261e <HAL_DMA_IRQHandler+0x29e>
 80025d8:	20000064 	.word	0x20000064
 80025dc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d10f      	bne.n	800260e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f022 0210 	bic.w	r2, r2, #16
 80025fc:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2201      	movs	r2, #1
 8002602:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002612:	2b00      	cmp	r3, #0
 8002614:	d003      	beq.n	800261e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002622:	2b00      	cmp	r3, #0
 8002624:	d032      	beq.n	800268c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	2b00      	cmp	r3, #0
 8002630:	d022      	beq.n	8002678 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2205      	movs	r2, #5
 8002636:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f022 0201 	bic.w	r2, r2, #1
 8002648:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	3301      	adds	r3, #1
 800264e:	60bb      	str	r3, [r7, #8]
 8002650:	697a      	ldr	r2, [r7, #20]
 8002652:	429a      	cmp	r2, r3
 8002654:	d307      	bcc.n	8002666 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0301 	and.w	r3, r3, #1
 8002660:	2b00      	cmp	r3, #0
 8002662:	d1f2      	bne.n	800264a <HAL_DMA_IRQHandler+0x2ca>
 8002664:	e000      	b.n	8002668 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002666:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800267c:	2b00      	cmp	r3, #0
 800267e:	d005      	beq.n	800268c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	4798      	blx	r3
 8002688:	e000      	b.n	800268c <HAL_DMA_IRQHandler+0x30c>
        return;
 800268a:	bf00      	nop
    }
  }
}
 800268c:	3718      	adds	r7, #24
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop

08002694 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	607a      	str	r2, [r7, #4]
 80026b8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80026c8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	683a      	ldr	r2, [r7, #0]
 80026d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	2b40      	cmp	r3, #64	; 0x40
 80026d8:	d108      	bne.n	80026ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68ba      	ldr	r2, [r7, #8]
 80026e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80026ea:	e007      	b.n	80026fc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68ba      	ldr	r2, [r7, #8]
 80026f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	60da      	str	r2, [r3, #12]
}
 80026fc:	bf00      	nop
 80026fe:	3714      	adds	r7, #20
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	b2db      	uxtb	r3, r3
 8002716:	3b10      	subs	r3, #16
 8002718:	4a14      	ldr	r2, [pc, #80]	; (800276c <DMA_CalcBaseAndBitshift+0x64>)
 800271a:	fba2 2303 	umull	r2, r3, r2, r3
 800271e:	091b      	lsrs	r3, r3, #4
 8002720:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002722:	4a13      	ldr	r2, [pc, #76]	; (8002770 <DMA_CalcBaseAndBitshift+0x68>)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	4413      	add	r3, r2
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	461a      	mov	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2b03      	cmp	r3, #3
 8002734:	d909      	bls.n	800274a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800273e:	f023 0303 	bic.w	r3, r3, #3
 8002742:	1d1a      	adds	r2, r3, #4
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	659a      	str	r2, [r3, #88]	; 0x58
 8002748:	e007      	b.n	800275a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002752:	f023 0303 	bic.w	r3, r3, #3
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800275e:	4618      	mov	r0, r3
 8002760:	3714      	adds	r7, #20
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	aaaaaaab 	.word	0xaaaaaaab
 8002770:	08005e64 	.word	0x08005e64

08002774 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800277c:	2300      	movs	r3, #0
 800277e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002784:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d11f      	bne.n	80027ce <DMA_CheckFifoParam+0x5a>
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	2b03      	cmp	r3, #3
 8002792:	d856      	bhi.n	8002842 <DMA_CheckFifoParam+0xce>
 8002794:	a201      	add	r2, pc, #4	; (adr r2, 800279c <DMA_CheckFifoParam+0x28>)
 8002796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800279a:	bf00      	nop
 800279c:	080027ad 	.word	0x080027ad
 80027a0:	080027bf 	.word	0x080027bf
 80027a4:	080027ad 	.word	0x080027ad
 80027a8:	08002843 	.word	0x08002843
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d046      	beq.n	8002846 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027bc:	e043      	b.n	8002846 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80027c6:	d140      	bne.n	800284a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027cc:	e03d      	b.n	800284a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027d6:	d121      	bne.n	800281c <DMA_CheckFifoParam+0xa8>
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	2b03      	cmp	r3, #3
 80027dc:	d837      	bhi.n	800284e <DMA_CheckFifoParam+0xda>
 80027de:	a201      	add	r2, pc, #4	; (adr r2, 80027e4 <DMA_CheckFifoParam+0x70>)
 80027e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027e4:	080027f5 	.word	0x080027f5
 80027e8:	080027fb 	.word	0x080027fb
 80027ec:	080027f5 	.word	0x080027f5
 80027f0:	0800280d 	.word	0x0800280d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	73fb      	strb	r3, [r7, #15]
      break;
 80027f8:	e030      	b.n	800285c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d025      	beq.n	8002852 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800280a:	e022      	b.n	8002852 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002810:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002814:	d11f      	bne.n	8002856 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800281a:	e01c      	b.n	8002856 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	2b02      	cmp	r3, #2
 8002820:	d903      	bls.n	800282a <DMA_CheckFifoParam+0xb6>
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	2b03      	cmp	r3, #3
 8002826:	d003      	beq.n	8002830 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002828:	e018      	b.n	800285c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	73fb      	strb	r3, [r7, #15]
      break;
 800282e:	e015      	b.n	800285c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002834:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d00e      	beq.n	800285a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	73fb      	strb	r3, [r7, #15]
      break;
 8002840:	e00b      	b.n	800285a <DMA_CheckFifoParam+0xe6>
      break;
 8002842:	bf00      	nop
 8002844:	e00a      	b.n	800285c <DMA_CheckFifoParam+0xe8>
      break;
 8002846:	bf00      	nop
 8002848:	e008      	b.n	800285c <DMA_CheckFifoParam+0xe8>
      break;
 800284a:	bf00      	nop
 800284c:	e006      	b.n	800285c <DMA_CheckFifoParam+0xe8>
      break;
 800284e:	bf00      	nop
 8002850:	e004      	b.n	800285c <DMA_CheckFifoParam+0xe8>
      break;
 8002852:	bf00      	nop
 8002854:	e002      	b.n	800285c <DMA_CheckFifoParam+0xe8>
      break;   
 8002856:	bf00      	nop
 8002858:	e000      	b.n	800285c <DMA_CheckFifoParam+0xe8>
      break;
 800285a:	bf00      	nop
    }
  } 
  
  return status; 
 800285c:	7bfb      	ldrb	r3, [r7, #15]
}
 800285e:	4618      	mov	r0, r3
 8002860:	3714      	adds	r7, #20
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop

0800286c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800286c:	b480      	push	{r7}
 800286e:	b089      	sub	sp, #36	; 0x24
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002876:	2300      	movs	r3, #0
 8002878:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800287a:	2300      	movs	r3, #0
 800287c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800287e:	2300      	movs	r3, #0
 8002880:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002882:	2300      	movs	r3, #0
 8002884:	61fb      	str	r3, [r7, #28]
 8002886:	e16b      	b.n	8002b60 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002888:	2201      	movs	r2, #1
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	697a      	ldr	r2, [r7, #20]
 8002898:	4013      	ands	r3, r2
 800289a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	f040 815a 	bne.w	8002b5a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f003 0303 	and.w	r3, r3, #3
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d005      	beq.n	80028be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d130      	bne.n	8002920 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	2203      	movs	r2, #3
 80028ca:	fa02 f303 	lsl.w	r3, r2, r3
 80028ce:	43db      	mvns	r3, r3
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	4013      	ands	r3, r2
 80028d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	68da      	ldr	r2, [r3, #12]
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	fa02 f303 	lsl.w	r3, r2, r3
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	69ba      	ldr	r2, [r7, #24]
 80028ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028f4:	2201      	movs	r2, #1
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	43db      	mvns	r3, r3
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	4013      	ands	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	091b      	lsrs	r3, r3, #4
 800290a:	f003 0201 	and.w	r2, r3, #1
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	4313      	orrs	r3, r2
 8002918:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f003 0303 	and.w	r3, r3, #3
 8002928:	2b03      	cmp	r3, #3
 800292a:	d017      	beq.n	800295c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	2203      	movs	r2, #3
 8002938:	fa02 f303 	lsl.w	r3, r2, r3
 800293c:	43db      	mvns	r3, r3
 800293e:	69ba      	ldr	r2, [r7, #24]
 8002940:	4013      	ands	r3, r2
 8002942:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	689a      	ldr	r2, [r3, #8]
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	005b      	lsls	r3, r3, #1
 800294c:	fa02 f303 	lsl.w	r3, r2, r3
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	4313      	orrs	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f003 0303 	and.w	r3, r3, #3
 8002964:	2b02      	cmp	r3, #2
 8002966:	d123      	bne.n	80029b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	08da      	lsrs	r2, r3, #3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	3208      	adds	r2, #8
 8002970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002974:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	f003 0307 	and.w	r3, r3, #7
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	220f      	movs	r2, #15
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	43db      	mvns	r3, r3
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	4013      	ands	r3, r2
 800298a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	691a      	ldr	r2, [r3, #16]
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	f003 0307 	and.w	r3, r3, #7
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	fa02 f303 	lsl.w	r3, r2, r3
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	4313      	orrs	r3, r2
 80029a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	08da      	lsrs	r2, r3, #3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	3208      	adds	r2, #8
 80029aa:	69b9      	ldr	r1, [r7, #24]
 80029ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	2203      	movs	r2, #3
 80029bc:	fa02 f303 	lsl.w	r3, r2, r3
 80029c0:	43db      	mvns	r3, r3
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	4013      	ands	r3, r2
 80029c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f003 0203 	and.w	r2, r3, #3
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	4313      	orrs	r3, r2
 80029dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f000 80b4 	beq.w	8002b5a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029f2:	2300      	movs	r3, #0
 80029f4:	60fb      	str	r3, [r7, #12]
 80029f6:	4b60      	ldr	r3, [pc, #384]	; (8002b78 <HAL_GPIO_Init+0x30c>)
 80029f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fa:	4a5f      	ldr	r2, [pc, #380]	; (8002b78 <HAL_GPIO_Init+0x30c>)
 80029fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a00:	6453      	str	r3, [r2, #68]	; 0x44
 8002a02:	4b5d      	ldr	r3, [pc, #372]	; (8002b78 <HAL_GPIO_Init+0x30c>)
 8002a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a0a:	60fb      	str	r3, [r7, #12]
 8002a0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a0e:	4a5b      	ldr	r2, [pc, #364]	; (8002b7c <HAL_GPIO_Init+0x310>)
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	089b      	lsrs	r3, r3, #2
 8002a14:	3302      	adds	r3, #2
 8002a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	f003 0303 	and.w	r3, r3, #3
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	220f      	movs	r2, #15
 8002a26:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2a:	43db      	mvns	r3, r3
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a52      	ldr	r2, [pc, #328]	; (8002b80 <HAL_GPIO_Init+0x314>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d02b      	beq.n	8002a92 <HAL_GPIO_Init+0x226>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a51      	ldr	r2, [pc, #324]	; (8002b84 <HAL_GPIO_Init+0x318>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d025      	beq.n	8002a8e <HAL_GPIO_Init+0x222>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a50      	ldr	r2, [pc, #320]	; (8002b88 <HAL_GPIO_Init+0x31c>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d01f      	beq.n	8002a8a <HAL_GPIO_Init+0x21e>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a4f      	ldr	r2, [pc, #316]	; (8002b8c <HAL_GPIO_Init+0x320>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d019      	beq.n	8002a86 <HAL_GPIO_Init+0x21a>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a4e      	ldr	r2, [pc, #312]	; (8002b90 <HAL_GPIO_Init+0x324>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d013      	beq.n	8002a82 <HAL_GPIO_Init+0x216>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a4d      	ldr	r2, [pc, #308]	; (8002b94 <HAL_GPIO_Init+0x328>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d00d      	beq.n	8002a7e <HAL_GPIO_Init+0x212>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a4c      	ldr	r2, [pc, #304]	; (8002b98 <HAL_GPIO_Init+0x32c>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d007      	beq.n	8002a7a <HAL_GPIO_Init+0x20e>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a4b      	ldr	r2, [pc, #300]	; (8002b9c <HAL_GPIO_Init+0x330>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d101      	bne.n	8002a76 <HAL_GPIO_Init+0x20a>
 8002a72:	2307      	movs	r3, #7
 8002a74:	e00e      	b.n	8002a94 <HAL_GPIO_Init+0x228>
 8002a76:	2308      	movs	r3, #8
 8002a78:	e00c      	b.n	8002a94 <HAL_GPIO_Init+0x228>
 8002a7a:	2306      	movs	r3, #6
 8002a7c:	e00a      	b.n	8002a94 <HAL_GPIO_Init+0x228>
 8002a7e:	2305      	movs	r3, #5
 8002a80:	e008      	b.n	8002a94 <HAL_GPIO_Init+0x228>
 8002a82:	2304      	movs	r3, #4
 8002a84:	e006      	b.n	8002a94 <HAL_GPIO_Init+0x228>
 8002a86:	2303      	movs	r3, #3
 8002a88:	e004      	b.n	8002a94 <HAL_GPIO_Init+0x228>
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	e002      	b.n	8002a94 <HAL_GPIO_Init+0x228>
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e000      	b.n	8002a94 <HAL_GPIO_Init+0x228>
 8002a92:	2300      	movs	r3, #0
 8002a94:	69fa      	ldr	r2, [r7, #28]
 8002a96:	f002 0203 	and.w	r2, r2, #3
 8002a9a:	0092      	lsls	r2, r2, #2
 8002a9c:	4093      	lsls	r3, r2
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002aa4:	4935      	ldr	r1, [pc, #212]	; (8002b7c <HAL_GPIO_Init+0x310>)
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	089b      	lsrs	r3, r3, #2
 8002aaa:	3302      	adds	r3, #2
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ab2:	4b3b      	ldr	r3, [pc, #236]	; (8002ba0 <HAL_GPIO_Init+0x334>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	43db      	mvns	r3, r3
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	4013      	ands	r3, r2
 8002ac0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d003      	beq.n	8002ad6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ad6:	4a32      	ldr	r2, [pc, #200]	; (8002ba0 <HAL_GPIO_Init+0x334>)
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002adc:	4b30      	ldr	r3, [pc, #192]	; (8002ba0 <HAL_GPIO_Init+0x334>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	43db      	mvns	r3, r3
 8002ae6:	69ba      	ldr	r2, [r7, #24]
 8002ae8:	4013      	ands	r3, r2
 8002aea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d003      	beq.n	8002b00 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b00:	4a27      	ldr	r2, [pc, #156]	; (8002ba0 <HAL_GPIO_Init+0x334>)
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b06:	4b26      	ldr	r3, [pc, #152]	; (8002ba0 <HAL_GPIO_Init+0x334>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	43db      	mvns	r3, r3
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	4013      	ands	r3, r2
 8002b14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d003      	beq.n	8002b2a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b2a:	4a1d      	ldr	r2, [pc, #116]	; (8002ba0 <HAL_GPIO_Init+0x334>)
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b30:	4b1b      	ldr	r3, [pc, #108]	; (8002ba0 <HAL_GPIO_Init+0x334>)
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	43db      	mvns	r3, r3
 8002b3a:	69ba      	ldr	r2, [r7, #24]
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d003      	beq.n	8002b54 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b54:	4a12      	ldr	r2, [pc, #72]	; (8002ba0 <HAL_GPIO_Init+0x334>)
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	61fb      	str	r3, [r7, #28]
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	2b0f      	cmp	r3, #15
 8002b64:	f67f ae90 	bls.w	8002888 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b68:	bf00      	nop
 8002b6a:	bf00      	nop
 8002b6c:	3724      	adds	r7, #36	; 0x24
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	40023800 	.word	0x40023800
 8002b7c:	40013800 	.word	0x40013800
 8002b80:	40020000 	.word	0x40020000
 8002b84:	40020400 	.word	0x40020400
 8002b88:	40020800 	.word	0x40020800
 8002b8c:	40020c00 	.word	0x40020c00
 8002b90:	40021000 	.word	0x40021000
 8002b94:	40021400 	.word	0x40021400
 8002b98:	40021800 	.word	0x40021800
 8002b9c:	40021c00 	.word	0x40021c00
 8002ba0:	40013c00 	.word	0x40013c00

08002ba4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b085      	sub	sp, #20
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	460b      	mov	r3, r1
 8002bae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	691a      	ldr	r2, [r3, #16]
 8002bb4:	887b      	ldrh	r3, [r7, #2]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d002      	beq.n	8002bc2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	73fb      	strb	r3, [r7, #15]
 8002bc0:	e001      	b.n	8002bc6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3714      	adds	r7, #20
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	460b      	mov	r3, r1
 8002bde:	807b      	strh	r3, [r7, #2]
 8002be0:	4613      	mov	r3, r2
 8002be2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002be4:	787b      	ldrb	r3, [r7, #1]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d003      	beq.n	8002bf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bea:	887a      	ldrh	r2, [r7, #2]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bf0:	e003      	b.n	8002bfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bf2:	887b      	ldrh	r3, [r7, #2]
 8002bf4:	041a      	lsls	r2, r3, #16
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	619a      	str	r2, [r3, #24]
}
 8002bfa:	bf00      	nop
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
	...

08002c08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b086      	sub	sp, #24
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d101      	bne.n	8002c1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e264      	b.n	80030e4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d075      	beq.n	8002d12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c26:	4ba3      	ldr	r3, [pc, #652]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f003 030c 	and.w	r3, r3, #12
 8002c2e:	2b04      	cmp	r3, #4
 8002c30:	d00c      	beq.n	8002c4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c32:	4ba0      	ldr	r3, [pc, #640]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c3a:	2b08      	cmp	r3, #8
 8002c3c:	d112      	bne.n	8002c64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c3e:	4b9d      	ldr	r3, [pc, #628]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c4a:	d10b      	bne.n	8002c64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c4c:	4b99      	ldr	r3, [pc, #612]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d05b      	beq.n	8002d10 <HAL_RCC_OscConfig+0x108>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d157      	bne.n	8002d10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e23f      	b.n	80030e4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c6c:	d106      	bne.n	8002c7c <HAL_RCC_OscConfig+0x74>
 8002c6e:	4b91      	ldr	r3, [pc, #580]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a90      	ldr	r2, [pc, #576]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002c74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c78:	6013      	str	r3, [r2, #0]
 8002c7a:	e01d      	b.n	8002cb8 <HAL_RCC_OscConfig+0xb0>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c84:	d10c      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x98>
 8002c86:	4b8b      	ldr	r3, [pc, #556]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a8a      	ldr	r2, [pc, #552]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002c8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c90:	6013      	str	r3, [r2, #0]
 8002c92:	4b88      	ldr	r3, [pc, #544]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a87      	ldr	r2, [pc, #540]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c9c:	6013      	str	r3, [r2, #0]
 8002c9e:	e00b      	b.n	8002cb8 <HAL_RCC_OscConfig+0xb0>
 8002ca0:	4b84      	ldr	r3, [pc, #528]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a83      	ldr	r2, [pc, #524]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002ca6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002caa:	6013      	str	r3, [r2, #0]
 8002cac:	4b81      	ldr	r3, [pc, #516]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a80      	ldr	r2, [pc, #512]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002cb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d013      	beq.n	8002ce8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc0:	f7fe fe52 	bl	8001968 <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cc6:	e008      	b.n	8002cda <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cc8:	f7fe fe4e 	bl	8001968 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b64      	cmp	r3, #100	; 0x64
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e204      	b.n	80030e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cda:	4b76      	ldr	r3, [pc, #472]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d0f0      	beq.n	8002cc8 <HAL_RCC_OscConfig+0xc0>
 8002ce6:	e014      	b.n	8002d12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce8:	f7fe fe3e 	bl	8001968 <HAL_GetTick>
 8002cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cee:	e008      	b.n	8002d02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cf0:	f7fe fe3a 	bl	8001968 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b64      	cmp	r3, #100	; 0x64
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e1f0      	b.n	80030e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d02:	4b6c      	ldr	r3, [pc, #432]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1f0      	bne.n	8002cf0 <HAL_RCC_OscConfig+0xe8>
 8002d0e:	e000      	b.n	8002d12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d063      	beq.n	8002de6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d1e:	4b65      	ldr	r3, [pc, #404]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f003 030c 	and.w	r3, r3, #12
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00b      	beq.n	8002d42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d2a:	4b62      	ldr	r3, [pc, #392]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d32:	2b08      	cmp	r3, #8
 8002d34:	d11c      	bne.n	8002d70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d36:	4b5f      	ldr	r3, [pc, #380]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d116      	bne.n	8002d70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d42:	4b5c      	ldr	r3, [pc, #368]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d005      	beq.n	8002d5a <HAL_RCC_OscConfig+0x152>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d001      	beq.n	8002d5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e1c4      	b.n	80030e4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d5a:	4b56      	ldr	r3, [pc, #344]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	4952      	ldr	r1, [pc, #328]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d6e:	e03a      	b.n	8002de6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d020      	beq.n	8002dba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d78:	4b4f      	ldr	r3, [pc, #316]	; (8002eb8 <HAL_RCC_OscConfig+0x2b0>)
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d7e:	f7fe fdf3 	bl	8001968 <HAL_GetTick>
 8002d82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d84:	e008      	b.n	8002d98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d86:	f7fe fdef 	bl	8001968 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d901      	bls.n	8002d98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e1a5      	b.n	80030e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d98:	4b46      	ldr	r3, [pc, #280]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0302 	and.w	r3, r3, #2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d0f0      	beq.n	8002d86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002da4:	4b43      	ldr	r3, [pc, #268]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	00db      	lsls	r3, r3, #3
 8002db2:	4940      	ldr	r1, [pc, #256]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	600b      	str	r3, [r1, #0]
 8002db8:	e015      	b.n	8002de6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dba:	4b3f      	ldr	r3, [pc, #252]	; (8002eb8 <HAL_RCC_OscConfig+0x2b0>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc0:	f7fe fdd2 	bl	8001968 <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dc8:	f7fe fdce 	bl	8001968 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e184      	b.n	80030e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dda:	4b36      	ldr	r3, [pc, #216]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1f0      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0308 	and.w	r3, r3, #8
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d030      	beq.n	8002e54 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d016      	beq.n	8002e28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dfa:	4b30      	ldr	r3, [pc, #192]	; (8002ebc <HAL_RCC_OscConfig+0x2b4>)
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e00:	f7fe fdb2 	bl	8001968 <HAL_GetTick>
 8002e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e06:	e008      	b.n	8002e1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e08:	f7fe fdae 	bl	8001968 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e164      	b.n	80030e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e1a:	4b26      	ldr	r3, [pc, #152]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002e1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d0f0      	beq.n	8002e08 <HAL_RCC_OscConfig+0x200>
 8002e26:	e015      	b.n	8002e54 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e28:	4b24      	ldr	r3, [pc, #144]	; (8002ebc <HAL_RCC_OscConfig+0x2b4>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e2e:	f7fe fd9b 	bl	8001968 <HAL_GetTick>
 8002e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e34:	e008      	b.n	8002e48 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e36:	f7fe fd97 	bl	8001968 <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d901      	bls.n	8002e48 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e14d      	b.n	80030e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e48:	4b1a      	ldr	r3, [pc, #104]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002e4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e4c:	f003 0302 	and.w	r3, r3, #2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d1f0      	bne.n	8002e36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0304 	and.w	r3, r3, #4
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f000 80a0 	beq.w	8002fa2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e62:	2300      	movs	r3, #0
 8002e64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e66:	4b13      	ldr	r3, [pc, #76]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d10f      	bne.n	8002e92 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e72:	2300      	movs	r3, #0
 8002e74:	60bb      	str	r3, [r7, #8]
 8002e76:	4b0f      	ldr	r3, [pc, #60]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7a:	4a0e      	ldr	r2, [pc, #56]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e80:	6413      	str	r3, [r2, #64]	; 0x40
 8002e82:	4b0c      	ldr	r3, [pc, #48]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e8a:	60bb      	str	r3, [r7, #8]
 8002e8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e92:	4b0b      	ldr	r3, [pc, #44]	; (8002ec0 <HAL_RCC_OscConfig+0x2b8>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d121      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e9e:	4b08      	ldr	r3, [pc, #32]	; (8002ec0 <HAL_RCC_OscConfig+0x2b8>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a07      	ldr	r2, [pc, #28]	; (8002ec0 <HAL_RCC_OscConfig+0x2b8>)
 8002ea4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ea8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eaa:	f7fe fd5d 	bl	8001968 <HAL_GetTick>
 8002eae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb0:	e011      	b.n	8002ed6 <HAL_RCC_OscConfig+0x2ce>
 8002eb2:	bf00      	nop
 8002eb4:	40023800 	.word	0x40023800
 8002eb8:	42470000 	.word	0x42470000
 8002ebc:	42470e80 	.word	0x42470e80
 8002ec0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ec4:	f7fe fd50 	bl	8001968 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e106      	b.n	80030e4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ed6:	4b85      	ldr	r3, [pc, #532]	; (80030ec <HAL_RCC_OscConfig+0x4e4>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d0f0      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d106      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x2f0>
 8002eea:	4b81      	ldr	r3, [pc, #516]	; (80030f0 <HAL_RCC_OscConfig+0x4e8>)
 8002eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eee:	4a80      	ldr	r2, [pc, #512]	; (80030f0 <HAL_RCC_OscConfig+0x4e8>)
 8002ef0:	f043 0301 	orr.w	r3, r3, #1
 8002ef4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ef6:	e01c      	b.n	8002f32 <HAL_RCC_OscConfig+0x32a>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	2b05      	cmp	r3, #5
 8002efe:	d10c      	bne.n	8002f1a <HAL_RCC_OscConfig+0x312>
 8002f00:	4b7b      	ldr	r3, [pc, #492]	; (80030f0 <HAL_RCC_OscConfig+0x4e8>)
 8002f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f04:	4a7a      	ldr	r2, [pc, #488]	; (80030f0 <HAL_RCC_OscConfig+0x4e8>)
 8002f06:	f043 0304 	orr.w	r3, r3, #4
 8002f0a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f0c:	4b78      	ldr	r3, [pc, #480]	; (80030f0 <HAL_RCC_OscConfig+0x4e8>)
 8002f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f10:	4a77      	ldr	r2, [pc, #476]	; (80030f0 <HAL_RCC_OscConfig+0x4e8>)
 8002f12:	f043 0301 	orr.w	r3, r3, #1
 8002f16:	6713      	str	r3, [r2, #112]	; 0x70
 8002f18:	e00b      	b.n	8002f32 <HAL_RCC_OscConfig+0x32a>
 8002f1a:	4b75      	ldr	r3, [pc, #468]	; (80030f0 <HAL_RCC_OscConfig+0x4e8>)
 8002f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f1e:	4a74      	ldr	r2, [pc, #464]	; (80030f0 <HAL_RCC_OscConfig+0x4e8>)
 8002f20:	f023 0301 	bic.w	r3, r3, #1
 8002f24:	6713      	str	r3, [r2, #112]	; 0x70
 8002f26:	4b72      	ldr	r3, [pc, #456]	; (80030f0 <HAL_RCC_OscConfig+0x4e8>)
 8002f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f2a:	4a71      	ldr	r2, [pc, #452]	; (80030f0 <HAL_RCC_OscConfig+0x4e8>)
 8002f2c:	f023 0304 	bic.w	r3, r3, #4
 8002f30:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d015      	beq.n	8002f66 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f3a:	f7fe fd15 	bl	8001968 <HAL_GetTick>
 8002f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f40:	e00a      	b.n	8002f58 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f42:	f7fe fd11 	bl	8001968 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d901      	bls.n	8002f58 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e0c5      	b.n	80030e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f58:	4b65      	ldr	r3, [pc, #404]	; (80030f0 <HAL_RCC_OscConfig+0x4e8>)
 8002f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d0ee      	beq.n	8002f42 <HAL_RCC_OscConfig+0x33a>
 8002f64:	e014      	b.n	8002f90 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f66:	f7fe fcff 	bl	8001968 <HAL_GetTick>
 8002f6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f6c:	e00a      	b.n	8002f84 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f6e:	f7fe fcfb 	bl	8001968 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d901      	bls.n	8002f84 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e0af      	b.n	80030e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f84:	4b5a      	ldr	r3, [pc, #360]	; (80030f0 <HAL_RCC_OscConfig+0x4e8>)
 8002f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1ee      	bne.n	8002f6e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f90:	7dfb      	ldrb	r3, [r7, #23]
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d105      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f96:	4b56      	ldr	r3, [pc, #344]	; (80030f0 <HAL_RCC_OscConfig+0x4e8>)
 8002f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9a:	4a55      	ldr	r2, [pc, #340]	; (80030f0 <HAL_RCC_OscConfig+0x4e8>)
 8002f9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fa0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	f000 809b 	beq.w	80030e2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fac:	4b50      	ldr	r3, [pc, #320]	; (80030f0 <HAL_RCC_OscConfig+0x4e8>)
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f003 030c 	and.w	r3, r3, #12
 8002fb4:	2b08      	cmp	r3, #8
 8002fb6:	d05c      	beq.n	8003072 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d141      	bne.n	8003044 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fc0:	4b4c      	ldr	r3, [pc, #304]	; (80030f4 <HAL_RCC_OscConfig+0x4ec>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc6:	f7fe fccf 	bl	8001968 <HAL_GetTick>
 8002fca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fcc:	e008      	b.n	8002fe0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fce:	f7fe fccb 	bl	8001968 <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e081      	b.n	80030e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fe0:	4b43      	ldr	r3, [pc, #268]	; (80030f0 <HAL_RCC_OscConfig+0x4e8>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1f0      	bne.n	8002fce <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	69da      	ldr	r2, [r3, #28]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a1b      	ldr	r3, [r3, #32]
 8002ff4:	431a      	orrs	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffa:	019b      	lsls	r3, r3, #6
 8002ffc:	431a      	orrs	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003002:	085b      	lsrs	r3, r3, #1
 8003004:	3b01      	subs	r3, #1
 8003006:	041b      	lsls	r3, r3, #16
 8003008:	431a      	orrs	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300e:	061b      	lsls	r3, r3, #24
 8003010:	4937      	ldr	r1, [pc, #220]	; (80030f0 <HAL_RCC_OscConfig+0x4e8>)
 8003012:	4313      	orrs	r3, r2
 8003014:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003016:	4b37      	ldr	r3, [pc, #220]	; (80030f4 <HAL_RCC_OscConfig+0x4ec>)
 8003018:	2201      	movs	r2, #1
 800301a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800301c:	f7fe fca4 	bl	8001968 <HAL_GetTick>
 8003020:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003022:	e008      	b.n	8003036 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003024:	f7fe fca0 	bl	8001968 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e056      	b.n	80030e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003036:	4b2e      	ldr	r3, [pc, #184]	; (80030f0 <HAL_RCC_OscConfig+0x4e8>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d0f0      	beq.n	8003024 <HAL_RCC_OscConfig+0x41c>
 8003042:	e04e      	b.n	80030e2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003044:	4b2b      	ldr	r3, [pc, #172]	; (80030f4 <HAL_RCC_OscConfig+0x4ec>)
 8003046:	2200      	movs	r2, #0
 8003048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800304a:	f7fe fc8d 	bl	8001968 <HAL_GetTick>
 800304e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003050:	e008      	b.n	8003064 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003052:	f7fe fc89 	bl	8001968 <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	2b02      	cmp	r3, #2
 800305e:	d901      	bls.n	8003064 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e03f      	b.n	80030e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003064:	4b22      	ldr	r3, [pc, #136]	; (80030f0 <HAL_RCC_OscConfig+0x4e8>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1f0      	bne.n	8003052 <HAL_RCC_OscConfig+0x44a>
 8003070:	e037      	b.n	80030e2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d101      	bne.n	800307e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e032      	b.n	80030e4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800307e:	4b1c      	ldr	r3, [pc, #112]	; (80030f0 <HAL_RCC_OscConfig+0x4e8>)
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	699b      	ldr	r3, [r3, #24]
 8003088:	2b01      	cmp	r3, #1
 800308a:	d028      	beq.n	80030de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003096:	429a      	cmp	r2, r3
 8003098:	d121      	bne.n	80030de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d11a      	bne.n	80030de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030ae:	4013      	ands	r3, r2
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030b4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d111      	bne.n	80030de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c4:	085b      	lsrs	r3, r3, #1
 80030c6:	3b01      	subs	r3, #1
 80030c8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d107      	bne.n	80030de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030da:	429a      	cmp	r2, r3
 80030dc:	d001      	beq.n	80030e2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e000      	b.n	80030e4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3718      	adds	r7, #24
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	40007000 	.word	0x40007000
 80030f0:	40023800 	.word	0x40023800
 80030f4:	42470060 	.word	0x42470060

080030f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d101      	bne.n	800310c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e0cc      	b.n	80032a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800310c:	4b68      	ldr	r3, [pc, #416]	; (80032b0 <HAL_RCC_ClockConfig+0x1b8>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0307 	and.w	r3, r3, #7
 8003114:	683a      	ldr	r2, [r7, #0]
 8003116:	429a      	cmp	r2, r3
 8003118:	d90c      	bls.n	8003134 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800311a:	4b65      	ldr	r3, [pc, #404]	; (80032b0 <HAL_RCC_ClockConfig+0x1b8>)
 800311c:	683a      	ldr	r2, [r7, #0]
 800311e:	b2d2      	uxtb	r2, r2
 8003120:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003122:	4b63      	ldr	r3, [pc, #396]	; (80032b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0307 	and.w	r3, r3, #7
 800312a:	683a      	ldr	r2, [r7, #0]
 800312c:	429a      	cmp	r2, r3
 800312e:	d001      	beq.n	8003134 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e0b8      	b.n	80032a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0302 	and.w	r3, r3, #2
 800313c:	2b00      	cmp	r3, #0
 800313e:	d020      	beq.n	8003182 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0304 	and.w	r3, r3, #4
 8003148:	2b00      	cmp	r3, #0
 800314a:	d005      	beq.n	8003158 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800314c:	4b59      	ldr	r3, [pc, #356]	; (80032b4 <HAL_RCC_ClockConfig+0x1bc>)
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	4a58      	ldr	r2, [pc, #352]	; (80032b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003152:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003156:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0308 	and.w	r3, r3, #8
 8003160:	2b00      	cmp	r3, #0
 8003162:	d005      	beq.n	8003170 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003164:	4b53      	ldr	r3, [pc, #332]	; (80032b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	4a52      	ldr	r2, [pc, #328]	; (80032b4 <HAL_RCC_ClockConfig+0x1bc>)
 800316a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800316e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003170:	4b50      	ldr	r3, [pc, #320]	; (80032b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	494d      	ldr	r1, [pc, #308]	; (80032b4 <HAL_RCC_ClockConfig+0x1bc>)
 800317e:	4313      	orrs	r3, r2
 8003180:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	2b00      	cmp	r3, #0
 800318c:	d044      	beq.n	8003218 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	2b01      	cmp	r3, #1
 8003194:	d107      	bne.n	80031a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003196:	4b47      	ldr	r3, [pc, #284]	; (80032b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d119      	bne.n	80031d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e07f      	b.n	80032a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d003      	beq.n	80031b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031b2:	2b03      	cmp	r3, #3
 80031b4:	d107      	bne.n	80031c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031b6:	4b3f      	ldr	r3, [pc, #252]	; (80032b4 <HAL_RCC_ClockConfig+0x1bc>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d109      	bne.n	80031d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e06f      	b.n	80032a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031c6:	4b3b      	ldr	r3, [pc, #236]	; (80032b4 <HAL_RCC_ClockConfig+0x1bc>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d101      	bne.n	80031d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e067      	b.n	80032a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031d6:	4b37      	ldr	r3, [pc, #220]	; (80032b4 <HAL_RCC_ClockConfig+0x1bc>)
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f023 0203 	bic.w	r2, r3, #3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	4934      	ldr	r1, [pc, #208]	; (80032b4 <HAL_RCC_ClockConfig+0x1bc>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031e8:	f7fe fbbe 	bl	8001968 <HAL_GetTick>
 80031ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ee:	e00a      	b.n	8003206 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031f0:	f7fe fbba 	bl	8001968 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80031fe:	4293      	cmp	r3, r2
 8003200:	d901      	bls.n	8003206 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e04f      	b.n	80032a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003206:	4b2b      	ldr	r3, [pc, #172]	; (80032b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f003 020c 	and.w	r2, r3, #12
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	429a      	cmp	r2, r3
 8003216:	d1eb      	bne.n	80031f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003218:	4b25      	ldr	r3, [pc, #148]	; (80032b0 <HAL_RCC_ClockConfig+0x1b8>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0307 	and.w	r3, r3, #7
 8003220:	683a      	ldr	r2, [r7, #0]
 8003222:	429a      	cmp	r2, r3
 8003224:	d20c      	bcs.n	8003240 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003226:	4b22      	ldr	r3, [pc, #136]	; (80032b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003228:	683a      	ldr	r2, [r7, #0]
 800322a:	b2d2      	uxtb	r2, r2
 800322c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800322e:	4b20      	ldr	r3, [pc, #128]	; (80032b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	683a      	ldr	r2, [r7, #0]
 8003238:	429a      	cmp	r2, r3
 800323a:	d001      	beq.n	8003240 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e032      	b.n	80032a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0304 	and.w	r3, r3, #4
 8003248:	2b00      	cmp	r3, #0
 800324a:	d008      	beq.n	800325e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800324c:	4b19      	ldr	r3, [pc, #100]	; (80032b4 <HAL_RCC_ClockConfig+0x1bc>)
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	4916      	ldr	r1, [pc, #88]	; (80032b4 <HAL_RCC_ClockConfig+0x1bc>)
 800325a:	4313      	orrs	r3, r2
 800325c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0308 	and.w	r3, r3, #8
 8003266:	2b00      	cmp	r3, #0
 8003268:	d009      	beq.n	800327e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800326a:	4b12      	ldr	r3, [pc, #72]	; (80032b4 <HAL_RCC_ClockConfig+0x1bc>)
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	00db      	lsls	r3, r3, #3
 8003278:	490e      	ldr	r1, [pc, #56]	; (80032b4 <HAL_RCC_ClockConfig+0x1bc>)
 800327a:	4313      	orrs	r3, r2
 800327c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800327e:	f000 f821 	bl	80032c4 <HAL_RCC_GetSysClockFreq>
 8003282:	4602      	mov	r2, r0
 8003284:	4b0b      	ldr	r3, [pc, #44]	; (80032b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	091b      	lsrs	r3, r3, #4
 800328a:	f003 030f 	and.w	r3, r3, #15
 800328e:	490a      	ldr	r1, [pc, #40]	; (80032b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003290:	5ccb      	ldrb	r3, [r1, r3]
 8003292:	fa22 f303 	lsr.w	r3, r2, r3
 8003296:	4a09      	ldr	r2, [pc, #36]	; (80032bc <HAL_RCC_ClockConfig+0x1c4>)
 8003298:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800329a:	4b09      	ldr	r3, [pc, #36]	; (80032c0 <HAL_RCC_ClockConfig+0x1c8>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4618      	mov	r0, r3
 80032a0:	f7fe fa20 	bl	80016e4 <HAL_InitTick>

  return HAL_OK;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3710      	adds	r7, #16
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	40023c00 	.word	0x40023c00
 80032b4:	40023800 	.word	0x40023800
 80032b8:	08005e4c 	.word	0x08005e4c
 80032bc:	20000064 	.word	0x20000064
 80032c0:	20000068 	.word	0x20000068

080032c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032c4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80032c8:	b084      	sub	sp, #16
 80032ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80032cc:	2300      	movs	r3, #0
 80032ce:	607b      	str	r3, [r7, #4]
 80032d0:	2300      	movs	r3, #0
 80032d2:	60fb      	str	r3, [r7, #12]
 80032d4:	2300      	movs	r3, #0
 80032d6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80032d8:	2300      	movs	r3, #0
 80032da:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032dc:	4b67      	ldr	r3, [pc, #412]	; (800347c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f003 030c 	and.w	r3, r3, #12
 80032e4:	2b08      	cmp	r3, #8
 80032e6:	d00d      	beq.n	8003304 <HAL_RCC_GetSysClockFreq+0x40>
 80032e8:	2b08      	cmp	r3, #8
 80032ea:	f200 80bd 	bhi.w	8003468 <HAL_RCC_GetSysClockFreq+0x1a4>
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d002      	beq.n	80032f8 <HAL_RCC_GetSysClockFreq+0x34>
 80032f2:	2b04      	cmp	r3, #4
 80032f4:	d003      	beq.n	80032fe <HAL_RCC_GetSysClockFreq+0x3a>
 80032f6:	e0b7      	b.n	8003468 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032f8:	4b61      	ldr	r3, [pc, #388]	; (8003480 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80032fa:	60bb      	str	r3, [r7, #8]
       break;
 80032fc:	e0b7      	b.n	800346e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032fe:	4b61      	ldr	r3, [pc, #388]	; (8003484 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003300:	60bb      	str	r3, [r7, #8]
      break;
 8003302:	e0b4      	b.n	800346e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003304:	4b5d      	ldr	r3, [pc, #372]	; (800347c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800330c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800330e:	4b5b      	ldr	r3, [pc, #364]	; (800347c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d04d      	beq.n	80033b6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800331a:	4b58      	ldr	r3, [pc, #352]	; (800347c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	099b      	lsrs	r3, r3, #6
 8003320:	461a      	mov	r2, r3
 8003322:	f04f 0300 	mov.w	r3, #0
 8003326:	f240 10ff 	movw	r0, #511	; 0x1ff
 800332a:	f04f 0100 	mov.w	r1, #0
 800332e:	ea02 0800 	and.w	r8, r2, r0
 8003332:	ea03 0901 	and.w	r9, r3, r1
 8003336:	4640      	mov	r0, r8
 8003338:	4649      	mov	r1, r9
 800333a:	f04f 0200 	mov.w	r2, #0
 800333e:	f04f 0300 	mov.w	r3, #0
 8003342:	014b      	lsls	r3, r1, #5
 8003344:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003348:	0142      	lsls	r2, r0, #5
 800334a:	4610      	mov	r0, r2
 800334c:	4619      	mov	r1, r3
 800334e:	ebb0 0008 	subs.w	r0, r0, r8
 8003352:	eb61 0109 	sbc.w	r1, r1, r9
 8003356:	f04f 0200 	mov.w	r2, #0
 800335a:	f04f 0300 	mov.w	r3, #0
 800335e:	018b      	lsls	r3, r1, #6
 8003360:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003364:	0182      	lsls	r2, r0, #6
 8003366:	1a12      	subs	r2, r2, r0
 8003368:	eb63 0301 	sbc.w	r3, r3, r1
 800336c:	f04f 0000 	mov.w	r0, #0
 8003370:	f04f 0100 	mov.w	r1, #0
 8003374:	00d9      	lsls	r1, r3, #3
 8003376:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800337a:	00d0      	lsls	r0, r2, #3
 800337c:	4602      	mov	r2, r0
 800337e:	460b      	mov	r3, r1
 8003380:	eb12 0208 	adds.w	r2, r2, r8
 8003384:	eb43 0309 	adc.w	r3, r3, r9
 8003388:	f04f 0000 	mov.w	r0, #0
 800338c:	f04f 0100 	mov.w	r1, #0
 8003390:	0259      	lsls	r1, r3, #9
 8003392:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003396:	0250      	lsls	r0, r2, #9
 8003398:	4602      	mov	r2, r0
 800339a:	460b      	mov	r3, r1
 800339c:	4610      	mov	r0, r2
 800339e:	4619      	mov	r1, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	461a      	mov	r2, r3
 80033a4:	f04f 0300 	mov.w	r3, #0
 80033a8:	f7fc ff6a 	bl	8000280 <__aeabi_uldivmod>
 80033ac:	4602      	mov	r2, r0
 80033ae:	460b      	mov	r3, r1
 80033b0:	4613      	mov	r3, r2
 80033b2:	60fb      	str	r3, [r7, #12]
 80033b4:	e04a      	b.n	800344c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033b6:	4b31      	ldr	r3, [pc, #196]	; (800347c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	099b      	lsrs	r3, r3, #6
 80033bc:	461a      	mov	r2, r3
 80033be:	f04f 0300 	mov.w	r3, #0
 80033c2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80033c6:	f04f 0100 	mov.w	r1, #0
 80033ca:	ea02 0400 	and.w	r4, r2, r0
 80033ce:	ea03 0501 	and.w	r5, r3, r1
 80033d2:	4620      	mov	r0, r4
 80033d4:	4629      	mov	r1, r5
 80033d6:	f04f 0200 	mov.w	r2, #0
 80033da:	f04f 0300 	mov.w	r3, #0
 80033de:	014b      	lsls	r3, r1, #5
 80033e0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80033e4:	0142      	lsls	r2, r0, #5
 80033e6:	4610      	mov	r0, r2
 80033e8:	4619      	mov	r1, r3
 80033ea:	1b00      	subs	r0, r0, r4
 80033ec:	eb61 0105 	sbc.w	r1, r1, r5
 80033f0:	f04f 0200 	mov.w	r2, #0
 80033f4:	f04f 0300 	mov.w	r3, #0
 80033f8:	018b      	lsls	r3, r1, #6
 80033fa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80033fe:	0182      	lsls	r2, r0, #6
 8003400:	1a12      	subs	r2, r2, r0
 8003402:	eb63 0301 	sbc.w	r3, r3, r1
 8003406:	f04f 0000 	mov.w	r0, #0
 800340a:	f04f 0100 	mov.w	r1, #0
 800340e:	00d9      	lsls	r1, r3, #3
 8003410:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003414:	00d0      	lsls	r0, r2, #3
 8003416:	4602      	mov	r2, r0
 8003418:	460b      	mov	r3, r1
 800341a:	1912      	adds	r2, r2, r4
 800341c:	eb45 0303 	adc.w	r3, r5, r3
 8003420:	f04f 0000 	mov.w	r0, #0
 8003424:	f04f 0100 	mov.w	r1, #0
 8003428:	0299      	lsls	r1, r3, #10
 800342a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800342e:	0290      	lsls	r0, r2, #10
 8003430:	4602      	mov	r2, r0
 8003432:	460b      	mov	r3, r1
 8003434:	4610      	mov	r0, r2
 8003436:	4619      	mov	r1, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	461a      	mov	r2, r3
 800343c:	f04f 0300 	mov.w	r3, #0
 8003440:	f7fc ff1e 	bl	8000280 <__aeabi_uldivmod>
 8003444:	4602      	mov	r2, r0
 8003446:	460b      	mov	r3, r1
 8003448:	4613      	mov	r3, r2
 800344a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800344c:	4b0b      	ldr	r3, [pc, #44]	; (800347c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	0c1b      	lsrs	r3, r3, #16
 8003452:	f003 0303 	and.w	r3, r3, #3
 8003456:	3301      	adds	r3, #1
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800345c:	68fa      	ldr	r2, [r7, #12]
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	fbb2 f3f3 	udiv	r3, r2, r3
 8003464:	60bb      	str	r3, [r7, #8]
      break;
 8003466:	e002      	b.n	800346e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003468:	4b05      	ldr	r3, [pc, #20]	; (8003480 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800346a:	60bb      	str	r3, [r7, #8]
      break;
 800346c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800346e:	68bb      	ldr	r3, [r7, #8]
}
 8003470:	4618      	mov	r0, r3
 8003472:	3710      	adds	r7, #16
 8003474:	46bd      	mov	sp, r7
 8003476:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800347a:	bf00      	nop
 800347c:	40023800 	.word	0x40023800
 8003480:	00f42400 	.word	0x00f42400
 8003484:	007a1200 	.word	0x007a1200

08003488 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003488:	b480      	push	{r7}
 800348a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800348c:	4b03      	ldr	r3, [pc, #12]	; (800349c <HAL_RCC_GetHCLKFreq+0x14>)
 800348e:	681b      	ldr	r3, [r3, #0]
}
 8003490:	4618      	mov	r0, r3
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	20000064 	.word	0x20000064

080034a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80034a4:	f7ff fff0 	bl	8003488 <HAL_RCC_GetHCLKFreq>
 80034a8:	4602      	mov	r2, r0
 80034aa:	4b05      	ldr	r3, [pc, #20]	; (80034c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	0a9b      	lsrs	r3, r3, #10
 80034b0:	f003 0307 	and.w	r3, r3, #7
 80034b4:	4903      	ldr	r1, [pc, #12]	; (80034c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034b6:	5ccb      	ldrb	r3, [r1, r3]
 80034b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034bc:	4618      	mov	r0, r3
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	40023800 	.word	0x40023800
 80034c4:	08005e5c 	.word	0x08005e5c

080034c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80034cc:	f7ff ffdc 	bl	8003488 <HAL_RCC_GetHCLKFreq>
 80034d0:	4602      	mov	r2, r0
 80034d2:	4b05      	ldr	r3, [pc, #20]	; (80034e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	0b5b      	lsrs	r3, r3, #13
 80034d8:	f003 0307 	and.w	r3, r3, #7
 80034dc:	4903      	ldr	r1, [pc, #12]	; (80034ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80034de:	5ccb      	ldrb	r3, [r1, r3]
 80034e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	40023800 	.word	0x40023800
 80034ec:	08005e5c 	.word	0x08005e5c

080034f0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	220f      	movs	r2, #15
 80034fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003500:	4b12      	ldr	r3, [pc, #72]	; (800354c <HAL_RCC_GetClockConfig+0x5c>)
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f003 0203 	and.w	r2, r3, #3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800350c:	4b0f      	ldr	r3, [pc, #60]	; (800354c <HAL_RCC_GetClockConfig+0x5c>)
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003518:	4b0c      	ldr	r3, [pc, #48]	; (800354c <HAL_RCC_GetClockConfig+0x5c>)
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003524:	4b09      	ldr	r3, [pc, #36]	; (800354c <HAL_RCC_GetClockConfig+0x5c>)
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	08db      	lsrs	r3, r3, #3
 800352a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003532:	4b07      	ldr	r3, [pc, #28]	; (8003550 <HAL_RCC_GetClockConfig+0x60>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0207 	and.w	r2, r3, #7
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	601a      	str	r2, [r3, #0]
}
 800353e:	bf00      	nop
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	40023800 	.word	0x40023800
 8003550:	40023c00 	.word	0x40023c00

08003554 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d101      	bne.n	8003566 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e041      	b.n	80035ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800356c:	b2db      	uxtb	r3, r3
 800356e:	2b00      	cmp	r3, #0
 8003570:	d106      	bne.n	8003580 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f7fd ffdc 	bl	8001538 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2202      	movs	r2, #2
 8003584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	3304      	adds	r3, #4
 8003590:	4619      	mov	r1, r3
 8003592:	4610      	mov	r0, r2
 8003594:	f000 ff1c 	bl	80043d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3708      	adds	r7, #8
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
	...

080035f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003602:	b2db      	uxtb	r3, r3
 8003604:	2b01      	cmp	r3, #1
 8003606:	d001      	beq.n	800360c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e04e      	b.n	80036aa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2202      	movs	r2, #2
 8003610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68da      	ldr	r2, [r3, #12]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f042 0201 	orr.w	r2, r2, #1
 8003622:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a23      	ldr	r2, [pc, #140]	; (80036b8 <HAL_TIM_Base_Start_IT+0xc4>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d022      	beq.n	8003674 <HAL_TIM_Base_Start_IT+0x80>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003636:	d01d      	beq.n	8003674 <HAL_TIM_Base_Start_IT+0x80>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a1f      	ldr	r2, [pc, #124]	; (80036bc <HAL_TIM_Base_Start_IT+0xc8>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d018      	beq.n	8003674 <HAL_TIM_Base_Start_IT+0x80>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a1e      	ldr	r2, [pc, #120]	; (80036c0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d013      	beq.n	8003674 <HAL_TIM_Base_Start_IT+0x80>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a1c      	ldr	r2, [pc, #112]	; (80036c4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d00e      	beq.n	8003674 <HAL_TIM_Base_Start_IT+0x80>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a1b      	ldr	r2, [pc, #108]	; (80036c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d009      	beq.n	8003674 <HAL_TIM_Base_Start_IT+0x80>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a19      	ldr	r2, [pc, #100]	; (80036cc <HAL_TIM_Base_Start_IT+0xd8>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d004      	beq.n	8003674 <HAL_TIM_Base_Start_IT+0x80>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a18      	ldr	r2, [pc, #96]	; (80036d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d111      	bne.n	8003698 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f003 0307 	and.w	r3, r3, #7
 800367e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2b06      	cmp	r3, #6
 8003684:	d010      	beq.n	80036a8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f042 0201 	orr.w	r2, r2, #1
 8003694:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003696:	e007      	b.n	80036a8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f042 0201 	orr.w	r2, r2, #1
 80036a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3714      	adds	r7, #20
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	40010000 	.word	0x40010000
 80036bc:	40000400 	.word	0x40000400
 80036c0:	40000800 	.word	0x40000800
 80036c4:	40000c00 	.word	0x40000c00
 80036c8:	40010400 	.word	0x40010400
 80036cc:	40014000 	.word	0x40014000
 80036d0:	40001800 	.word	0x40001800

080036d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d101      	bne.n	80036e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e041      	b.n	800376a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d106      	bne.n	8003700 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 f839 	bl	8003772 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2202      	movs	r2, #2
 8003704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	3304      	adds	r3, #4
 8003710:	4619      	mov	r1, r3
 8003712:	4610      	mov	r0, r2
 8003714:	f000 fe5c 	bl	80043d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3708      	adds	r7, #8
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003772:	b480      	push	{r7}
 8003774:	b083      	sub	sp, #12
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800377a:	bf00      	nop
 800377c:	370c      	adds	r7, #12
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
	...

08003788 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b086      	sub	sp, #24
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	607a      	str	r2, [r7, #4]
 8003794:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003796:	2300      	movs	r3, #0
 8003798:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d109      	bne.n	80037b4 <HAL_TIM_PWM_Start_DMA+0x2c>
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	bf0c      	ite	eq
 80037ac:	2301      	moveq	r3, #1
 80037ae:	2300      	movne	r3, #0
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	e022      	b.n	80037fa <HAL_TIM_PWM_Start_DMA+0x72>
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	2b04      	cmp	r3, #4
 80037b8:	d109      	bne.n	80037ce <HAL_TIM_PWM_Start_DMA+0x46>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	bf0c      	ite	eq
 80037c6:	2301      	moveq	r3, #1
 80037c8:	2300      	movne	r3, #0
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	e015      	b.n	80037fa <HAL_TIM_PWM_Start_DMA+0x72>
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	2b08      	cmp	r3, #8
 80037d2:	d109      	bne.n	80037e8 <HAL_TIM_PWM_Start_DMA+0x60>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	2b02      	cmp	r3, #2
 80037de:	bf0c      	ite	eq
 80037e0:	2301      	moveq	r3, #1
 80037e2:	2300      	movne	r3, #0
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	e008      	b.n	80037fa <HAL_TIM_PWM_Start_DMA+0x72>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	bf0c      	ite	eq
 80037f4:	2301      	moveq	r3, #1
 80037f6:	2300      	movne	r3, #0
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80037fe:	2302      	movs	r3, #2
 8003800:	e171      	b.n	8003ae6 <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d109      	bne.n	800381c <HAL_TIM_PWM_Start_DMA+0x94>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800380e:	b2db      	uxtb	r3, r3
 8003810:	2b01      	cmp	r3, #1
 8003812:	bf0c      	ite	eq
 8003814:	2301      	moveq	r3, #1
 8003816:	2300      	movne	r3, #0
 8003818:	b2db      	uxtb	r3, r3
 800381a:	e022      	b.n	8003862 <HAL_TIM_PWM_Start_DMA+0xda>
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	2b04      	cmp	r3, #4
 8003820:	d109      	bne.n	8003836 <HAL_TIM_PWM_Start_DMA+0xae>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003828:	b2db      	uxtb	r3, r3
 800382a:	2b01      	cmp	r3, #1
 800382c:	bf0c      	ite	eq
 800382e:	2301      	moveq	r3, #1
 8003830:	2300      	movne	r3, #0
 8003832:	b2db      	uxtb	r3, r3
 8003834:	e015      	b.n	8003862 <HAL_TIM_PWM_Start_DMA+0xda>
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	2b08      	cmp	r3, #8
 800383a:	d109      	bne.n	8003850 <HAL_TIM_PWM_Start_DMA+0xc8>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003842:	b2db      	uxtb	r3, r3
 8003844:	2b01      	cmp	r3, #1
 8003846:	bf0c      	ite	eq
 8003848:	2301      	moveq	r3, #1
 800384a:	2300      	movne	r3, #0
 800384c:	b2db      	uxtb	r3, r3
 800384e:	e008      	b.n	8003862 <HAL_TIM_PWM_Start_DMA+0xda>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003856:	b2db      	uxtb	r3, r3
 8003858:	2b01      	cmp	r3, #1
 800385a:	bf0c      	ite	eq
 800385c:	2301      	moveq	r3, #1
 800385e:	2300      	movne	r3, #0
 8003860:	b2db      	uxtb	r3, r3
 8003862:	2b00      	cmp	r3, #0
 8003864:	d024      	beq.n	80038b0 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d104      	bne.n	8003876 <HAL_TIM_PWM_Start_DMA+0xee>
 800386c:	887b      	ldrh	r3, [r7, #2]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d001      	beq.n	8003876 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e137      	b.n	8003ae6 <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d104      	bne.n	8003886 <HAL_TIM_PWM_Start_DMA+0xfe>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2202      	movs	r2, #2
 8003880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003884:	e016      	b.n	80038b4 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	2b04      	cmp	r3, #4
 800388a:	d104      	bne.n	8003896 <HAL_TIM_PWM_Start_DMA+0x10e>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2202      	movs	r2, #2
 8003890:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003894:	e00e      	b.n	80038b4 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	2b08      	cmp	r3, #8
 800389a:	d104      	bne.n	80038a6 <HAL_TIM_PWM_Start_DMA+0x11e>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2202      	movs	r2, #2
 80038a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038a4:	e006      	b.n	80038b4 <HAL_TIM_PWM_Start_DMA+0x12c>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2202      	movs	r2, #2
 80038aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80038ae:	e001      	b.n	80038b4 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e118      	b.n	8003ae6 <HAL_TIM_PWM_Start_DMA+0x35e>
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	2b0c      	cmp	r3, #12
 80038b8:	f200 80ae 	bhi.w	8003a18 <HAL_TIM_PWM_Start_DMA+0x290>
 80038bc:	a201      	add	r2, pc, #4	; (adr r2, 80038c4 <HAL_TIM_PWM_Start_DMA+0x13c>)
 80038be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c2:	bf00      	nop
 80038c4:	080038f9 	.word	0x080038f9
 80038c8:	08003a19 	.word	0x08003a19
 80038cc:	08003a19 	.word	0x08003a19
 80038d0:	08003a19 	.word	0x08003a19
 80038d4:	08003941 	.word	0x08003941
 80038d8:	08003a19 	.word	0x08003a19
 80038dc:	08003a19 	.word	0x08003a19
 80038e0:	08003a19 	.word	0x08003a19
 80038e4:	08003989 	.word	0x08003989
 80038e8:	08003a19 	.word	0x08003a19
 80038ec:	08003a19 	.word	0x08003a19
 80038f0:	08003a19 	.word	0x08003a19
 80038f4:	080039d1 	.word	0x080039d1
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fc:	4a7c      	ldr	r2, [pc, #496]	; (8003af0 <HAL_TIM_PWM_Start_DMA+0x368>)
 80038fe:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003904:	4a7b      	ldr	r2, [pc, #492]	; (8003af4 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003906:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390c:	4a7a      	ldr	r2, [pc, #488]	; (8003af8 <HAL_TIM_PWM_Start_DMA+0x370>)
 800390e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003914:	6879      	ldr	r1, [r7, #4]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	3334      	adds	r3, #52	; 0x34
 800391c:	461a      	mov	r2, r3
 800391e:	887b      	ldrh	r3, [r7, #2]
 8003920:	f7fe fc44 	bl	80021ac <HAL_DMA_Start_IT>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d001      	beq.n	800392e <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e0db      	b.n	8003ae6 <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68da      	ldr	r2, [r3, #12]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800393c:	60da      	str	r2, [r3, #12]
      break;
 800393e:	e06e      	b.n	8003a1e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003944:	4a6a      	ldr	r2, [pc, #424]	; (8003af0 <HAL_TIM_PWM_Start_DMA+0x368>)
 8003946:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800394c:	4a69      	ldr	r2, [pc, #420]	; (8003af4 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800394e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003954:	4a68      	ldr	r2, [pc, #416]	; (8003af8 <HAL_TIM_PWM_Start_DMA+0x370>)
 8003956:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800395c:	6879      	ldr	r1, [r7, #4]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	3338      	adds	r3, #56	; 0x38
 8003964:	461a      	mov	r2, r3
 8003966:	887b      	ldrh	r3, [r7, #2]
 8003968:	f7fe fc20 	bl	80021ac <HAL_DMA_Start_IT>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e0b7      	b.n	8003ae6 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68da      	ldr	r2, [r3, #12]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003984:	60da      	str	r2, [r3, #12]
      break;
 8003986:	e04a      	b.n	8003a1e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800398c:	4a58      	ldr	r2, [pc, #352]	; (8003af0 <HAL_TIM_PWM_Start_DMA+0x368>)
 800398e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003994:	4a57      	ldr	r2, [pc, #348]	; (8003af4 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003996:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399c:	4a56      	ldr	r2, [pc, #344]	; (8003af8 <HAL_TIM_PWM_Start_DMA+0x370>)
 800399e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80039a4:	6879      	ldr	r1, [r7, #4]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	333c      	adds	r3, #60	; 0x3c
 80039ac:	461a      	mov	r2, r3
 80039ae:	887b      	ldrh	r3, [r7, #2]
 80039b0:	f7fe fbfc 	bl	80021ac <HAL_DMA_Start_IT>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d001      	beq.n	80039be <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e093      	b.n	8003ae6 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	68da      	ldr	r2, [r3, #12]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039cc:	60da      	str	r2, [r3, #12]
      break;
 80039ce:	e026      	b.n	8003a1e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d4:	4a46      	ldr	r2, [pc, #280]	; (8003af0 <HAL_TIM_PWM_Start_DMA+0x368>)
 80039d6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039dc:	4a45      	ldr	r2, [pc, #276]	; (8003af4 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80039de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e4:	4a44      	ldr	r2, [pc, #272]	; (8003af8 <HAL_TIM_PWM_Start_DMA+0x370>)
 80039e6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80039ec:	6879      	ldr	r1, [r7, #4]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	3340      	adds	r3, #64	; 0x40
 80039f4:	461a      	mov	r2, r3
 80039f6:	887b      	ldrh	r3, [r7, #2]
 80039f8:	f7fe fbd8 	bl	80021ac <HAL_DMA_Start_IT>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d001      	beq.n	8003a06 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e06f      	b.n	8003ae6 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68da      	ldr	r2, [r3, #12]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003a14:	60da      	str	r2, [r3, #12]
      break;
 8003a16:	e002      	b.n	8003a1e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	75fb      	strb	r3, [r7, #23]
      break;
 8003a1c:	bf00      	nop
  }

  if (status == HAL_OK)
 8003a1e:	7dfb      	ldrb	r3, [r7, #23]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d15f      	bne.n	8003ae4 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	68b9      	ldr	r1, [r7, #8]
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f000 ffb9 	bl	80049a4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a31      	ldr	r2, [pc, #196]	; (8003afc <HAL_TIM_PWM_Start_DMA+0x374>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d004      	beq.n	8003a46 <HAL_TIM_PWM_Start_DMA+0x2be>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a2f      	ldr	r2, [pc, #188]	; (8003b00 <HAL_TIM_PWM_Start_DMA+0x378>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d101      	bne.n	8003a4a <HAL_TIM_PWM_Start_DMA+0x2c2>
 8003a46:	2301      	movs	r3, #1
 8003a48:	e000      	b.n	8003a4c <HAL_TIM_PWM_Start_DMA+0x2c4>
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d007      	beq.n	8003a60 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a5e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a25      	ldr	r2, [pc, #148]	; (8003afc <HAL_TIM_PWM_Start_DMA+0x374>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d022      	beq.n	8003ab0 <HAL_TIM_PWM_Start_DMA+0x328>
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a72:	d01d      	beq.n	8003ab0 <HAL_TIM_PWM_Start_DMA+0x328>
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a22      	ldr	r2, [pc, #136]	; (8003b04 <HAL_TIM_PWM_Start_DMA+0x37c>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d018      	beq.n	8003ab0 <HAL_TIM_PWM_Start_DMA+0x328>
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a21      	ldr	r2, [pc, #132]	; (8003b08 <HAL_TIM_PWM_Start_DMA+0x380>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d013      	beq.n	8003ab0 <HAL_TIM_PWM_Start_DMA+0x328>
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a1f      	ldr	r2, [pc, #124]	; (8003b0c <HAL_TIM_PWM_Start_DMA+0x384>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d00e      	beq.n	8003ab0 <HAL_TIM_PWM_Start_DMA+0x328>
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a1a      	ldr	r2, [pc, #104]	; (8003b00 <HAL_TIM_PWM_Start_DMA+0x378>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d009      	beq.n	8003ab0 <HAL_TIM_PWM_Start_DMA+0x328>
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a1b      	ldr	r2, [pc, #108]	; (8003b10 <HAL_TIM_PWM_Start_DMA+0x388>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d004      	beq.n	8003ab0 <HAL_TIM_PWM_Start_DMA+0x328>
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a1a      	ldr	r2, [pc, #104]	; (8003b14 <HAL_TIM_PWM_Start_DMA+0x38c>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d111      	bne.n	8003ad4 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f003 0307 	and.w	r3, r3, #7
 8003aba:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	2b06      	cmp	r3, #6
 8003ac0:	d010      	beq.n	8003ae4 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f042 0201 	orr.w	r2, r2, #1
 8003ad0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ad2:	e007      	b.n	8003ae4 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f042 0201 	orr.w	r2, r2, #1
 8003ae2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003ae4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3718      	adds	r7, #24
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	080042c1 	.word	0x080042c1
 8003af4:	08004369 	.word	0x08004369
 8003af8:	0800422f 	.word	0x0800422f
 8003afc:	40010000 	.word	0x40010000
 8003b00:	40010400 	.word	0x40010400
 8003b04:	40000400 	.word	0x40000400
 8003b08:	40000800 	.word	0x40000800
 8003b0c:	40000c00 	.word	0x40000c00
 8003b10:	40014000 	.word	0x40014000
 8003b14:	40001800 	.word	0x40001800

08003b18 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b22:	2300      	movs	r3, #0
 8003b24:	73fb      	strb	r3, [r7, #15]
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	2b0c      	cmp	r3, #12
 8003b2a:	d855      	bhi.n	8003bd8 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8003b2c:	a201      	add	r2, pc, #4	; (adr r2, 8003b34 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8003b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b32:	bf00      	nop
 8003b34:	08003b69 	.word	0x08003b69
 8003b38:	08003bd9 	.word	0x08003bd9
 8003b3c:	08003bd9 	.word	0x08003bd9
 8003b40:	08003bd9 	.word	0x08003bd9
 8003b44:	08003b85 	.word	0x08003b85
 8003b48:	08003bd9 	.word	0x08003bd9
 8003b4c:	08003bd9 	.word	0x08003bd9
 8003b50:	08003bd9 	.word	0x08003bd9
 8003b54:	08003ba1 	.word	0x08003ba1
 8003b58:	08003bd9 	.word	0x08003bd9
 8003b5c:	08003bd9 	.word	0x08003bd9
 8003b60:	08003bd9 	.word	0x08003bd9
 8003b64:	08003bbd 	.word	0x08003bbd
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	68da      	ldr	r2, [r3, #12]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003b76:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f7fe fbdd 	bl	800233c <HAL_DMA_Abort_IT>
      break;
 8003b82:	e02c      	b.n	8003bde <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68da      	ldr	r2, [r3, #12]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b92:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f7fe fbcf 	bl	800233c <HAL_DMA_Abort_IT>
      break;
 8003b9e:	e01e      	b.n	8003bde <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68da      	ldr	r2, [r3, #12]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bae:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f7fe fbc1 	bl	800233c <HAL_DMA_Abort_IT>
      break;
 8003bba:	e010      	b.n	8003bde <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68da      	ldr	r2, [r3, #12]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003bca:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f7fe fbb3 	bl	800233c <HAL_DMA_Abort_IT>
      break;
 8003bd6:	e002      	b.n	8003bde <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	73fb      	strb	r3, [r7, #15]
      break;
 8003bdc:	bf00      	nop
  }

  if (status == HAL_OK)
 8003bde:	7bfb      	ldrb	r3, [r7, #15]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d161      	bne.n	8003ca8 <HAL_TIM_PWM_Stop_DMA+0x190>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2200      	movs	r2, #0
 8003bea:	6839      	ldr	r1, [r7, #0]
 8003bec:	4618      	mov	r0, r3
 8003bee:	f000 fed9 	bl	80049a4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a2f      	ldr	r2, [pc, #188]	; (8003cb4 <HAL_TIM_PWM_Stop_DMA+0x19c>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d004      	beq.n	8003c06 <HAL_TIM_PWM_Stop_DMA+0xee>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a2d      	ldr	r2, [pc, #180]	; (8003cb8 <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d101      	bne.n	8003c0a <HAL_TIM_PWM_Stop_DMA+0xf2>
 8003c06:	2301      	movs	r3, #1
 8003c08:	e000      	b.n	8003c0c <HAL_TIM_PWM_Stop_DMA+0xf4>
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d017      	beq.n	8003c40 <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	6a1a      	ldr	r2, [r3, #32]
 8003c16:	f241 1311 	movw	r3, #4369	; 0x1111
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d10f      	bne.n	8003c40 <HAL_TIM_PWM_Stop_DMA+0x128>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	6a1a      	ldr	r2, [r3, #32]
 8003c26:	f240 4344 	movw	r3, #1092	; 0x444
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d107      	bne.n	8003c40 <HAL_TIM_PWM_Stop_DMA+0x128>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c3e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	6a1a      	ldr	r2, [r3, #32]
 8003c46:	f241 1311 	movw	r3, #4369	; 0x1111
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d10f      	bne.n	8003c70 <HAL_TIM_PWM_Stop_DMA+0x158>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	6a1a      	ldr	r2, [r3, #32]
 8003c56:	f240 4344 	movw	r3, #1092	; 0x444
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d107      	bne.n	8003c70 <HAL_TIM_PWM_Stop_DMA+0x158>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f022 0201 	bic.w	r2, r2, #1
 8003c6e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d104      	bne.n	8003c80 <HAL_TIM_PWM_Stop_DMA+0x168>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c7e:	e013      	b.n	8003ca8 <HAL_TIM_PWM_Stop_DMA+0x190>
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	2b04      	cmp	r3, #4
 8003c84:	d104      	bne.n	8003c90 <HAL_TIM_PWM_Stop_DMA+0x178>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c8e:	e00b      	b.n	8003ca8 <HAL_TIM_PWM_Stop_DMA+0x190>
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	2b08      	cmp	r3, #8
 8003c94:	d104      	bne.n	8003ca0 <HAL_TIM_PWM_Stop_DMA+0x188>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c9e:	e003      	b.n	8003ca8 <HAL_TIM_PWM_Stop_DMA+0x190>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8003ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3710      	adds	r7, #16
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	40010000 	.word	0x40010000
 8003cb8:	40010400 	.word	0x40010400

08003cbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d122      	bne.n	8003d18 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	f003 0302 	and.w	r3, r3, #2
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d11b      	bne.n	8003d18 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f06f 0202 	mvn.w	r2, #2
 8003ce8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2201      	movs	r2, #1
 8003cee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	699b      	ldr	r3, [r3, #24]
 8003cf6:	f003 0303 	and.w	r3, r3, #3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d003      	beq.n	8003d06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 fa77 	bl	80041f2 <HAL_TIM_IC_CaptureCallback>
 8003d04:	e005      	b.n	8003d12 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 fa69 	bl	80041de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f7fd fb01 	bl	8001314 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	f003 0304 	and.w	r3, r3, #4
 8003d22:	2b04      	cmp	r3, #4
 8003d24:	d122      	bne.n	8003d6c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	f003 0304 	and.w	r3, r3, #4
 8003d30:	2b04      	cmp	r3, #4
 8003d32:	d11b      	bne.n	8003d6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f06f 0204 	mvn.w	r2, #4
 8003d3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2202      	movs	r2, #2
 8003d42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	699b      	ldr	r3, [r3, #24]
 8003d4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d003      	beq.n	8003d5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 fa4d 	bl	80041f2 <HAL_TIM_IC_CaptureCallback>
 8003d58:	e005      	b.n	8003d66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 fa3f 	bl	80041de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f7fd fad7 	bl	8001314 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	f003 0308 	and.w	r3, r3, #8
 8003d76:	2b08      	cmp	r3, #8
 8003d78:	d122      	bne.n	8003dc0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	f003 0308 	and.w	r3, r3, #8
 8003d84:	2b08      	cmp	r3, #8
 8003d86:	d11b      	bne.n	8003dc0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f06f 0208 	mvn.w	r2, #8
 8003d90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2204      	movs	r2, #4
 8003d96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	69db      	ldr	r3, [r3, #28]
 8003d9e:	f003 0303 	and.w	r3, r3, #3
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d003      	beq.n	8003dae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 fa23 	bl	80041f2 <HAL_TIM_IC_CaptureCallback>
 8003dac:	e005      	b.n	8003dba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 fa15 	bl	80041de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f7fd faad 	bl	8001314 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	f003 0310 	and.w	r3, r3, #16
 8003dca:	2b10      	cmp	r3, #16
 8003dcc:	d122      	bne.n	8003e14 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	f003 0310 	and.w	r3, r3, #16
 8003dd8:	2b10      	cmp	r3, #16
 8003dda:	d11b      	bne.n	8003e14 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f06f 0210 	mvn.w	r2, #16
 8003de4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2208      	movs	r2, #8
 8003dea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	69db      	ldr	r3, [r3, #28]
 8003df2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d003      	beq.n	8003e02 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 f9f9 	bl	80041f2 <HAL_TIM_IC_CaptureCallback>
 8003e00:	e005      	b.n	8003e0e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 f9eb 	bl	80041de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f7fd fa83 	bl	8001314 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d10e      	bne.n	8003e40 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	f003 0301 	and.w	r3, r3, #1
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d107      	bne.n	8003e40 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f06f 0201 	mvn.w	r2, #1
 8003e38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f7fd f8c4 	bl	8000fc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e4a:	2b80      	cmp	r3, #128	; 0x80
 8003e4c:	d10e      	bne.n	8003e6c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e58:	2b80      	cmp	r3, #128	; 0x80
 8003e5a:	d107      	bne.n	8003e6c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f000 fe9a 	bl	8004ba0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e76:	2b40      	cmp	r3, #64	; 0x40
 8003e78:	d10e      	bne.n	8003e98 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e84:	2b40      	cmp	r3, #64	; 0x40
 8003e86:	d107      	bne.n	8003e98 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 f9b7 	bl	8004206 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	f003 0320 	and.w	r3, r3, #32
 8003ea2:	2b20      	cmp	r3, #32
 8003ea4:	d10e      	bne.n	8003ec4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	f003 0320 	and.w	r3, r3, #32
 8003eb0:	2b20      	cmp	r3, #32
 8003eb2:	d107      	bne.n	8003ec4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f06f 0220 	mvn.w	r2, #32
 8003ebc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 fe64 	bl	8004b8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ec4:	bf00      	nop
 8003ec6:	3708      	adds	r7, #8
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b086      	sub	sp, #24
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d101      	bne.n	8003eea <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003ee6:	2302      	movs	r3, #2
 8003ee8:	e0ae      	b.n	8004048 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2201      	movs	r2, #1
 8003eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2b0c      	cmp	r3, #12
 8003ef6:	f200 809f 	bhi.w	8004038 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003efa:	a201      	add	r2, pc, #4	; (adr r2, 8003f00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f00:	08003f35 	.word	0x08003f35
 8003f04:	08004039 	.word	0x08004039
 8003f08:	08004039 	.word	0x08004039
 8003f0c:	08004039 	.word	0x08004039
 8003f10:	08003f75 	.word	0x08003f75
 8003f14:	08004039 	.word	0x08004039
 8003f18:	08004039 	.word	0x08004039
 8003f1c:	08004039 	.word	0x08004039
 8003f20:	08003fb7 	.word	0x08003fb7
 8003f24:	08004039 	.word	0x08004039
 8003f28:	08004039 	.word	0x08004039
 8003f2c:	08004039 	.word	0x08004039
 8003f30:	08003ff7 	.word	0x08003ff7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68b9      	ldr	r1, [r7, #8]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f000 fae8 	bl	8004510 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	699a      	ldr	r2, [r3, #24]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f042 0208 	orr.w	r2, r2, #8
 8003f4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	699a      	ldr	r2, [r3, #24]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f022 0204 	bic.w	r2, r2, #4
 8003f5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	6999      	ldr	r1, [r3, #24]
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	691a      	ldr	r2, [r3, #16]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	619a      	str	r2, [r3, #24]
      break;
 8003f72:	e064      	b.n	800403e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68b9      	ldr	r1, [r7, #8]
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f000 fb38 	bl	80045f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	699a      	ldr	r2, [r3, #24]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	699a      	ldr	r2, [r3, #24]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	6999      	ldr	r1, [r3, #24]
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	021a      	lsls	r2, r3, #8
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	619a      	str	r2, [r3, #24]
      break;
 8003fb4:	e043      	b.n	800403e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	68b9      	ldr	r1, [r7, #8]
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f000 fb8d 	bl	80046dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	69da      	ldr	r2, [r3, #28]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f042 0208 	orr.w	r2, r2, #8
 8003fd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	69da      	ldr	r2, [r3, #28]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f022 0204 	bic.w	r2, r2, #4
 8003fe0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	69d9      	ldr	r1, [r3, #28]
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	691a      	ldr	r2, [r3, #16]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	430a      	orrs	r2, r1
 8003ff2:	61da      	str	r2, [r3, #28]
      break;
 8003ff4:	e023      	b.n	800403e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68b9      	ldr	r1, [r7, #8]
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f000 fbe1 	bl	80047c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	69da      	ldr	r2, [r3, #28]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004010:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	69da      	ldr	r2, [r3, #28]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004020:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	69d9      	ldr	r1, [r3, #28]
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	021a      	lsls	r2, r3, #8
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	430a      	orrs	r2, r1
 8004034:	61da      	str	r2, [r3, #28]
      break;
 8004036:	e002      	b.n	800403e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	75fb      	strb	r3, [r7, #23]
      break;
 800403c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004046:	7dfb      	ldrb	r3, [r7, #23]
}
 8004048:	4618      	mov	r0, r3
 800404a:	3718      	adds	r7, #24
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800405a:	2300      	movs	r3, #0
 800405c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004064:	2b01      	cmp	r3, #1
 8004066:	d101      	bne.n	800406c <HAL_TIM_ConfigClockSource+0x1c>
 8004068:	2302      	movs	r3, #2
 800406a:	e0b4      	b.n	80041d6 <HAL_TIM_ConfigClockSource+0x186>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2202      	movs	r2, #2
 8004078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800408a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004092:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68ba      	ldr	r2, [r7, #8]
 800409a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040a4:	d03e      	beq.n	8004124 <HAL_TIM_ConfigClockSource+0xd4>
 80040a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040aa:	f200 8087 	bhi.w	80041bc <HAL_TIM_ConfigClockSource+0x16c>
 80040ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040b2:	f000 8086 	beq.w	80041c2 <HAL_TIM_ConfigClockSource+0x172>
 80040b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ba:	d87f      	bhi.n	80041bc <HAL_TIM_ConfigClockSource+0x16c>
 80040bc:	2b70      	cmp	r3, #112	; 0x70
 80040be:	d01a      	beq.n	80040f6 <HAL_TIM_ConfigClockSource+0xa6>
 80040c0:	2b70      	cmp	r3, #112	; 0x70
 80040c2:	d87b      	bhi.n	80041bc <HAL_TIM_ConfigClockSource+0x16c>
 80040c4:	2b60      	cmp	r3, #96	; 0x60
 80040c6:	d050      	beq.n	800416a <HAL_TIM_ConfigClockSource+0x11a>
 80040c8:	2b60      	cmp	r3, #96	; 0x60
 80040ca:	d877      	bhi.n	80041bc <HAL_TIM_ConfigClockSource+0x16c>
 80040cc:	2b50      	cmp	r3, #80	; 0x50
 80040ce:	d03c      	beq.n	800414a <HAL_TIM_ConfigClockSource+0xfa>
 80040d0:	2b50      	cmp	r3, #80	; 0x50
 80040d2:	d873      	bhi.n	80041bc <HAL_TIM_ConfigClockSource+0x16c>
 80040d4:	2b40      	cmp	r3, #64	; 0x40
 80040d6:	d058      	beq.n	800418a <HAL_TIM_ConfigClockSource+0x13a>
 80040d8:	2b40      	cmp	r3, #64	; 0x40
 80040da:	d86f      	bhi.n	80041bc <HAL_TIM_ConfigClockSource+0x16c>
 80040dc:	2b30      	cmp	r3, #48	; 0x30
 80040de:	d064      	beq.n	80041aa <HAL_TIM_ConfigClockSource+0x15a>
 80040e0:	2b30      	cmp	r3, #48	; 0x30
 80040e2:	d86b      	bhi.n	80041bc <HAL_TIM_ConfigClockSource+0x16c>
 80040e4:	2b20      	cmp	r3, #32
 80040e6:	d060      	beq.n	80041aa <HAL_TIM_ConfigClockSource+0x15a>
 80040e8:	2b20      	cmp	r3, #32
 80040ea:	d867      	bhi.n	80041bc <HAL_TIM_ConfigClockSource+0x16c>
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d05c      	beq.n	80041aa <HAL_TIM_ConfigClockSource+0x15a>
 80040f0:	2b10      	cmp	r3, #16
 80040f2:	d05a      	beq.n	80041aa <HAL_TIM_ConfigClockSource+0x15a>
 80040f4:	e062      	b.n	80041bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6818      	ldr	r0, [r3, #0]
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	6899      	ldr	r1, [r3, #8]
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	685a      	ldr	r2, [r3, #4]
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	f000 fc2d 	bl	8004964 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004118:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68ba      	ldr	r2, [r7, #8]
 8004120:	609a      	str	r2, [r3, #8]
      break;
 8004122:	e04f      	b.n	80041c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6818      	ldr	r0, [r3, #0]
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	6899      	ldr	r1, [r3, #8]
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	685a      	ldr	r2, [r3, #4]
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	f000 fc16 	bl	8004964 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	689a      	ldr	r2, [r3, #8]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004146:	609a      	str	r2, [r3, #8]
      break;
 8004148:	e03c      	b.n	80041c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6818      	ldr	r0, [r3, #0]
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	6859      	ldr	r1, [r3, #4]
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	461a      	mov	r2, r3
 8004158:	f000 fb8a 	bl	8004870 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2150      	movs	r1, #80	; 0x50
 8004162:	4618      	mov	r0, r3
 8004164:	f000 fbe3 	bl	800492e <TIM_ITRx_SetConfig>
      break;
 8004168:	e02c      	b.n	80041c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6818      	ldr	r0, [r3, #0]
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	6859      	ldr	r1, [r3, #4]
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	461a      	mov	r2, r3
 8004178:	f000 fba9 	bl	80048ce <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2160      	movs	r1, #96	; 0x60
 8004182:	4618      	mov	r0, r3
 8004184:	f000 fbd3 	bl	800492e <TIM_ITRx_SetConfig>
      break;
 8004188:	e01c      	b.n	80041c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6818      	ldr	r0, [r3, #0]
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	6859      	ldr	r1, [r3, #4]
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	461a      	mov	r2, r3
 8004198:	f000 fb6a 	bl	8004870 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2140      	movs	r1, #64	; 0x40
 80041a2:	4618      	mov	r0, r3
 80041a4:	f000 fbc3 	bl	800492e <TIM_ITRx_SetConfig>
      break;
 80041a8:	e00c      	b.n	80041c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4619      	mov	r1, r3
 80041b4:	4610      	mov	r0, r2
 80041b6:	f000 fbba 	bl	800492e <TIM_ITRx_SetConfig>
      break;
 80041ba:	e003      	b.n	80041c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	73fb      	strb	r3, [r7, #15]
      break;
 80041c0:	e000      	b.n	80041c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80041c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80041d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3710      	adds	r7, #16
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}

080041de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041de:	b480      	push	{r7}
 80041e0:	b083      	sub	sp, #12
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041e6:	bf00      	nop
 80041e8:	370c      	adds	r7, #12
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr

080041f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041f2:	b480      	push	{r7}
 80041f4:	b083      	sub	sp, #12
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041fa:	bf00      	nop
 80041fc:	370c      	adds	r7, #12
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr

08004206 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004206:	b480      	push	{r7}
 8004208:	b083      	sub	sp, #12
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800420e:	bf00      	nop
 8004210:	370c      	adds	r7, #12
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr

0800421a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800421a:	b480      	push	{r7}
 800421c:	b083      	sub	sp, #12
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004222:	bf00      	nop
 8004224:	370c      	adds	r7, #12
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr

0800422e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800422e:	b580      	push	{r7, lr}
 8004230:	b084      	sub	sp, #16
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	429a      	cmp	r2, r3
 8004244:	d107      	bne.n	8004256 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2201      	movs	r2, #1
 800424a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004254:	e02a      	b.n	80042ac <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	429a      	cmp	r2, r3
 800425e:	d107      	bne.n	8004270 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2202      	movs	r2, #2
 8004264:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2201      	movs	r2, #1
 800426a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800426e:	e01d      	b.n	80042ac <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	429a      	cmp	r2, r3
 8004278:	d107      	bne.n	800428a <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2204      	movs	r2, #4
 800427e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004288:	e010      	b.n	80042ac <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	429a      	cmp	r2, r3
 8004292:	d107      	bne.n	80042a4 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2208      	movs	r2, #8
 8004298:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2201      	movs	r2, #1
 800429e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042a2:	e003      	b.n	80042ac <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80042ac:	68f8      	ldr	r0, [r7, #12]
 80042ae:	f7ff ffb4 	bl	800421a <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	771a      	strb	r2, [r3, #28]
}
 80042b8:	bf00      	nop
 80042ba:	3710      	adds	r7, #16
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042cc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d10b      	bne.n	80042f0 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2201      	movs	r2, #1
 80042dc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	69db      	ldr	r3, [r3, #28]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d136      	bne.n	8004354 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2201      	movs	r2, #1
 80042ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042ee:	e031      	b.n	8004354 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d10b      	bne.n	8004312 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2202      	movs	r2, #2
 80042fe:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	69db      	ldr	r3, [r3, #28]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d125      	bne.n	8004354 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004310:	e020      	b.n	8004354 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	429a      	cmp	r2, r3
 800431a:	d10b      	bne.n	8004334 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2204      	movs	r2, #4
 8004320:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	69db      	ldr	r3, [r3, #28]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d114      	bne.n	8004354 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2201      	movs	r2, #1
 800432e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004332:	e00f      	b.n	8004354 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	429a      	cmp	r2, r3
 800433c:	d10a      	bne.n	8004354 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2208      	movs	r2, #8
 8004342:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	69db      	ldr	r3, [r3, #28]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d103      	bne.n	8004354 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004354:	68f8      	ldr	r0, [r7, #12]
 8004356:	f7fc ffdd 	bl	8001314 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	771a      	strb	r2, [r3, #28]
}
 8004360:	bf00      	nop
 8004362:	3710      	adds	r7, #16
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004374:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	429a      	cmp	r2, r3
 800437e:	d103      	bne.n	8004388 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2201      	movs	r2, #1
 8004384:	771a      	strb	r2, [r3, #28]
 8004386:	e019      	b.n	80043bc <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	429a      	cmp	r2, r3
 8004390:	d103      	bne.n	800439a <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2202      	movs	r2, #2
 8004396:	771a      	strb	r2, [r3, #28]
 8004398:	e010      	b.n	80043bc <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d103      	bne.n	80043ac <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2204      	movs	r2, #4
 80043a8:	771a      	strb	r2, [r3, #28]
 80043aa:	e007      	b.n	80043bc <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d102      	bne.n	80043bc <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2208      	movs	r2, #8
 80043ba:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80043bc:	68f8      	ldr	r0, [r7, #12]
 80043be:	f7fd f805 	bl	80013cc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	771a      	strb	r2, [r3, #28]
}
 80043c8:	bf00      	nop
 80043ca:	3710      	adds	r7, #16
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	4a40      	ldr	r2, [pc, #256]	; (80044e4 <TIM_Base_SetConfig+0x114>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d013      	beq.n	8004410 <TIM_Base_SetConfig+0x40>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043ee:	d00f      	beq.n	8004410 <TIM_Base_SetConfig+0x40>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	4a3d      	ldr	r2, [pc, #244]	; (80044e8 <TIM_Base_SetConfig+0x118>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d00b      	beq.n	8004410 <TIM_Base_SetConfig+0x40>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4a3c      	ldr	r2, [pc, #240]	; (80044ec <TIM_Base_SetConfig+0x11c>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d007      	beq.n	8004410 <TIM_Base_SetConfig+0x40>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4a3b      	ldr	r2, [pc, #236]	; (80044f0 <TIM_Base_SetConfig+0x120>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d003      	beq.n	8004410 <TIM_Base_SetConfig+0x40>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a3a      	ldr	r2, [pc, #232]	; (80044f4 <TIM_Base_SetConfig+0x124>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d108      	bne.n	8004422 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004416:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	4313      	orrs	r3, r2
 8004420:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a2f      	ldr	r2, [pc, #188]	; (80044e4 <TIM_Base_SetConfig+0x114>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d02b      	beq.n	8004482 <TIM_Base_SetConfig+0xb2>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004430:	d027      	beq.n	8004482 <TIM_Base_SetConfig+0xb2>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a2c      	ldr	r2, [pc, #176]	; (80044e8 <TIM_Base_SetConfig+0x118>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d023      	beq.n	8004482 <TIM_Base_SetConfig+0xb2>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a2b      	ldr	r2, [pc, #172]	; (80044ec <TIM_Base_SetConfig+0x11c>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d01f      	beq.n	8004482 <TIM_Base_SetConfig+0xb2>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a2a      	ldr	r2, [pc, #168]	; (80044f0 <TIM_Base_SetConfig+0x120>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d01b      	beq.n	8004482 <TIM_Base_SetConfig+0xb2>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a29      	ldr	r2, [pc, #164]	; (80044f4 <TIM_Base_SetConfig+0x124>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d017      	beq.n	8004482 <TIM_Base_SetConfig+0xb2>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a28      	ldr	r2, [pc, #160]	; (80044f8 <TIM_Base_SetConfig+0x128>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d013      	beq.n	8004482 <TIM_Base_SetConfig+0xb2>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a27      	ldr	r2, [pc, #156]	; (80044fc <TIM_Base_SetConfig+0x12c>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d00f      	beq.n	8004482 <TIM_Base_SetConfig+0xb2>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a26      	ldr	r2, [pc, #152]	; (8004500 <TIM_Base_SetConfig+0x130>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d00b      	beq.n	8004482 <TIM_Base_SetConfig+0xb2>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a25      	ldr	r2, [pc, #148]	; (8004504 <TIM_Base_SetConfig+0x134>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d007      	beq.n	8004482 <TIM_Base_SetConfig+0xb2>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a24      	ldr	r2, [pc, #144]	; (8004508 <TIM_Base_SetConfig+0x138>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d003      	beq.n	8004482 <TIM_Base_SetConfig+0xb2>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a23      	ldr	r2, [pc, #140]	; (800450c <TIM_Base_SetConfig+0x13c>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d108      	bne.n	8004494 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004488:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	68fa      	ldr	r2, [r7, #12]
 8004490:	4313      	orrs	r3, r2
 8004492:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	695b      	ldr	r3, [r3, #20]
 800449e:	4313      	orrs	r3, r2
 80044a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	68fa      	ldr	r2, [r7, #12]
 80044a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	689a      	ldr	r2, [r3, #8]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a0a      	ldr	r2, [pc, #40]	; (80044e4 <TIM_Base_SetConfig+0x114>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d003      	beq.n	80044c8 <TIM_Base_SetConfig+0xf8>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a0c      	ldr	r2, [pc, #48]	; (80044f4 <TIM_Base_SetConfig+0x124>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d103      	bne.n	80044d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	691a      	ldr	r2, [r3, #16]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	615a      	str	r2, [r3, #20]
}
 80044d6:	bf00      	nop
 80044d8:	3714      	adds	r7, #20
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	40010000 	.word	0x40010000
 80044e8:	40000400 	.word	0x40000400
 80044ec:	40000800 	.word	0x40000800
 80044f0:	40000c00 	.word	0x40000c00
 80044f4:	40010400 	.word	0x40010400
 80044f8:	40014000 	.word	0x40014000
 80044fc:	40014400 	.word	0x40014400
 8004500:	40014800 	.word	0x40014800
 8004504:	40001800 	.word	0x40001800
 8004508:	40001c00 	.word	0x40001c00
 800450c:	40002000 	.word	0x40002000

08004510 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004510:	b480      	push	{r7}
 8004512:	b087      	sub	sp, #28
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a1b      	ldr	r3, [r3, #32]
 800451e:	f023 0201 	bic.w	r2, r3, #1
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a1b      	ldr	r3, [r3, #32]
 800452a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	699b      	ldr	r3, [r3, #24]
 8004536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800453e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f023 0303 	bic.w	r3, r3, #3
 8004546:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68fa      	ldr	r2, [r7, #12]
 800454e:	4313      	orrs	r3, r2
 8004550:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	f023 0302 	bic.w	r3, r3, #2
 8004558:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	697a      	ldr	r2, [r7, #20]
 8004560:	4313      	orrs	r3, r2
 8004562:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a20      	ldr	r2, [pc, #128]	; (80045e8 <TIM_OC1_SetConfig+0xd8>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d003      	beq.n	8004574 <TIM_OC1_SetConfig+0x64>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a1f      	ldr	r2, [pc, #124]	; (80045ec <TIM_OC1_SetConfig+0xdc>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d10c      	bne.n	800458e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	f023 0308 	bic.w	r3, r3, #8
 800457a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	697a      	ldr	r2, [r7, #20]
 8004582:	4313      	orrs	r3, r2
 8004584:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	f023 0304 	bic.w	r3, r3, #4
 800458c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a15      	ldr	r2, [pc, #84]	; (80045e8 <TIM_OC1_SetConfig+0xd8>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d003      	beq.n	800459e <TIM_OC1_SetConfig+0x8e>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a14      	ldr	r2, [pc, #80]	; (80045ec <TIM_OC1_SetConfig+0xdc>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d111      	bne.n	80045c2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	695b      	ldr	r3, [r3, #20]
 80045b2:	693a      	ldr	r2, [r7, #16]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	699b      	ldr	r3, [r3, #24]
 80045bc:	693a      	ldr	r2, [r7, #16]
 80045be:	4313      	orrs	r3, r2
 80045c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	693a      	ldr	r2, [r7, #16]
 80045c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	68fa      	ldr	r2, [r7, #12]
 80045cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	685a      	ldr	r2, [r3, #4]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	697a      	ldr	r2, [r7, #20]
 80045da:	621a      	str	r2, [r3, #32]
}
 80045dc:	bf00      	nop
 80045de:	371c      	adds	r7, #28
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr
 80045e8:	40010000 	.word	0x40010000
 80045ec:	40010400 	.word	0x40010400

080045f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b087      	sub	sp, #28
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a1b      	ldr	r3, [r3, #32]
 80045fe:	f023 0210 	bic.w	r2, r3, #16
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a1b      	ldr	r3, [r3, #32]
 800460a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	699b      	ldr	r3, [r3, #24]
 8004616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800461e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004626:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	021b      	lsls	r3, r3, #8
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	4313      	orrs	r3, r2
 8004632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	f023 0320 	bic.w	r3, r3, #32
 800463a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	011b      	lsls	r3, r3, #4
 8004642:	697a      	ldr	r2, [r7, #20]
 8004644:	4313      	orrs	r3, r2
 8004646:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a22      	ldr	r2, [pc, #136]	; (80046d4 <TIM_OC2_SetConfig+0xe4>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d003      	beq.n	8004658 <TIM_OC2_SetConfig+0x68>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4a21      	ldr	r2, [pc, #132]	; (80046d8 <TIM_OC2_SetConfig+0xe8>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d10d      	bne.n	8004674 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800465e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	011b      	lsls	r3, r3, #4
 8004666:	697a      	ldr	r2, [r7, #20]
 8004668:	4313      	orrs	r3, r2
 800466a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004672:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a17      	ldr	r2, [pc, #92]	; (80046d4 <TIM_OC2_SetConfig+0xe4>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d003      	beq.n	8004684 <TIM_OC2_SetConfig+0x94>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a16      	ldr	r2, [pc, #88]	; (80046d8 <TIM_OC2_SetConfig+0xe8>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d113      	bne.n	80046ac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800468a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004692:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	695b      	ldr	r3, [r3, #20]
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	693a      	ldr	r2, [r7, #16]
 800469c:	4313      	orrs	r3, r2
 800469e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	699b      	ldr	r3, [r3, #24]
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	693a      	ldr	r2, [r7, #16]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	693a      	ldr	r2, [r7, #16]
 80046b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	68fa      	ldr	r2, [r7, #12]
 80046b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	685a      	ldr	r2, [r3, #4]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	697a      	ldr	r2, [r7, #20]
 80046c4:	621a      	str	r2, [r3, #32]
}
 80046c6:	bf00      	nop
 80046c8:	371c      	adds	r7, #28
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	40010000 	.word	0x40010000
 80046d8:	40010400 	.word	0x40010400

080046dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046dc:	b480      	push	{r7}
 80046de:	b087      	sub	sp, #28
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a1b      	ldr	r3, [r3, #32]
 80046ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a1b      	ldr	r3, [r3, #32]
 80046f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	69db      	ldr	r3, [r3, #28]
 8004702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800470a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f023 0303 	bic.w	r3, r3, #3
 8004712:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68fa      	ldr	r2, [r7, #12]
 800471a:	4313      	orrs	r3, r2
 800471c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004724:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	021b      	lsls	r3, r3, #8
 800472c:	697a      	ldr	r2, [r7, #20]
 800472e:	4313      	orrs	r3, r2
 8004730:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a21      	ldr	r2, [pc, #132]	; (80047bc <TIM_OC3_SetConfig+0xe0>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d003      	beq.n	8004742 <TIM_OC3_SetConfig+0x66>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a20      	ldr	r2, [pc, #128]	; (80047c0 <TIM_OC3_SetConfig+0xe4>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d10d      	bne.n	800475e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004748:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	021b      	lsls	r3, r3, #8
 8004750:	697a      	ldr	r2, [r7, #20]
 8004752:	4313      	orrs	r3, r2
 8004754:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800475c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a16      	ldr	r2, [pc, #88]	; (80047bc <TIM_OC3_SetConfig+0xe0>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d003      	beq.n	800476e <TIM_OC3_SetConfig+0x92>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a15      	ldr	r2, [pc, #84]	; (80047c0 <TIM_OC3_SetConfig+0xe4>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d113      	bne.n	8004796 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004774:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800477c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	011b      	lsls	r3, r3, #4
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	4313      	orrs	r3, r2
 8004788:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	699b      	ldr	r3, [r3, #24]
 800478e:	011b      	lsls	r3, r3, #4
 8004790:	693a      	ldr	r2, [r7, #16]
 8004792:	4313      	orrs	r3, r2
 8004794:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	693a      	ldr	r2, [r7, #16]
 800479a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	68fa      	ldr	r2, [r7, #12]
 80047a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	685a      	ldr	r2, [r3, #4]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	697a      	ldr	r2, [r7, #20]
 80047ae:	621a      	str	r2, [r3, #32]
}
 80047b0:	bf00      	nop
 80047b2:	371c      	adds	r7, #28
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr
 80047bc:	40010000 	.word	0x40010000
 80047c0:	40010400 	.word	0x40010400

080047c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b087      	sub	sp, #28
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a1b      	ldr	r3, [r3, #32]
 80047d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a1b      	ldr	r3, [r3, #32]
 80047de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	69db      	ldr	r3, [r3, #28]
 80047ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	021b      	lsls	r3, r3, #8
 8004802:	68fa      	ldr	r2, [r7, #12]
 8004804:	4313      	orrs	r3, r2
 8004806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800480e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	031b      	lsls	r3, r3, #12
 8004816:	693a      	ldr	r2, [r7, #16]
 8004818:	4313      	orrs	r3, r2
 800481a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a12      	ldr	r2, [pc, #72]	; (8004868 <TIM_OC4_SetConfig+0xa4>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d003      	beq.n	800482c <TIM_OC4_SetConfig+0x68>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a11      	ldr	r2, [pc, #68]	; (800486c <TIM_OC4_SetConfig+0xa8>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d109      	bne.n	8004840 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004832:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	695b      	ldr	r3, [r3, #20]
 8004838:	019b      	lsls	r3, r3, #6
 800483a:	697a      	ldr	r2, [r7, #20]
 800483c:	4313      	orrs	r3, r2
 800483e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	685a      	ldr	r2, [r3, #4]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	693a      	ldr	r2, [r7, #16]
 8004858:	621a      	str	r2, [r3, #32]
}
 800485a:	bf00      	nop
 800485c:	371c      	adds	r7, #28
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop
 8004868:	40010000 	.word	0x40010000
 800486c:	40010400 	.word	0x40010400

08004870 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004870:	b480      	push	{r7}
 8004872:	b087      	sub	sp, #28
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6a1b      	ldr	r3, [r3, #32]
 8004880:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6a1b      	ldr	r3, [r3, #32]
 8004886:	f023 0201 	bic.w	r2, r3, #1
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	699b      	ldr	r3, [r3, #24]
 8004892:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800489a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	011b      	lsls	r3, r3, #4
 80048a0:	693a      	ldr	r2, [r7, #16]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	f023 030a 	bic.w	r3, r3, #10
 80048ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048ae:	697a      	ldr	r2, [r7, #20]
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	693a      	ldr	r2, [r7, #16]
 80048ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	697a      	ldr	r2, [r7, #20]
 80048c0:	621a      	str	r2, [r3, #32]
}
 80048c2:	bf00      	nop
 80048c4:	371c      	adds	r7, #28
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr

080048ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048ce:	b480      	push	{r7}
 80048d0:	b087      	sub	sp, #28
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	60f8      	str	r0, [r7, #12]
 80048d6:	60b9      	str	r1, [r7, #8]
 80048d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6a1b      	ldr	r3, [r3, #32]
 80048de:	f023 0210 	bic.w	r2, r3, #16
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	699b      	ldr	r3, [r3, #24]
 80048ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6a1b      	ldr	r3, [r3, #32]
 80048f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	031b      	lsls	r3, r3, #12
 80048fe:	697a      	ldr	r2, [r7, #20]
 8004900:	4313      	orrs	r3, r2
 8004902:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800490a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	011b      	lsls	r3, r3, #4
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	4313      	orrs	r3, r2
 8004914:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	697a      	ldr	r2, [r7, #20]
 800491a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	693a      	ldr	r2, [r7, #16]
 8004920:	621a      	str	r2, [r3, #32]
}
 8004922:	bf00      	nop
 8004924:	371c      	adds	r7, #28
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr

0800492e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800492e:	b480      	push	{r7}
 8004930:	b085      	sub	sp, #20
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
 8004936:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004944:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004946:	683a      	ldr	r2, [r7, #0]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	4313      	orrs	r3, r2
 800494c:	f043 0307 	orr.w	r3, r3, #7
 8004950:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	68fa      	ldr	r2, [r7, #12]
 8004956:	609a      	str	r2, [r3, #8]
}
 8004958:	bf00      	nop
 800495a:	3714      	adds	r7, #20
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004964:	b480      	push	{r7}
 8004966:	b087      	sub	sp, #28
 8004968:	af00      	add	r7, sp, #0
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	607a      	str	r2, [r7, #4]
 8004970:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800497e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	021a      	lsls	r2, r3, #8
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	431a      	orrs	r2, r3
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	4313      	orrs	r3, r2
 800498c:	697a      	ldr	r2, [r7, #20]
 800498e:	4313      	orrs	r3, r2
 8004990:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	697a      	ldr	r2, [r7, #20]
 8004996:	609a      	str	r2, [r3, #8]
}
 8004998:	bf00      	nop
 800499a:	371c      	adds	r7, #28
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b087      	sub	sp, #28
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	f003 031f 	and.w	r3, r3, #31
 80049b6:	2201      	movs	r2, #1
 80049b8:	fa02 f303 	lsl.w	r3, r2, r3
 80049bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6a1a      	ldr	r2, [r3, #32]
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	43db      	mvns	r3, r3
 80049c6:	401a      	ands	r2, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6a1a      	ldr	r2, [r3, #32]
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	f003 031f 	and.w	r3, r3, #31
 80049d6:	6879      	ldr	r1, [r7, #4]
 80049d8:	fa01 f303 	lsl.w	r3, r1, r3
 80049dc:	431a      	orrs	r2, r3
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	621a      	str	r2, [r3, #32]
}
 80049e2:	bf00      	nop
 80049e4:	371c      	adds	r7, #28
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
	...

080049f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b085      	sub	sp, #20
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d101      	bne.n	8004a08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a04:	2302      	movs	r3, #2
 8004a06:	e05a      	b.n	8004abe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2202      	movs	r2, #2
 8004a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68fa      	ldr	r2, [r7, #12]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a21      	ldr	r2, [pc, #132]	; (8004acc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d022      	beq.n	8004a92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a54:	d01d      	beq.n	8004a92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a1d      	ldr	r2, [pc, #116]	; (8004ad0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d018      	beq.n	8004a92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a1b      	ldr	r2, [pc, #108]	; (8004ad4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d013      	beq.n	8004a92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a1a      	ldr	r2, [pc, #104]	; (8004ad8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d00e      	beq.n	8004a92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a18      	ldr	r2, [pc, #96]	; (8004adc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d009      	beq.n	8004a92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a17      	ldr	r2, [pc, #92]	; (8004ae0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d004      	beq.n	8004a92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a15      	ldr	r2, [pc, #84]	; (8004ae4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d10c      	bne.n	8004aac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	68ba      	ldr	r2, [r7, #8]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68ba      	ldr	r2, [r7, #8]
 8004aaa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004abc:	2300      	movs	r3, #0
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3714      	adds	r7, #20
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
 8004aca:	bf00      	nop
 8004acc:	40010000 	.word	0x40010000
 8004ad0:	40000400 	.word	0x40000400
 8004ad4:	40000800 	.word	0x40000800
 8004ad8:	40000c00 	.word	0x40000c00
 8004adc:	40010400 	.word	0x40010400
 8004ae0:	40014000 	.word	0x40014000
 8004ae4:	40001800 	.word	0x40001800

08004ae8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b085      	sub	sp, #20
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004af2:	2300      	movs	r3, #0
 8004af4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d101      	bne.n	8004b04 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004b00:	2302      	movs	r3, #2
 8004b02:	e03d      	b.n	8004b80 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	695b      	ldr	r3, [r3, #20]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	69db      	ldr	r3, [r3, #28]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	68fa      	ldr	r2, [r7, #12]
 8004b74:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b7e:	2300      	movs	r3, #0
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3714      	adds	r7, #20
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b94:	bf00      	nop
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ba8:	bf00      	nop
 8004baa:	370c      	adds	r7, #12
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr

08004bb4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b082      	sub	sp, #8
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d101      	bne.n	8004bc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e03f      	b.n	8004c46 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d106      	bne.n	8004be0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f7fc fd3a 	bl	8001654 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2224      	movs	r2, #36	; 0x24
 8004be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68da      	ldr	r2, [r3, #12]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004bf6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f000 fad5 	bl	80051a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	691a      	ldr	r2, [r3, #16]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	695a      	ldr	r2, [r3, #20]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	68da      	ldr	r2, [r3, #12]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2220      	movs	r2, #32
 8004c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2220      	movs	r2, #32
 8004c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3708      	adds	r7, #8
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}

08004c4e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c4e:	b580      	push	{r7, lr}
 8004c50:	b08a      	sub	sp, #40	; 0x28
 8004c52:	af02      	add	r7, sp, #8
 8004c54:	60f8      	str	r0, [r7, #12]
 8004c56:	60b9      	str	r1, [r7, #8]
 8004c58:	603b      	str	r3, [r7, #0]
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	2b20      	cmp	r3, #32
 8004c6c:	d17c      	bne.n	8004d68 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d002      	beq.n	8004c7a <HAL_UART_Transmit+0x2c>
 8004c74:	88fb      	ldrh	r3, [r7, #6]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d101      	bne.n	8004c7e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e075      	b.n	8004d6a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d101      	bne.n	8004c8c <HAL_UART_Transmit+0x3e>
 8004c88:	2302      	movs	r3, #2
 8004c8a:	e06e      	b.n	8004d6a <HAL_UART_Transmit+0x11c>
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2200      	movs	r2, #0
 8004c98:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2221      	movs	r2, #33	; 0x21
 8004c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ca2:	f7fc fe61 	bl	8001968 <HAL_GetTick>
 8004ca6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	88fa      	ldrh	r2, [r7, #6]
 8004cac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	88fa      	ldrh	r2, [r7, #6]
 8004cb2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cbc:	d108      	bne.n	8004cd0 <HAL_UART_Transmit+0x82>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d104      	bne.n	8004cd0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	61bb      	str	r3, [r7, #24]
 8004cce:	e003      	b.n	8004cd8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004ce0:	e02a      	b.n	8004d38 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	9300      	str	r3, [sp, #0]
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	2180      	movs	r1, #128	; 0x80
 8004cec:	68f8      	ldr	r0, [r7, #12]
 8004cee:	f000 f9ed 	bl	80050cc <UART_WaitOnFlagUntilTimeout>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d001      	beq.n	8004cfc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	e036      	b.n	8004d6a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d10b      	bne.n	8004d1a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	881b      	ldrh	r3, [r3, #0]
 8004d06:	461a      	mov	r2, r3
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d10:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004d12:	69bb      	ldr	r3, [r7, #24]
 8004d14:	3302      	adds	r3, #2
 8004d16:	61bb      	str	r3, [r7, #24]
 8004d18:	e007      	b.n	8004d2a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	781a      	ldrb	r2, [r3, #0]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	3301      	adds	r3, #1
 8004d28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	3b01      	subs	r3, #1
 8004d32:	b29a      	uxth	r2, r3
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d1cf      	bne.n	8004ce2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	9300      	str	r3, [sp, #0]
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	2140      	movs	r1, #64	; 0x40
 8004d4c:	68f8      	ldr	r0, [r7, #12]
 8004d4e:	f000 f9bd 	bl	80050cc <UART_WaitOnFlagUntilTimeout>
 8004d52:	4603      	mov	r3, r0
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d001      	beq.n	8004d5c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004d58:	2303      	movs	r3, #3
 8004d5a:	e006      	b.n	8004d6a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2220      	movs	r2, #32
 8004d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004d64:	2300      	movs	r3, #0
 8004d66:	e000      	b.n	8004d6a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004d68:	2302      	movs	r3, #2
  }
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3720      	adds	r7, #32
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}

08004d72 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d72:	b580      	push	{r7, lr}
 8004d74:	b08a      	sub	sp, #40	; 0x28
 8004d76:	af02      	add	r7, sp, #8
 8004d78:	60f8      	str	r0, [r7, #12]
 8004d7a:	60b9      	str	r1, [r7, #8]
 8004d7c:	603b      	str	r3, [r7, #0]
 8004d7e:	4613      	mov	r3, r2
 8004d80:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d82:	2300      	movs	r3, #0
 8004d84:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2b20      	cmp	r3, #32
 8004d90:	f040 808c 	bne.w	8004eac <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d002      	beq.n	8004da0 <HAL_UART_Receive+0x2e>
 8004d9a:	88fb      	ldrh	r3, [r7, #6]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d101      	bne.n	8004da4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e084      	b.n	8004eae <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d101      	bne.n	8004db2 <HAL_UART_Receive+0x40>
 8004dae:	2302      	movs	r3, #2
 8004db0:	e07d      	b.n	8004eae <HAL_UART_Receive+0x13c>
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2201      	movs	r2, #1
 8004db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2222      	movs	r2, #34	; 0x22
 8004dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004dce:	f7fc fdcb 	bl	8001968 <HAL_GetTick>
 8004dd2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	88fa      	ldrh	r2, [r7, #6]
 8004dd8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	88fa      	ldrh	r2, [r7, #6]
 8004dde:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004de8:	d108      	bne.n	8004dfc <HAL_UART_Receive+0x8a>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d104      	bne.n	8004dfc <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8004df2:	2300      	movs	r3, #0
 8004df4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	61bb      	str	r3, [r7, #24]
 8004dfa:	e003      	b.n	8004e04 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e00:	2300      	movs	r3, #0
 8004e02:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004e0c:	e043      	b.n	8004e96 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	9300      	str	r3, [sp, #0]
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	2200      	movs	r2, #0
 8004e16:	2120      	movs	r1, #32
 8004e18:	68f8      	ldr	r0, [r7, #12]
 8004e1a:	f000 f957 	bl	80050cc <UART_WaitOnFlagUntilTimeout>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d001      	beq.n	8004e28 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	e042      	b.n	8004eae <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d10c      	bne.n	8004e48 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e3a:	b29a      	uxth	r2, r3
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	3302      	adds	r3, #2
 8004e44:	61bb      	str	r3, [r7, #24]
 8004e46:	e01f      	b.n	8004e88 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e50:	d007      	beq.n	8004e62 <HAL_UART_Receive+0xf0>
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d10a      	bne.n	8004e70 <HAL_UART_Receive+0xfe>
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d106      	bne.n	8004e70 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	b2da      	uxtb	r2, r3
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	701a      	strb	r2, [r3, #0]
 8004e6e:	e008      	b.n	8004e82 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e7c:	b2da      	uxtb	r2, r3
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	3301      	adds	r3, #1
 8004e86:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	b29a      	uxth	r2, r3
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d1b6      	bne.n	8004e0e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2220      	movs	r2, #32
 8004ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	e000      	b.n	8004eae <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004eac:	2302      	movs	r3, #2
  }
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3720      	adds	r7, #32
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}

08004eb6 <HAL_UART_AbortTransmit>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
{
 8004eb6:	b580      	push	{r7, lr}
 8004eb8:	b08e      	sub	sp, #56	; 0x38
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	330c      	adds	r3, #12
 8004ec4:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec6:	6a3b      	ldr	r3, [r7, #32]
 8004ec8:	e853 3f00 	ldrex	r3, [r3]
 8004ecc:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004ed4:	637b      	str	r3, [r7, #52]	; 0x34
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	330c      	adds	r3, #12
 8004edc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ede:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ee0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ee4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ee6:	e841 2300 	strex	r3, r2, [r1]
 8004eea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d1e5      	bne.n	8004ebe <HAL_UART_AbortTransmit+0x8>

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	695b      	ldr	r3, [r3, #20]
 8004ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004efc:	2b80      	cmp	r3, #128	; 0x80
 8004efe:	d136      	bne.n	8004f6e <HAL_UART_AbortTransmit+0xb8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	3314      	adds	r3, #20
 8004f06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	e853 3f00 	ldrex	r3, [r3]
 8004f0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f16:	633b      	str	r3, [r7, #48]	; 0x30
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	3314      	adds	r3, #20
 8004f1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f20:	61ba      	str	r2, [r7, #24]
 8004f22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f24:	6979      	ldr	r1, [r7, #20]
 8004f26:	69ba      	ldr	r2, [r7, #24]
 8004f28:	e841 2300 	strex	r3, r2, [r1]
 8004f2c:	613b      	str	r3, [r7, #16]
   return(result);
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d1e5      	bne.n	8004f00 <HAL_UART_AbortTransmit+0x4a>

    /* Abort the UART DMA Tx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d018      	beq.n	8004f6e <HAL_UART_AbortTransmit+0xb8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f40:	2200      	movs	r2, #0
 8004f42:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f7fd f987 	bl	800225c <HAL_DMA_Abort>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d00c      	beq.n	8004f6e <HAL_UART_AbortTransmit+0xb8>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f7fd fb9b 	bl	8002694 <HAL_DMA_GetError>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2b20      	cmp	r3, #32
 8004f62:	d104      	bne.n	8004f6e <HAL_UART_AbortTransmit+0xb8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2210      	movs	r2, #16
 8004f68:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e007      	b.n	8004f7e <HAL_UART_AbortTransmit+0xc8>
      }
    }
  }

  /* Reset Tx transfer counter */
  huart->TxXferCount = 0x00U;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2220      	movs	r2, #32
 8004f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3738      	adds	r7, #56	; 0x38
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}

08004f86 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8004f86:	b580      	push	{r7, lr}
 8004f88:	b09a      	sub	sp, #104	; 0x68
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	330c      	adds	r3, #12
 8004f94:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f98:	e853 3f00 	ldrex	r3, [r3]
 8004f9c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004f9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fa0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004fa4:	667b      	str	r3, [r7, #100]	; 0x64
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	330c      	adds	r3, #12
 8004fac:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004fae:	657a      	str	r2, [r7, #84]	; 0x54
 8004fb0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004fb4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004fb6:	e841 2300 	strex	r3, r2, [r1]
 8004fba:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004fbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d1e5      	bne.n	8004f8e <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	3314      	adds	r3, #20
 8004fc8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fcc:	e853 3f00 	ldrex	r3, [r3]
 8004fd0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd4:	f023 0301 	bic.w	r3, r3, #1
 8004fd8:	663b      	str	r3, [r7, #96]	; 0x60
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	3314      	adds	r3, #20
 8004fe0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004fe2:	643a      	str	r2, [r7, #64]	; 0x40
 8004fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004fe8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004fea:	e841 2300 	strex	r3, r2, [r1]
 8004fee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d1e5      	bne.n	8004fc2 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d119      	bne.n	8005032 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	330c      	adds	r3, #12
 8005004:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005006:	6a3b      	ldr	r3, [r7, #32]
 8005008:	e853 3f00 	ldrex	r3, [r3]
 800500c:	61fb      	str	r3, [r7, #28]
   return(result);
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	f023 0310 	bic.w	r3, r3, #16
 8005014:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	330c      	adds	r3, #12
 800501c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800501e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005020:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005022:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005024:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005026:	e841 2300 	strex	r3, r2, [r1]
 800502a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800502c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502e:	2b00      	cmp	r3, #0
 8005030:	d1e5      	bne.n	8004ffe <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	695b      	ldr	r3, [r3, #20]
 8005038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800503c:	2b40      	cmp	r3, #64	; 0x40
 800503e:	d136      	bne.n	80050ae <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	3314      	adds	r3, #20
 8005046:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	e853 3f00 	ldrex	r3, [r3]
 800504e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005056:	65bb      	str	r3, [r7, #88]	; 0x58
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	3314      	adds	r3, #20
 800505e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005060:	61ba      	str	r2, [r7, #24]
 8005062:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005064:	6979      	ldr	r1, [r7, #20]
 8005066:	69ba      	ldr	r2, [r7, #24]
 8005068:	e841 2300 	strex	r3, r2, [r1]
 800506c:	613b      	str	r3, [r7, #16]
   return(result);
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d1e5      	bne.n	8005040 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005078:	2b00      	cmp	r3, #0
 800507a:	d018      	beq.n	80050ae <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005080:	2200      	movs	r2, #0
 8005082:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005088:	4618      	mov	r0, r3
 800508a:	f7fd f8e7 	bl	800225c <HAL_DMA_Abort>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d00c      	beq.n	80050ae <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005098:	4618      	mov	r0, r3
 800509a:	f7fd fafb 	bl	8002694 <HAL_DMA_GetError>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b20      	cmp	r3, #32
 80050a2:	d104      	bne.n	80050ae <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2210      	movs	r2, #16
 80050a8:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e00a      	b.n	80050c4 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2220      	movs	r2, #32
 80050b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80050c2:	2300      	movs	r3, #0
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3768      	adds	r7, #104	; 0x68
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b090      	sub	sp, #64	; 0x40
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	603b      	str	r3, [r7, #0]
 80050d8:	4613      	mov	r3, r2
 80050da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050dc:	e050      	b.n	8005180 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e4:	d04c      	beq.n	8005180 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80050e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d007      	beq.n	80050fc <UART_WaitOnFlagUntilTimeout+0x30>
 80050ec:	f7fc fc3c 	bl	8001968 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d241      	bcs.n	8005180 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	330c      	adds	r3, #12
 8005102:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005106:	e853 3f00 	ldrex	r3, [r3]
 800510a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800510c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005112:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	330c      	adds	r3, #12
 800511a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800511c:	637a      	str	r2, [r7, #52]	; 0x34
 800511e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005120:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005122:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005124:	e841 2300 	strex	r3, r2, [r1]
 8005128:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800512a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800512c:	2b00      	cmp	r3, #0
 800512e:	d1e5      	bne.n	80050fc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	3314      	adds	r3, #20
 8005136:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	e853 3f00 	ldrex	r3, [r3]
 800513e:	613b      	str	r3, [r7, #16]
   return(result);
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	f023 0301 	bic.w	r3, r3, #1
 8005146:	63bb      	str	r3, [r7, #56]	; 0x38
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	3314      	adds	r3, #20
 800514e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005150:	623a      	str	r2, [r7, #32]
 8005152:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005154:	69f9      	ldr	r1, [r7, #28]
 8005156:	6a3a      	ldr	r2, [r7, #32]
 8005158:	e841 2300 	strex	r3, r2, [r1]
 800515c:	61bb      	str	r3, [r7, #24]
   return(result);
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d1e5      	bne.n	8005130 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2220      	movs	r2, #32
 8005168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2220      	movs	r2, #32
 8005170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2200      	movs	r2, #0
 8005178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800517c:	2303      	movs	r3, #3
 800517e:	e00f      	b.n	80051a0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	4013      	ands	r3, r2
 800518a:	68ba      	ldr	r2, [r7, #8]
 800518c:	429a      	cmp	r2, r3
 800518e:	bf0c      	ite	eq
 8005190:	2301      	moveq	r3, #1
 8005192:	2300      	movne	r3, #0
 8005194:	b2db      	uxtb	r3, r3
 8005196:	461a      	mov	r2, r3
 8005198:	79fb      	ldrb	r3, [r7, #7]
 800519a:	429a      	cmp	r2, r3
 800519c:	d09f      	beq.n	80050de <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800519e:	2300      	movs	r3, #0
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3740      	adds	r7, #64	; 0x40
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051ac:	b09f      	sub	sp, #124	; 0x7c
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	691b      	ldr	r3, [r3, #16]
 80051b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80051bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051be:	68d9      	ldr	r1, [r3, #12]
 80051c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	ea40 0301 	orr.w	r3, r0, r1
 80051c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80051ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051cc:	689a      	ldr	r2, [r3, #8]
 80051ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	431a      	orrs	r2, r3
 80051d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051d6:	695b      	ldr	r3, [r3, #20]
 80051d8:	431a      	orrs	r2, r3
 80051da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051dc:	69db      	ldr	r3, [r3, #28]
 80051de:	4313      	orrs	r3, r2
 80051e0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80051e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80051ec:	f021 010c 	bic.w	r1, r1, #12
 80051f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80051f6:	430b      	orrs	r3, r1
 80051f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80051fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	695b      	ldr	r3, [r3, #20]
 8005200:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005204:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005206:	6999      	ldr	r1, [r3, #24]
 8005208:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	ea40 0301 	orr.w	r3, r0, r1
 8005210:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005212:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	4bc5      	ldr	r3, [pc, #788]	; (800552c <UART_SetConfig+0x384>)
 8005218:	429a      	cmp	r2, r3
 800521a:	d004      	beq.n	8005226 <UART_SetConfig+0x7e>
 800521c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	4bc3      	ldr	r3, [pc, #780]	; (8005530 <UART_SetConfig+0x388>)
 8005222:	429a      	cmp	r2, r3
 8005224:	d103      	bne.n	800522e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005226:	f7fe f94f 	bl	80034c8 <HAL_RCC_GetPCLK2Freq>
 800522a:	6778      	str	r0, [r7, #116]	; 0x74
 800522c:	e002      	b.n	8005234 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800522e:	f7fe f937 	bl	80034a0 <HAL_RCC_GetPCLK1Freq>
 8005232:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005234:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005236:	69db      	ldr	r3, [r3, #28]
 8005238:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800523c:	f040 80b6 	bne.w	80053ac <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005240:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005242:	461c      	mov	r4, r3
 8005244:	f04f 0500 	mov.w	r5, #0
 8005248:	4622      	mov	r2, r4
 800524a:	462b      	mov	r3, r5
 800524c:	1891      	adds	r1, r2, r2
 800524e:	6439      	str	r1, [r7, #64]	; 0x40
 8005250:	415b      	adcs	r3, r3
 8005252:	647b      	str	r3, [r7, #68]	; 0x44
 8005254:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005258:	1912      	adds	r2, r2, r4
 800525a:	eb45 0303 	adc.w	r3, r5, r3
 800525e:	f04f 0000 	mov.w	r0, #0
 8005262:	f04f 0100 	mov.w	r1, #0
 8005266:	00d9      	lsls	r1, r3, #3
 8005268:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800526c:	00d0      	lsls	r0, r2, #3
 800526e:	4602      	mov	r2, r0
 8005270:	460b      	mov	r3, r1
 8005272:	1911      	adds	r1, r2, r4
 8005274:	6639      	str	r1, [r7, #96]	; 0x60
 8005276:	416b      	adcs	r3, r5
 8005278:	667b      	str	r3, [r7, #100]	; 0x64
 800527a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	461a      	mov	r2, r3
 8005280:	f04f 0300 	mov.w	r3, #0
 8005284:	1891      	adds	r1, r2, r2
 8005286:	63b9      	str	r1, [r7, #56]	; 0x38
 8005288:	415b      	adcs	r3, r3
 800528a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800528c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005290:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005294:	f7fa fff4 	bl	8000280 <__aeabi_uldivmod>
 8005298:	4602      	mov	r2, r0
 800529a:	460b      	mov	r3, r1
 800529c:	4ba5      	ldr	r3, [pc, #660]	; (8005534 <UART_SetConfig+0x38c>)
 800529e:	fba3 2302 	umull	r2, r3, r3, r2
 80052a2:	095b      	lsrs	r3, r3, #5
 80052a4:	011e      	lsls	r6, r3, #4
 80052a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052a8:	461c      	mov	r4, r3
 80052aa:	f04f 0500 	mov.w	r5, #0
 80052ae:	4622      	mov	r2, r4
 80052b0:	462b      	mov	r3, r5
 80052b2:	1891      	adds	r1, r2, r2
 80052b4:	6339      	str	r1, [r7, #48]	; 0x30
 80052b6:	415b      	adcs	r3, r3
 80052b8:	637b      	str	r3, [r7, #52]	; 0x34
 80052ba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80052be:	1912      	adds	r2, r2, r4
 80052c0:	eb45 0303 	adc.w	r3, r5, r3
 80052c4:	f04f 0000 	mov.w	r0, #0
 80052c8:	f04f 0100 	mov.w	r1, #0
 80052cc:	00d9      	lsls	r1, r3, #3
 80052ce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80052d2:	00d0      	lsls	r0, r2, #3
 80052d4:	4602      	mov	r2, r0
 80052d6:	460b      	mov	r3, r1
 80052d8:	1911      	adds	r1, r2, r4
 80052da:	65b9      	str	r1, [r7, #88]	; 0x58
 80052dc:	416b      	adcs	r3, r5
 80052de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	461a      	mov	r2, r3
 80052e6:	f04f 0300 	mov.w	r3, #0
 80052ea:	1891      	adds	r1, r2, r2
 80052ec:	62b9      	str	r1, [r7, #40]	; 0x28
 80052ee:	415b      	adcs	r3, r3
 80052f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80052f6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80052fa:	f7fa ffc1 	bl	8000280 <__aeabi_uldivmod>
 80052fe:	4602      	mov	r2, r0
 8005300:	460b      	mov	r3, r1
 8005302:	4b8c      	ldr	r3, [pc, #560]	; (8005534 <UART_SetConfig+0x38c>)
 8005304:	fba3 1302 	umull	r1, r3, r3, r2
 8005308:	095b      	lsrs	r3, r3, #5
 800530a:	2164      	movs	r1, #100	; 0x64
 800530c:	fb01 f303 	mul.w	r3, r1, r3
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	00db      	lsls	r3, r3, #3
 8005314:	3332      	adds	r3, #50	; 0x32
 8005316:	4a87      	ldr	r2, [pc, #540]	; (8005534 <UART_SetConfig+0x38c>)
 8005318:	fba2 2303 	umull	r2, r3, r2, r3
 800531c:	095b      	lsrs	r3, r3, #5
 800531e:	005b      	lsls	r3, r3, #1
 8005320:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005324:	441e      	add	r6, r3
 8005326:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005328:	4618      	mov	r0, r3
 800532a:	f04f 0100 	mov.w	r1, #0
 800532e:	4602      	mov	r2, r0
 8005330:	460b      	mov	r3, r1
 8005332:	1894      	adds	r4, r2, r2
 8005334:	623c      	str	r4, [r7, #32]
 8005336:	415b      	adcs	r3, r3
 8005338:	627b      	str	r3, [r7, #36]	; 0x24
 800533a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800533e:	1812      	adds	r2, r2, r0
 8005340:	eb41 0303 	adc.w	r3, r1, r3
 8005344:	f04f 0400 	mov.w	r4, #0
 8005348:	f04f 0500 	mov.w	r5, #0
 800534c:	00dd      	lsls	r5, r3, #3
 800534e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005352:	00d4      	lsls	r4, r2, #3
 8005354:	4622      	mov	r2, r4
 8005356:	462b      	mov	r3, r5
 8005358:	1814      	adds	r4, r2, r0
 800535a:	653c      	str	r4, [r7, #80]	; 0x50
 800535c:	414b      	adcs	r3, r1
 800535e:	657b      	str	r3, [r7, #84]	; 0x54
 8005360:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	461a      	mov	r2, r3
 8005366:	f04f 0300 	mov.w	r3, #0
 800536a:	1891      	adds	r1, r2, r2
 800536c:	61b9      	str	r1, [r7, #24]
 800536e:	415b      	adcs	r3, r3
 8005370:	61fb      	str	r3, [r7, #28]
 8005372:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005376:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800537a:	f7fa ff81 	bl	8000280 <__aeabi_uldivmod>
 800537e:	4602      	mov	r2, r0
 8005380:	460b      	mov	r3, r1
 8005382:	4b6c      	ldr	r3, [pc, #432]	; (8005534 <UART_SetConfig+0x38c>)
 8005384:	fba3 1302 	umull	r1, r3, r3, r2
 8005388:	095b      	lsrs	r3, r3, #5
 800538a:	2164      	movs	r1, #100	; 0x64
 800538c:	fb01 f303 	mul.w	r3, r1, r3
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	00db      	lsls	r3, r3, #3
 8005394:	3332      	adds	r3, #50	; 0x32
 8005396:	4a67      	ldr	r2, [pc, #412]	; (8005534 <UART_SetConfig+0x38c>)
 8005398:	fba2 2303 	umull	r2, r3, r2, r3
 800539c:	095b      	lsrs	r3, r3, #5
 800539e:	f003 0207 	and.w	r2, r3, #7
 80053a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4432      	add	r2, r6
 80053a8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80053aa:	e0b9      	b.n	8005520 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80053ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053ae:	461c      	mov	r4, r3
 80053b0:	f04f 0500 	mov.w	r5, #0
 80053b4:	4622      	mov	r2, r4
 80053b6:	462b      	mov	r3, r5
 80053b8:	1891      	adds	r1, r2, r2
 80053ba:	6139      	str	r1, [r7, #16]
 80053bc:	415b      	adcs	r3, r3
 80053be:	617b      	str	r3, [r7, #20]
 80053c0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80053c4:	1912      	adds	r2, r2, r4
 80053c6:	eb45 0303 	adc.w	r3, r5, r3
 80053ca:	f04f 0000 	mov.w	r0, #0
 80053ce:	f04f 0100 	mov.w	r1, #0
 80053d2:	00d9      	lsls	r1, r3, #3
 80053d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80053d8:	00d0      	lsls	r0, r2, #3
 80053da:	4602      	mov	r2, r0
 80053dc:	460b      	mov	r3, r1
 80053de:	eb12 0804 	adds.w	r8, r2, r4
 80053e2:	eb43 0905 	adc.w	r9, r3, r5
 80053e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	4618      	mov	r0, r3
 80053ec:	f04f 0100 	mov.w	r1, #0
 80053f0:	f04f 0200 	mov.w	r2, #0
 80053f4:	f04f 0300 	mov.w	r3, #0
 80053f8:	008b      	lsls	r3, r1, #2
 80053fa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80053fe:	0082      	lsls	r2, r0, #2
 8005400:	4640      	mov	r0, r8
 8005402:	4649      	mov	r1, r9
 8005404:	f7fa ff3c 	bl	8000280 <__aeabi_uldivmod>
 8005408:	4602      	mov	r2, r0
 800540a:	460b      	mov	r3, r1
 800540c:	4b49      	ldr	r3, [pc, #292]	; (8005534 <UART_SetConfig+0x38c>)
 800540e:	fba3 2302 	umull	r2, r3, r3, r2
 8005412:	095b      	lsrs	r3, r3, #5
 8005414:	011e      	lsls	r6, r3, #4
 8005416:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005418:	4618      	mov	r0, r3
 800541a:	f04f 0100 	mov.w	r1, #0
 800541e:	4602      	mov	r2, r0
 8005420:	460b      	mov	r3, r1
 8005422:	1894      	adds	r4, r2, r2
 8005424:	60bc      	str	r4, [r7, #8]
 8005426:	415b      	adcs	r3, r3
 8005428:	60fb      	str	r3, [r7, #12]
 800542a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800542e:	1812      	adds	r2, r2, r0
 8005430:	eb41 0303 	adc.w	r3, r1, r3
 8005434:	f04f 0400 	mov.w	r4, #0
 8005438:	f04f 0500 	mov.w	r5, #0
 800543c:	00dd      	lsls	r5, r3, #3
 800543e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005442:	00d4      	lsls	r4, r2, #3
 8005444:	4622      	mov	r2, r4
 8005446:	462b      	mov	r3, r5
 8005448:	1814      	adds	r4, r2, r0
 800544a:	64bc      	str	r4, [r7, #72]	; 0x48
 800544c:	414b      	adcs	r3, r1
 800544e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005450:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	4618      	mov	r0, r3
 8005456:	f04f 0100 	mov.w	r1, #0
 800545a:	f04f 0200 	mov.w	r2, #0
 800545e:	f04f 0300 	mov.w	r3, #0
 8005462:	008b      	lsls	r3, r1, #2
 8005464:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005468:	0082      	lsls	r2, r0, #2
 800546a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800546e:	f7fa ff07 	bl	8000280 <__aeabi_uldivmod>
 8005472:	4602      	mov	r2, r0
 8005474:	460b      	mov	r3, r1
 8005476:	4b2f      	ldr	r3, [pc, #188]	; (8005534 <UART_SetConfig+0x38c>)
 8005478:	fba3 1302 	umull	r1, r3, r3, r2
 800547c:	095b      	lsrs	r3, r3, #5
 800547e:	2164      	movs	r1, #100	; 0x64
 8005480:	fb01 f303 	mul.w	r3, r1, r3
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	011b      	lsls	r3, r3, #4
 8005488:	3332      	adds	r3, #50	; 0x32
 800548a:	4a2a      	ldr	r2, [pc, #168]	; (8005534 <UART_SetConfig+0x38c>)
 800548c:	fba2 2303 	umull	r2, r3, r2, r3
 8005490:	095b      	lsrs	r3, r3, #5
 8005492:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005496:	441e      	add	r6, r3
 8005498:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800549a:	4618      	mov	r0, r3
 800549c:	f04f 0100 	mov.w	r1, #0
 80054a0:	4602      	mov	r2, r0
 80054a2:	460b      	mov	r3, r1
 80054a4:	1894      	adds	r4, r2, r2
 80054a6:	603c      	str	r4, [r7, #0]
 80054a8:	415b      	adcs	r3, r3
 80054aa:	607b      	str	r3, [r7, #4]
 80054ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054b0:	1812      	adds	r2, r2, r0
 80054b2:	eb41 0303 	adc.w	r3, r1, r3
 80054b6:	f04f 0400 	mov.w	r4, #0
 80054ba:	f04f 0500 	mov.w	r5, #0
 80054be:	00dd      	lsls	r5, r3, #3
 80054c0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80054c4:	00d4      	lsls	r4, r2, #3
 80054c6:	4622      	mov	r2, r4
 80054c8:	462b      	mov	r3, r5
 80054ca:	eb12 0a00 	adds.w	sl, r2, r0
 80054ce:	eb43 0b01 	adc.w	fp, r3, r1
 80054d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	4618      	mov	r0, r3
 80054d8:	f04f 0100 	mov.w	r1, #0
 80054dc:	f04f 0200 	mov.w	r2, #0
 80054e0:	f04f 0300 	mov.w	r3, #0
 80054e4:	008b      	lsls	r3, r1, #2
 80054e6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80054ea:	0082      	lsls	r2, r0, #2
 80054ec:	4650      	mov	r0, sl
 80054ee:	4659      	mov	r1, fp
 80054f0:	f7fa fec6 	bl	8000280 <__aeabi_uldivmod>
 80054f4:	4602      	mov	r2, r0
 80054f6:	460b      	mov	r3, r1
 80054f8:	4b0e      	ldr	r3, [pc, #56]	; (8005534 <UART_SetConfig+0x38c>)
 80054fa:	fba3 1302 	umull	r1, r3, r3, r2
 80054fe:	095b      	lsrs	r3, r3, #5
 8005500:	2164      	movs	r1, #100	; 0x64
 8005502:	fb01 f303 	mul.w	r3, r1, r3
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	011b      	lsls	r3, r3, #4
 800550a:	3332      	adds	r3, #50	; 0x32
 800550c:	4a09      	ldr	r2, [pc, #36]	; (8005534 <UART_SetConfig+0x38c>)
 800550e:	fba2 2303 	umull	r2, r3, r2, r3
 8005512:	095b      	lsrs	r3, r3, #5
 8005514:	f003 020f 	and.w	r2, r3, #15
 8005518:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4432      	add	r2, r6
 800551e:	609a      	str	r2, [r3, #8]
}
 8005520:	bf00      	nop
 8005522:	377c      	adds	r7, #124	; 0x7c
 8005524:	46bd      	mov	sp, r7
 8005526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800552a:	bf00      	nop
 800552c:	40011000 	.word	0x40011000
 8005530:	40011400 	.word	0x40011400
 8005534:	51eb851f 	.word	0x51eb851f

08005538 <__errno>:
 8005538:	4b01      	ldr	r3, [pc, #4]	; (8005540 <__errno+0x8>)
 800553a:	6818      	ldr	r0, [r3, #0]
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop
 8005540:	20000070 	.word	0x20000070

08005544 <__libc_init_array>:
 8005544:	b570      	push	{r4, r5, r6, lr}
 8005546:	4d0d      	ldr	r5, [pc, #52]	; (800557c <__libc_init_array+0x38>)
 8005548:	4c0d      	ldr	r4, [pc, #52]	; (8005580 <__libc_init_array+0x3c>)
 800554a:	1b64      	subs	r4, r4, r5
 800554c:	10a4      	asrs	r4, r4, #2
 800554e:	2600      	movs	r6, #0
 8005550:	42a6      	cmp	r6, r4
 8005552:	d109      	bne.n	8005568 <__libc_init_array+0x24>
 8005554:	4d0b      	ldr	r5, [pc, #44]	; (8005584 <__libc_init_array+0x40>)
 8005556:	4c0c      	ldr	r4, [pc, #48]	; (8005588 <__libc_init_array+0x44>)
 8005558:	f000 fc4e 	bl	8005df8 <_init>
 800555c:	1b64      	subs	r4, r4, r5
 800555e:	10a4      	asrs	r4, r4, #2
 8005560:	2600      	movs	r6, #0
 8005562:	42a6      	cmp	r6, r4
 8005564:	d105      	bne.n	8005572 <__libc_init_array+0x2e>
 8005566:	bd70      	pop	{r4, r5, r6, pc}
 8005568:	f855 3b04 	ldr.w	r3, [r5], #4
 800556c:	4798      	blx	r3
 800556e:	3601      	adds	r6, #1
 8005570:	e7ee      	b.n	8005550 <__libc_init_array+0xc>
 8005572:	f855 3b04 	ldr.w	r3, [r5], #4
 8005576:	4798      	blx	r3
 8005578:	3601      	adds	r6, #1
 800557a:	e7f2      	b.n	8005562 <__libc_init_array+0x1e>
 800557c:	08005ea8 	.word	0x08005ea8
 8005580:	08005ea8 	.word	0x08005ea8
 8005584:	08005ea8 	.word	0x08005ea8
 8005588:	08005eac 	.word	0x08005eac

0800558c <memset>:
 800558c:	4402      	add	r2, r0
 800558e:	4603      	mov	r3, r0
 8005590:	4293      	cmp	r3, r2
 8005592:	d100      	bne.n	8005596 <memset+0xa>
 8005594:	4770      	bx	lr
 8005596:	f803 1b01 	strb.w	r1, [r3], #1
 800559a:	e7f9      	b.n	8005590 <memset+0x4>

0800559c <siprintf>:
 800559c:	b40e      	push	{r1, r2, r3}
 800559e:	b500      	push	{lr}
 80055a0:	b09c      	sub	sp, #112	; 0x70
 80055a2:	ab1d      	add	r3, sp, #116	; 0x74
 80055a4:	9002      	str	r0, [sp, #8]
 80055a6:	9006      	str	r0, [sp, #24]
 80055a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80055ac:	4809      	ldr	r0, [pc, #36]	; (80055d4 <siprintf+0x38>)
 80055ae:	9107      	str	r1, [sp, #28]
 80055b0:	9104      	str	r1, [sp, #16]
 80055b2:	4909      	ldr	r1, [pc, #36]	; (80055d8 <siprintf+0x3c>)
 80055b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80055b8:	9105      	str	r1, [sp, #20]
 80055ba:	6800      	ldr	r0, [r0, #0]
 80055bc:	9301      	str	r3, [sp, #4]
 80055be:	a902      	add	r1, sp, #8
 80055c0:	f000 f868 	bl	8005694 <_svfiprintf_r>
 80055c4:	9b02      	ldr	r3, [sp, #8]
 80055c6:	2200      	movs	r2, #0
 80055c8:	701a      	strb	r2, [r3, #0]
 80055ca:	b01c      	add	sp, #112	; 0x70
 80055cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80055d0:	b003      	add	sp, #12
 80055d2:	4770      	bx	lr
 80055d4:	20000070 	.word	0x20000070
 80055d8:	ffff0208 	.word	0xffff0208

080055dc <__ssputs_r>:
 80055dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055e0:	688e      	ldr	r6, [r1, #8]
 80055e2:	429e      	cmp	r6, r3
 80055e4:	4682      	mov	sl, r0
 80055e6:	460c      	mov	r4, r1
 80055e8:	4690      	mov	r8, r2
 80055ea:	461f      	mov	r7, r3
 80055ec:	d838      	bhi.n	8005660 <__ssputs_r+0x84>
 80055ee:	898a      	ldrh	r2, [r1, #12]
 80055f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80055f4:	d032      	beq.n	800565c <__ssputs_r+0x80>
 80055f6:	6825      	ldr	r5, [r4, #0]
 80055f8:	6909      	ldr	r1, [r1, #16]
 80055fa:	eba5 0901 	sub.w	r9, r5, r1
 80055fe:	6965      	ldr	r5, [r4, #20]
 8005600:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005604:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005608:	3301      	adds	r3, #1
 800560a:	444b      	add	r3, r9
 800560c:	106d      	asrs	r5, r5, #1
 800560e:	429d      	cmp	r5, r3
 8005610:	bf38      	it	cc
 8005612:	461d      	movcc	r5, r3
 8005614:	0553      	lsls	r3, r2, #21
 8005616:	d531      	bpl.n	800567c <__ssputs_r+0xa0>
 8005618:	4629      	mov	r1, r5
 800561a:	f000 fb47 	bl	8005cac <_malloc_r>
 800561e:	4606      	mov	r6, r0
 8005620:	b950      	cbnz	r0, 8005638 <__ssputs_r+0x5c>
 8005622:	230c      	movs	r3, #12
 8005624:	f8ca 3000 	str.w	r3, [sl]
 8005628:	89a3      	ldrh	r3, [r4, #12]
 800562a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800562e:	81a3      	strh	r3, [r4, #12]
 8005630:	f04f 30ff 	mov.w	r0, #4294967295
 8005634:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005638:	6921      	ldr	r1, [r4, #16]
 800563a:	464a      	mov	r2, r9
 800563c:	f000 fabe 	bl	8005bbc <memcpy>
 8005640:	89a3      	ldrh	r3, [r4, #12]
 8005642:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005646:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800564a:	81a3      	strh	r3, [r4, #12]
 800564c:	6126      	str	r6, [r4, #16]
 800564e:	6165      	str	r5, [r4, #20]
 8005650:	444e      	add	r6, r9
 8005652:	eba5 0509 	sub.w	r5, r5, r9
 8005656:	6026      	str	r6, [r4, #0]
 8005658:	60a5      	str	r5, [r4, #8]
 800565a:	463e      	mov	r6, r7
 800565c:	42be      	cmp	r6, r7
 800565e:	d900      	bls.n	8005662 <__ssputs_r+0x86>
 8005660:	463e      	mov	r6, r7
 8005662:	4632      	mov	r2, r6
 8005664:	6820      	ldr	r0, [r4, #0]
 8005666:	4641      	mov	r1, r8
 8005668:	f000 fab6 	bl	8005bd8 <memmove>
 800566c:	68a3      	ldr	r3, [r4, #8]
 800566e:	6822      	ldr	r2, [r4, #0]
 8005670:	1b9b      	subs	r3, r3, r6
 8005672:	4432      	add	r2, r6
 8005674:	60a3      	str	r3, [r4, #8]
 8005676:	6022      	str	r2, [r4, #0]
 8005678:	2000      	movs	r0, #0
 800567a:	e7db      	b.n	8005634 <__ssputs_r+0x58>
 800567c:	462a      	mov	r2, r5
 800567e:	f000 fb6f 	bl	8005d60 <_realloc_r>
 8005682:	4606      	mov	r6, r0
 8005684:	2800      	cmp	r0, #0
 8005686:	d1e1      	bne.n	800564c <__ssputs_r+0x70>
 8005688:	6921      	ldr	r1, [r4, #16]
 800568a:	4650      	mov	r0, sl
 800568c:	f000 fabe 	bl	8005c0c <_free_r>
 8005690:	e7c7      	b.n	8005622 <__ssputs_r+0x46>
	...

08005694 <_svfiprintf_r>:
 8005694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005698:	4698      	mov	r8, r3
 800569a:	898b      	ldrh	r3, [r1, #12]
 800569c:	061b      	lsls	r3, r3, #24
 800569e:	b09d      	sub	sp, #116	; 0x74
 80056a0:	4607      	mov	r7, r0
 80056a2:	460d      	mov	r5, r1
 80056a4:	4614      	mov	r4, r2
 80056a6:	d50e      	bpl.n	80056c6 <_svfiprintf_r+0x32>
 80056a8:	690b      	ldr	r3, [r1, #16]
 80056aa:	b963      	cbnz	r3, 80056c6 <_svfiprintf_r+0x32>
 80056ac:	2140      	movs	r1, #64	; 0x40
 80056ae:	f000 fafd 	bl	8005cac <_malloc_r>
 80056b2:	6028      	str	r0, [r5, #0]
 80056b4:	6128      	str	r0, [r5, #16]
 80056b6:	b920      	cbnz	r0, 80056c2 <_svfiprintf_r+0x2e>
 80056b8:	230c      	movs	r3, #12
 80056ba:	603b      	str	r3, [r7, #0]
 80056bc:	f04f 30ff 	mov.w	r0, #4294967295
 80056c0:	e0d1      	b.n	8005866 <_svfiprintf_r+0x1d2>
 80056c2:	2340      	movs	r3, #64	; 0x40
 80056c4:	616b      	str	r3, [r5, #20]
 80056c6:	2300      	movs	r3, #0
 80056c8:	9309      	str	r3, [sp, #36]	; 0x24
 80056ca:	2320      	movs	r3, #32
 80056cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80056d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80056d4:	2330      	movs	r3, #48	; 0x30
 80056d6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005880 <_svfiprintf_r+0x1ec>
 80056da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80056de:	f04f 0901 	mov.w	r9, #1
 80056e2:	4623      	mov	r3, r4
 80056e4:	469a      	mov	sl, r3
 80056e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056ea:	b10a      	cbz	r2, 80056f0 <_svfiprintf_r+0x5c>
 80056ec:	2a25      	cmp	r2, #37	; 0x25
 80056ee:	d1f9      	bne.n	80056e4 <_svfiprintf_r+0x50>
 80056f0:	ebba 0b04 	subs.w	fp, sl, r4
 80056f4:	d00b      	beq.n	800570e <_svfiprintf_r+0x7a>
 80056f6:	465b      	mov	r3, fp
 80056f8:	4622      	mov	r2, r4
 80056fa:	4629      	mov	r1, r5
 80056fc:	4638      	mov	r0, r7
 80056fe:	f7ff ff6d 	bl	80055dc <__ssputs_r>
 8005702:	3001      	adds	r0, #1
 8005704:	f000 80aa 	beq.w	800585c <_svfiprintf_r+0x1c8>
 8005708:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800570a:	445a      	add	r2, fp
 800570c:	9209      	str	r2, [sp, #36]	; 0x24
 800570e:	f89a 3000 	ldrb.w	r3, [sl]
 8005712:	2b00      	cmp	r3, #0
 8005714:	f000 80a2 	beq.w	800585c <_svfiprintf_r+0x1c8>
 8005718:	2300      	movs	r3, #0
 800571a:	f04f 32ff 	mov.w	r2, #4294967295
 800571e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005722:	f10a 0a01 	add.w	sl, sl, #1
 8005726:	9304      	str	r3, [sp, #16]
 8005728:	9307      	str	r3, [sp, #28]
 800572a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800572e:	931a      	str	r3, [sp, #104]	; 0x68
 8005730:	4654      	mov	r4, sl
 8005732:	2205      	movs	r2, #5
 8005734:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005738:	4851      	ldr	r0, [pc, #324]	; (8005880 <_svfiprintf_r+0x1ec>)
 800573a:	f7fa fd51 	bl	80001e0 <memchr>
 800573e:	9a04      	ldr	r2, [sp, #16]
 8005740:	b9d8      	cbnz	r0, 800577a <_svfiprintf_r+0xe6>
 8005742:	06d0      	lsls	r0, r2, #27
 8005744:	bf44      	itt	mi
 8005746:	2320      	movmi	r3, #32
 8005748:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800574c:	0711      	lsls	r1, r2, #28
 800574e:	bf44      	itt	mi
 8005750:	232b      	movmi	r3, #43	; 0x2b
 8005752:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005756:	f89a 3000 	ldrb.w	r3, [sl]
 800575a:	2b2a      	cmp	r3, #42	; 0x2a
 800575c:	d015      	beq.n	800578a <_svfiprintf_r+0xf6>
 800575e:	9a07      	ldr	r2, [sp, #28]
 8005760:	4654      	mov	r4, sl
 8005762:	2000      	movs	r0, #0
 8005764:	f04f 0c0a 	mov.w	ip, #10
 8005768:	4621      	mov	r1, r4
 800576a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800576e:	3b30      	subs	r3, #48	; 0x30
 8005770:	2b09      	cmp	r3, #9
 8005772:	d94e      	bls.n	8005812 <_svfiprintf_r+0x17e>
 8005774:	b1b0      	cbz	r0, 80057a4 <_svfiprintf_r+0x110>
 8005776:	9207      	str	r2, [sp, #28]
 8005778:	e014      	b.n	80057a4 <_svfiprintf_r+0x110>
 800577a:	eba0 0308 	sub.w	r3, r0, r8
 800577e:	fa09 f303 	lsl.w	r3, r9, r3
 8005782:	4313      	orrs	r3, r2
 8005784:	9304      	str	r3, [sp, #16]
 8005786:	46a2      	mov	sl, r4
 8005788:	e7d2      	b.n	8005730 <_svfiprintf_r+0x9c>
 800578a:	9b03      	ldr	r3, [sp, #12]
 800578c:	1d19      	adds	r1, r3, #4
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	9103      	str	r1, [sp, #12]
 8005792:	2b00      	cmp	r3, #0
 8005794:	bfbb      	ittet	lt
 8005796:	425b      	neglt	r3, r3
 8005798:	f042 0202 	orrlt.w	r2, r2, #2
 800579c:	9307      	strge	r3, [sp, #28]
 800579e:	9307      	strlt	r3, [sp, #28]
 80057a0:	bfb8      	it	lt
 80057a2:	9204      	strlt	r2, [sp, #16]
 80057a4:	7823      	ldrb	r3, [r4, #0]
 80057a6:	2b2e      	cmp	r3, #46	; 0x2e
 80057a8:	d10c      	bne.n	80057c4 <_svfiprintf_r+0x130>
 80057aa:	7863      	ldrb	r3, [r4, #1]
 80057ac:	2b2a      	cmp	r3, #42	; 0x2a
 80057ae:	d135      	bne.n	800581c <_svfiprintf_r+0x188>
 80057b0:	9b03      	ldr	r3, [sp, #12]
 80057b2:	1d1a      	adds	r2, r3, #4
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	9203      	str	r2, [sp, #12]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	bfb8      	it	lt
 80057bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80057c0:	3402      	adds	r4, #2
 80057c2:	9305      	str	r3, [sp, #20]
 80057c4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005890 <_svfiprintf_r+0x1fc>
 80057c8:	7821      	ldrb	r1, [r4, #0]
 80057ca:	2203      	movs	r2, #3
 80057cc:	4650      	mov	r0, sl
 80057ce:	f7fa fd07 	bl	80001e0 <memchr>
 80057d2:	b140      	cbz	r0, 80057e6 <_svfiprintf_r+0x152>
 80057d4:	2340      	movs	r3, #64	; 0x40
 80057d6:	eba0 000a 	sub.w	r0, r0, sl
 80057da:	fa03 f000 	lsl.w	r0, r3, r0
 80057de:	9b04      	ldr	r3, [sp, #16]
 80057e0:	4303      	orrs	r3, r0
 80057e2:	3401      	adds	r4, #1
 80057e4:	9304      	str	r3, [sp, #16]
 80057e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057ea:	4826      	ldr	r0, [pc, #152]	; (8005884 <_svfiprintf_r+0x1f0>)
 80057ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80057f0:	2206      	movs	r2, #6
 80057f2:	f7fa fcf5 	bl	80001e0 <memchr>
 80057f6:	2800      	cmp	r0, #0
 80057f8:	d038      	beq.n	800586c <_svfiprintf_r+0x1d8>
 80057fa:	4b23      	ldr	r3, [pc, #140]	; (8005888 <_svfiprintf_r+0x1f4>)
 80057fc:	bb1b      	cbnz	r3, 8005846 <_svfiprintf_r+0x1b2>
 80057fe:	9b03      	ldr	r3, [sp, #12]
 8005800:	3307      	adds	r3, #7
 8005802:	f023 0307 	bic.w	r3, r3, #7
 8005806:	3308      	adds	r3, #8
 8005808:	9303      	str	r3, [sp, #12]
 800580a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800580c:	4433      	add	r3, r6
 800580e:	9309      	str	r3, [sp, #36]	; 0x24
 8005810:	e767      	b.n	80056e2 <_svfiprintf_r+0x4e>
 8005812:	fb0c 3202 	mla	r2, ip, r2, r3
 8005816:	460c      	mov	r4, r1
 8005818:	2001      	movs	r0, #1
 800581a:	e7a5      	b.n	8005768 <_svfiprintf_r+0xd4>
 800581c:	2300      	movs	r3, #0
 800581e:	3401      	adds	r4, #1
 8005820:	9305      	str	r3, [sp, #20]
 8005822:	4619      	mov	r1, r3
 8005824:	f04f 0c0a 	mov.w	ip, #10
 8005828:	4620      	mov	r0, r4
 800582a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800582e:	3a30      	subs	r2, #48	; 0x30
 8005830:	2a09      	cmp	r2, #9
 8005832:	d903      	bls.n	800583c <_svfiprintf_r+0x1a8>
 8005834:	2b00      	cmp	r3, #0
 8005836:	d0c5      	beq.n	80057c4 <_svfiprintf_r+0x130>
 8005838:	9105      	str	r1, [sp, #20]
 800583a:	e7c3      	b.n	80057c4 <_svfiprintf_r+0x130>
 800583c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005840:	4604      	mov	r4, r0
 8005842:	2301      	movs	r3, #1
 8005844:	e7f0      	b.n	8005828 <_svfiprintf_r+0x194>
 8005846:	ab03      	add	r3, sp, #12
 8005848:	9300      	str	r3, [sp, #0]
 800584a:	462a      	mov	r2, r5
 800584c:	4b0f      	ldr	r3, [pc, #60]	; (800588c <_svfiprintf_r+0x1f8>)
 800584e:	a904      	add	r1, sp, #16
 8005850:	4638      	mov	r0, r7
 8005852:	f3af 8000 	nop.w
 8005856:	1c42      	adds	r2, r0, #1
 8005858:	4606      	mov	r6, r0
 800585a:	d1d6      	bne.n	800580a <_svfiprintf_r+0x176>
 800585c:	89ab      	ldrh	r3, [r5, #12]
 800585e:	065b      	lsls	r3, r3, #25
 8005860:	f53f af2c 	bmi.w	80056bc <_svfiprintf_r+0x28>
 8005864:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005866:	b01d      	add	sp, #116	; 0x74
 8005868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800586c:	ab03      	add	r3, sp, #12
 800586e:	9300      	str	r3, [sp, #0]
 8005870:	462a      	mov	r2, r5
 8005872:	4b06      	ldr	r3, [pc, #24]	; (800588c <_svfiprintf_r+0x1f8>)
 8005874:	a904      	add	r1, sp, #16
 8005876:	4638      	mov	r0, r7
 8005878:	f000 f87a 	bl	8005970 <_printf_i>
 800587c:	e7eb      	b.n	8005856 <_svfiprintf_r+0x1c2>
 800587e:	bf00      	nop
 8005880:	08005e6c 	.word	0x08005e6c
 8005884:	08005e76 	.word	0x08005e76
 8005888:	00000000 	.word	0x00000000
 800588c:	080055dd 	.word	0x080055dd
 8005890:	08005e72 	.word	0x08005e72

08005894 <_printf_common>:
 8005894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005898:	4616      	mov	r6, r2
 800589a:	4699      	mov	r9, r3
 800589c:	688a      	ldr	r2, [r1, #8]
 800589e:	690b      	ldr	r3, [r1, #16]
 80058a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80058a4:	4293      	cmp	r3, r2
 80058a6:	bfb8      	it	lt
 80058a8:	4613      	movlt	r3, r2
 80058aa:	6033      	str	r3, [r6, #0]
 80058ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80058b0:	4607      	mov	r7, r0
 80058b2:	460c      	mov	r4, r1
 80058b4:	b10a      	cbz	r2, 80058ba <_printf_common+0x26>
 80058b6:	3301      	adds	r3, #1
 80058b8:	6033      	str	r3, [r6, #0]
 80058ba:	6823      	ldr	r3, [r4, #0]
 80058bc:	0699      	lsls	r1, r3, #26
 80058be:	bf42      	ittt	mi
 80058c0:	6833      	ldrmi	r3, [r6, #0]
 80058c2:	3302      	addmi	r3, #2
 80058c4:	6033      	strmi	r3, [r6, #0]
 80058c6:	6825      	ldr	r5, [r4, #0]
 80058c8:	f015 0506 	ands.w	r5, r5, #6
 80058cc:	d106      	bne.n	80058dc <_printf_common+0x48>
 80058ce:	f104 0a19 	add.w	sl, r4, #25
 80058d2:	68e3      	ldr	r3, [r4, #12]
 80058d4:	6832      	ldr	r2, [r6, #0]
 80058d6:	1a9b      	subs	r3, r3, r2
 80058d8:	42ab      	cmp	r3, r5
 80058da:	dc26      	bgt.n	800592a <_printf_common+0x96>
 80058dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80058e0:	1e13      	subs	r3, r2, #0
 80058e2:	6822      	ldr	r2, [r4, #0]
 80058e4:	bf18      	it	ne
 80058e6:	2301      	movne	r3, #1
 80058e8:	0692      	lsls	r2, r2, #26
 80058ea:	d42b      	bmi.n	8005944 <_printf_common+0xb0>
 80058ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80058f0:	4649      	mov	r1, r9
 80058f2:	4638      	mov	r0, r7
 80058f4:	47c0      	blx	r8
 80058f6:	3001      	adds	r0, #1
 80058f8:	d01e      	beq.n	8005938 <_printf_common+0xa4>
 80058fa:	6823      	ldr	r3, [r4, #0]
 80058fc:	68e5      	ldr	r5, [r4, #12]
 80058fe:	6832      	ldr	r2, [r6, #0]
 8005900:	f003 0306 	and.w	r3, r3, #6
 8005904:	2b04      	cmp	r3, #4
 8005906:	bf08      	it	eq
 8005908:	1aad      	subeq	r5, r5, r2
 800590a:	68a3      	ldr	r3, [r4, #8]
 800590c:	6922      	ldr	r2, [r4, #16]
 800590e:	bf0c      	ite	eq
 8005910:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005914:	2500      	movne	r5, #0
 8005916:	4293      	cmp	r3, r2
 8005918:	bfc4      	itt	gt
 800591a:	1a9b      	subgt	r3, r3, r2
 800591c:	18ed      	addgt	r5, r5, r3
 800591e:	2600      	movs	r6, #0
 8005920:	341a      	adds	r4, #26
 8005922:	42b5      	cmp	r5, r6
 8005924:	d11a      	bne.n	800595c <_printf_common+0xc8>
 8005926:	2000      	movs	r0, #0
 8005928:	e008      	b.n	800593c <_printf_common+0xa8>
 800592a:	2301      	movs	r3, #1
 800592c:	4652      	mov	r2, sl
 800592e:	4649      	mov	r1, r9
 8005930:	4638      	mov	r0, r7
 8005932:	47c0      	blx	r8
 8005934:	3001      	adds	r0, #1
 8005936:	d103      	bne.n	8005940 <_printf_common+0xac>
 8005938:	f04f 30ff 	mov.w	r0, #4294967295
 800593c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005940:	3501      	adds	r5, #1
 8005942:	e7c6      	b.n	80058d2 <_printf_common+0x3e>
 8005944:	18e1      	adds	r1, r4, r3
 8005946:	1c5a      	adds	r2, r3, #1
 8005948:	2030      	movs	r0, #48	; 0x30
 800594a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800594e:	4422      	add	r2, r4
 8005950:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005954:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005958:	3302      	adds	r3, #2
 800595a:	e7c7      	b.n	80058ec <_printf_common+0x58>
 800595c:	2301      	movs	r3, #1
 800595e:	4622      	mov	r2, r4
 8005960:	4649      	mov	r1, r9
 8005962:	4638      	mov	r0, r7
 8005964:	47c0      	blx	r8
 8005966:	3001      	adds	r0, #1
 8005968:	d0e6      	beq.n	8005938 <_printf_common+0xa4>
 800596a:	3601      	adds	r6, #1
 800596c:	e7d9      	b.n	8005922 <_printf_common+0x8e>
	...

08005970 <_printf_i>:
 8005970:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005974:	460c      	mov	r4, r1
 8005976:	4691      	mov	r9, r2
 8005978:	7e27      	ldrb	r7, [r4, #24]
 800597a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800597c:	2f78      	cmp	r7, #120	; 0x78
 800597e:	4680      	mov	r8, r0
 8005980:	469a      	mov	sl, r3
 8005982:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005986:	d807      	bhi.n	8005998 <_printf_i+0x28>
 8005988:	2f62      	cmp	r7, #98	; 0x62
 800598a:	d80a      	bhi.n	80059a2 <_printf_i+0x32>
 800598c:	2f00      	cmp	r7, #0
 800598e:	f000 80d8 	beq.w	8005b42 <_printf_i+0x1d2>
 8005992:	2f58      	cmp	r7, #88	; 0x58
 8005994:	f000 80a3 	beq.w	8005ade <_printf_i+0x16e>
 8005998:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800599c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80059a0:	e03a      	b.n	8005a18 <_printf_i+0xa8>
 80059a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80059a6:	2b15      	cmp	r3, #21
 80059a8:	d8f6      	bhi.n	8005998 <_printf_i+0x28>
 80059aa:	a001      	add	r0, pc, #4	; (adr r0, 80059b0 <_printf_i+0x40>)
 80059ac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80059b0:	08005a09 	.word	0x08005a09
 80059b4:	08005a1d 	.word	0x08005a1d
 80059b8:	08005999 	.word	0x08005999
 80059bc:	08005999 	.word	0x08005999
 80059c0:	08005999 	.word	0x08005999
 80059c4:	08005999 	.word	0x08005999
 80059c8:	08005a1d 	.word	0x08005a1d
 80059cc:	08005999 	.word	0x08005999
 80059d0:	08005999 	.word	0x08005999
 80059d4:	08005999 	.word	0x08005999
 80059d8:	08005999 	.word	0x08005999
 80059dc:	08005b29 	.word	0x08005b29
 80059e0:	08005a4d 	.word	0x08005a4d
 80059e4:	08005b0b 	.word	0x08005b0b
 80059e8:	08005999 	.word	0x08005999
 80059ec:	08005999 	.word	0x08005999
 80059f0:	08005b4b 	.word	0x08005b4b
 80059f4:	08005999 	.word	0x08005999
 80059f8:	08005a4d 	.word	0x08005a4d
 80059fc:	08005999 	.word	0x08005999
 8005a00:	08005999 	.word	0x08005999
 8005a04:	08005b13 	.word	0x08005b13
 8005a08:	680b      	ldr	r3, [r1, #0]
 8005a0a:	1d1a      	adds	r2, r3, #4
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	600a      	str	r2, [r1, #0]
 8005a10:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005a14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e0a3      	b.n	8005b64 <_printf_i+0x1f4>
 8005a1c:	6825      	ldr	r5, [r4, #0]
 8005a1e:	6808      	ldr	r0, [r1, #0]
 8005a20:	062e      	lsls	r6, r5, #24
 8005a22:	f100 0304 	add.w	r3, r0, #4
 8005a26:	d50a      	bpl.n	8005a3e <_printf_i+0xce>
 8005a28:	6805      	ldr	r5, [r0, #0]
 8005a2a:	600b      	str	r3, [r1, #0]
 8005a2c:	2d00      	cmp	r5, #0
 8005a2e:	da03      	bge.n	8005a38 <_printf_i+0xc8>
 8005a30:	232d      	movs	r3, #45	; 0x2d
 8005a32:	426d      	negs	r5, r5
 8005a34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a38:	485e      	ldr	r0, [pc, #376]	; (8005bb4 <_printf_i+0x244>)
 8005a3a:	230a      	movs	r3, #10
 8005a3c:	e019      	b.n	8005a72 <_printf_i+0x102>
 8005a3e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005a42:	6805      	ldr	r5, [r0, #0]
 8005a44:	600b      	str	r3, [r1, #0]
 8005a46:	bf18      	it	ne
 8005a48:	b22d      	sxthne	r5, r5
 8005a4a:	e7ef      	b.n	8005a2c <_printf_i+0xbc>
 8005a4c:	680b      	ldr	r3, [r1, #0]
 8005a4e:	6825      	ldr	r5, [r4, #0]
 8005a50:	1d18      	adds	r0, r3, #4
 8005a52:	6008      	str	r0, [r1, #0]
 8005a54:	0628      	lsls	r0, r5, #24
 8005a56:	d501      	bpl.n	8005a5c <_printf_i+0xec>
 8005a58:	681d      	ldr	r5, [r3, #0]
 8005a5a:	e002      	b.n	8005a62 <_printf_i+0xf2>
 8005a5c:	0669      	lsls	r1, r5, #25
 8005a5e:	d5fb      	bpl.n	8005a58 <_printf_i+0xe8>
 8005a60:	881d      	ldrh	r5, [r3, #0]
 8005a62:	4854      	ldr	r0, [pc, #336]	; (8005bb4 <_printf_i+0x244>)
 8005a64:	2f6f      	cmp	r7, #111	; 0x6f
 8005a66:	bf0c      	ite	eq
 8005a68:	2308      	moveq	r3, #8
 8005a6a:	230a      	movne	r3, #10
 8005a6c:	2100      	movs	r1, #0
 8005a6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a72:	6866      	ldr	r6, [r4, #4]
 8005a74:	60a6      	str	r6, [r4, #8]
 8005a76:	2e00      	cmp	r6, #0
 8005a78:	bfa2      	ittt	ge
 8005a7a:	6821      	ldrge	r1, [r4, #0]
 8005a7c:	f021 0104 	bicge.w	r1, r1, #4
 8005a80:	6021      	strge	r1, [r4, #0]
 8005a82:	b90d      	cbnz	r5, 8005a88 <_printf_i+0x118>
 8005a84:	2e00      	cmp	r6, #0
 8005a86:	d04d      	beq.n	8005b24 <_printf_i+0x1b4>
 8005a88:	4616      	mov	r6, r2
 8005a8a:	fbb5 f1f3 	udiv	r1, r5, r3
 8005a8e:	fb03 5711 	mls	r7, r3, r1, r5
 8005a92:	5dc7      	ldrb	r7, [r0, r7]
 8005a94:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005a98:	462f      	mov	r7, r5
 8005a9a:	42bb      	cmp	r3, r7
 8005a9c:	460d      	mov	r5, r1
 8005a9e:	d9f4      	bls.n	8005a8a <_printf_i+0x11a>
 8005aa0:	2b08      	cmp	r3, #8
 8005aa2:	d10b      	bne.n	8005abc <_printf_i+0x14c>
 8005aa4:	6823      	ldr	r3, [r4, #0]
 8005aa6:	07df      	lsls	r7, r3, #31
 8005aa8:	d508      	bpl.n	8005abc <_printf_i+0x14c>
 8005aaa:	6923      	ldr	r3, [r4, #16]
 8005aac:	6861      	ldr	r1, [r4, #4]
 8005aae:	4299      	cmp	r1, r3
 8005ab0:	bfde      	ittt	le
 8005ab2:	2330      	movle	r3, #48	; 0x30
 8005ab4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005ab8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005abc:	1b92      	subs	r2, r2, r6
 8005abe:	6122      	str	r2, [r4, #16]
 8005ac0:	f8cd a000 	str.w	sl, [sp]
 8005ac4:	464b      	mov	r3, r9
 8005ac6:	aa03      	add	r2, sp, #12
 8005ac8:	4621      	mov	r1, r4
 8005aca:	4640      	mov	r0, r8
 8005acc:	f7ff fee2 	bl	8005894 <_printf_common>
 8005ad0:	3001      	adds	r0, #1
 8005ad2:	d14c      	bne.n	8005b6e <_printf_i+0x1fe>
 8005ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ad8:	b004      	add	sp, #16
 8005ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ade:	4835      	ldr	r0, [pc, #212]	; (8005bb4 <_printf_i+0x244>)
 8005ae0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005ae4:	6823      	ldr	r3, [r4, #0]
 8005ae6:	680e      	ldr	r6, [r1, #0]
 8005ae8:	061f      	lsls	r7, r3, #24
 8005aea:	f856 5b04 	ldr.w	r5, [r6], #4
 8005aee:	600e      	str	r6, [r1, #0]
 8005af0:	d514      	bpl.n	8005b1c <_printf_i+0x1ac>
 8005af2:	07d9      	lsls	r1, r3, #31
 8005af4:	bf44      	itt	mi
 8005af6:	f043 0320 	orrmi.w	r3, r3, #32
 8005afa:	6023      	strmi	r3, [r4, #0]
 8005afc:	b91d      	cbnz	r5, 8005b06 <_printf_i+0x196>
 8005afe:	6823      	ldr	r3, [r4, #0]
 8005b00:	f023 0320 	bic.w	r3, r3, #32
 8005b04:	6023      	str	r3, [r4, #0]
 8005b06:	2310      	movs	r3, #16
 8005b08:	e7b0      	b.n	8005a6c <_printf_i+0xfc>
 8005b0a:	6823      	ldr	r3, [r4, #0]
 8005b0c:	f043 0320 	orr.w	r3, r3, #32
 8005b10:	6023      	str	r3, [r4, #0]
 8005b12:	2378      	movs	r3, #120	; 0x78
 8005b14:	4828      	ldr	r0, [pc, #160]	; (8005bb8 <_printf_i+0x248>)
 8005b16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005b1a:	e7e3      	b.n	8005ae4 <_printf_i+0x174>
 8005b1c:	065e      	lsls	r6, r3, #25
 8005b1e:	bf48      	it	mi
 8005b20:	b2ad      	uxthmi	r5, r5
 8005b22:	e7e6      	b.n	8005af2 <_printf_i+0x182>
 8005b24:	4616      	mov	r6, r2
 8005b26:	e7bb      	b.n	8005aa0 <_printf_i+0x130>
 8005b28:	680b      	ldr	r3, [r1, #0]
 8005b2a:	6826      	ldr	r6, [r4, #0]
 8005b2c:	6960      	ldr	r0, [r4, #20]
 8005b2e:	1d1d      	adds	r5, r3, #4
 8005b30:	600d      	str	r5, [r1, #0]
 8005b32:	0635      	lsls	r5, r6, #24
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	d501      	bpl.n	8005b3c <_printf_i+0x1cc>
 8005b38:	6018      	str	r0, [r3, #0]
 8005b3a:	e002      	b.n	8005b42 <_printf_i+0x1d2>
 8005b3c:	0671      	lsls	r1, r6, #25
 8005b3e:	d5fb      	bpl.n	8005b38 <_printf_i+0x1c8>
 8005b40:	8018      	strh	r0, [r3, #0]
 8005b42:	2300      	movs	r3, #0
 8005b44:	6123      	str	r3, [r4, #16]
 8005b46:	4616      	mov	r6, r2
 8005b48:	e7ba      	b.n	8005ac0 <_printf_i+0x150>
 8005b4a:	680b      	ldr	r3, [r1, #0]
 8005b4c:	1d1a      	adds	r2, r3, #4
 8005b4e:	600a      	str	r2, [r1, #0]
 8005b50:	681e      	ldr	r6, [r3, #0]
 8005b52:	6862      	ldr	r2, [r4, #4]
 8005b54:	2100      	movs	r1, #0
 8005b56:	4630      	mov	r0, r6
 8005b58:	f7fa fb42 	bl	80001e0 <memchr>
 8005b5c:	b108      	cbz	r0, 8005b62 <_printf_i+0x1f2>
 8005b5e:	1b80      	subs	r0, r0, r6
 8005b60:	6060      	str	r0, [r4, #4]
 8005b62:	6863      	ldr	r3, [r4, #4]
 8005b64:	6123      	str	r3, [r4, #16]
 8005b66:	2300      	movs	r3, #0
 8005b68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b6c:	e7a8      	b.n	8005ac0 <_printf_i+0x150>
 8005b6e:	6923      	ldr	r3, [r4, #16]
 8005b70:	4632      	mov	r2, r6
 8005b72:	4649      	mov	r1, r9
 8005b74:	4640      	mov	r0, r8
 8005b76:	47d0      	blx	sl
 8005b78:	3001      	adds	r0, #1
 8005b7a:	d0ab      	beq.n	8005ad4 <_printf_i+0x164>
 8005b7c:	6823      	ldr	r3, [r4, #0]
 8005b7e:	079b      	lsls	r3, r3, #30
 8005b80:	d413      	bmi.n	8005baa <_printf_i+0x23a>
 8005b82:	68e0      	ldr	r0, [r4, #12]
 8005b84:	9b03      	ldr	r3, [sp, #12]
 8005b86:	4298      	cmp	r0, r3
 8005b88:	bfb8      	it	lt
 8005b8a:	4618      	movlt	r0, r3
 8005b8c:	e7a4      	b.n	8005ad8 <_printf_i+0x168>
 8005b8e:	2301      	movs	r3, #1
 8005b90:	4632      	mov	r2, r6
 8005b92:	4649      	mov	r1, r9
 8005b94:	4640      	mov	r0, r8
 8005b96:	47d0      	blx	sl
 8005b98:	3001      	adds	r0, #1
 8005b9a:	d09b      	beq.n	8005ad4 <_printf_i+0x164>
 8005b9c:	3501      	adds	r5, #1
 8005b9e:	68e3      	ldr	r3, [r4, #12]
 8005ba0:	9903      	ldr	r1, [sp, #12]
 8005ba2:	1a5b      	subs	r3, r3, r1
 8005ba4:	42ab      	cmp	r3, r5
 8005ba6:	dcf2      	bgt.n	8005b8e <_printf_i+0x21e>
 8005ba8:	e7eb      	b.n	8005b82 <_printf_i+0x212>
 8005baa:	2500      	movs	r5, #0
 8005bac:	f104 0619 	add.w	r6, r4, #25
 8005bb0:	e7f5      	b.n	8005b9e <_printf_i+0x22e>
 8005bb2:	bf00      	nop
 8005bb4:	08005e7d 	.word	0x08005e7d
 8005bb8:	08005e8e 	.word	0x08005e8e

08005bbc <memcpy>:
 8005bbc:	440a      	add	r2, r1
 8005bbe:	4291      	cmp	r1, r2
 8005bc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8005bc4:	d100      	bne.n	8005bc8 <memcpy+0xc>
 8005bc6:	4770      	bx	lr
 8005bc8:	b510      	push	{r4, lr}
 8005bca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005bce:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005bd2:	4291      	cmp	r1, r2
 8005bd4:	d1f9      	bne.n	8005bca <memcpy+0xe>
 8005bd6:	bd10      	pop	{r4, pc}

08005bd8 <memmove>:
 8005bd8:	4288      	cmp	r0, r1
 8005bda:	b510      	push	{r4, lr}
 8005bdc:	eb01 0402 	add.w	r4, r1, r2
 8005be0:	d902      	bls.n	8005be8 <memmove+0x10>
 8005be2:	4284      	cmp	r4, r0
 8005be4:	4623      	mov	r3, r4
 8005be6:	d807      	bhi.n	8005bf8 <memmove+0x20>
 8005be8:	1e43      	subs	r3, r0, #1
 8005bea:	42a1      	cmp	r1, r4
 8005bec:	d008      	beq.n	8005c00 <memmove+0x28>
 8005bee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005bf2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005bf6:	e7f8      	b.n	8005bea <memmove+0x12>
 8005bf8:	4402      	add	r2, r0
 8005bfa:	4601      	mov	r1, r0
 8005bfc:	428a      	cmp	r2, r1
 8005bfe:	d100      	bne.n	8005c02 <memmove+0x2a>
 8005c00:	bd10      	pop	{r4, pc}
 8005c02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005c06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005c0a:	e7f7      	b.n	8005bfc <memmove+0x24>

08005c0c <_free_r>:
 8005c0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c0e:	2900      	cmp	r1, #0
 8005c10:	d048      	beq.n	8005ca4 <_free_r+0x98>
 8005c12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c16:	9001      	str	r0, [sp, #4]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	f1a1 0404 	sub.w	r4, r1, #4
 8005c1e:	bfb8      	it	lt
 8005c20:	18e4      	addlt	r4, r4, r3
 8005c22:	f000 f8d3 	bl	8005dcc <__malloc_lock>
 8005c26:	4a20      	ldr	r2, [pc, #128]	; (8005ca8 <_free_r+0x9c>)
 8005c28:	9801      	ldr	r0, [sp, #4]
 8005c2a:	6813      	ldr	r3, [r2, #0]
 8005c2c:	4615      	mov	r5, r2
 8005c2e:	b933      	cbnz	r3, 8005c3e <_free_r+0x32>
 8005c30:	6063      	str	r3, [r4, #4]
 8005c32:	6014      	str	r4, [r2, #0]
 8005c34:	b003      	add	sp, #12
 8005c36:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005c3a:	f000 b8cd 	b.w	8005dd8 <__malloc_unlock>
 8005c3e:	42a3      	cmp	r3, r4
 8005c40:	d90b      	bls.n	8005c5a <_free_r+0x4e>
 8005c42:	6821      	ldr	r1, [r4, #0]
 8005c44:	1862      	adds	r2, r4, r1
 8005c46:	4293      	cmp	r3, r2
 8005c48:	bf04      	itt	eq
 8005c4a:	681a      	ldreq	r2, [r3, #0]
 8005c4c:	685b      	ldreq	r3, [r3, #4]
 8005c4e:	6063      	str	r3, [r4, #4]
 8005c50:	bf04      	itt	eq
 8005c52:	1852      	addeq	r2, r2, r1
 8005c54:	6022      	streq	r2, [r4, #0]
 8005c56:	602c      	str	r4, [r5, #0]
 8005c58:	e7ec      	b.n	8005c34 <_free_r+0x28>
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	b10b      	cbz	r3, 8005c64 <_free_r+0x58>
 8005c60:	42a3      	cmp	r3, r4
 8005c62:	d9fa      	bls.n	8005c5a <_free_r+0x4e>
 8005c64:	6811      	ldr	r1, [r2, #0]
 8005c66:	1855      	adds	r5, r2, r1
 8005c68:	42a5      	cmp	r5, r4
 8005c6a:	d10b      	bne.n	8005c84 <_free_r+0x78>
 8005c6c:	6824      	ldr	r4, [r4, #0]
 8005c6e:	4421      	add	r1, r4
 8005c70:	1854      	adds	r4, r2, r1
 8005c72:	42a3      	cmp	r3, r4
 8005c74:	6011      	str	r1, [r2, #0]
 8005c76:	d1dd      	bne.n	8005c34 <_free_r+0x28>
 8005c78:	681c      	ldr	r4, [r3, #0]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	6053      	str	r3, [r2, #4]
 8005c7e:	4421      	add	r1, r4
 8005c80:	6011      	str	r1, [r2, #0]
 8005c82:	e7d7      	b.n	8005c34 <_free_r+0x28>
 8005c84:	d902      	bls.n	8005c8c <_free_r+0x80>
 8005c86:	230c      	movs	r3, #12
 8005c88:	6003      	str	r3, [r0, #0]
 8005c8a:	e7d3      	b.n	8005c34 <_free_r+0x28>
 8005c8c:	6825      	ldr	r5, [r4, #0]
 8005c8e:	1961      	adds	r1, r4, r5
 8005c90:	428b      	cmp	r3, r1
 8005c92:	bf04      	itt	eq
 8005c94:	6819      	ldreq	r1, [r3, #0]
 8005c96:	685b      	ldreq	r3, [r3, #4]
 8005c98:	6063      	str	r3, [r4, #4]
 8005c9a:	bf04      	itt	eq
 8005c9c:	1949      	addeq	r1, r1, r5
 8005c9e:	6021      	streq	r1, [r4, #0]
 8005ca0:	6054      	str	r4, [r2, #4]
 8005ca2:	e7c7      	b.n	8005c34 <_free_r+0x28>
 8005ca4:	b003      	add	sp, #12
 8005ca6:	bd30      	pop	{r4, r5, pc}
 8005ca8:	200001f8 	.word	0x200001f8

08005cac <_malloc_r>:
 8005cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cae:	1ccd      	adds	r5, r1, #3
 8005cb0:	f025 0503 	bic.w	r5, r5, #3
 8005cb4:	3508      	adds	r5, #8
 8005cb6:	2d0c      	cmp	r5, #12
 8005cb8:	bf38      	it	cc
 8005cba:	250c      	movcc	r5, #12
 8005cbc:	2d00      	cmp	r5, #0
 8005cbe:	4606      	mov	r6, r0
 8005cc0:	db01      	blt.n	8005cc6 <_malloc_r+0x1a>
 8005cc2:	42a9      	cmp	r1, r5
 8005cc4:	d903      	bls.n	8005cce <_malloc_r+0x22>
 8005cc6:	230c      	movs	r3, #12
 8005cc8:	6033      	str	r3, [r6, #0]
 8005cca:	2000      	movs	r0, #0
 8005ccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cce:	f000 f87d 	bl	8005dcc <__malloc_lock>
 8005cd2:	4921      	ldr	r1, [pc, #132]	; (8005d58 <_malloc_r+0xac>)
 8005cd4:	680a      	ldr	r2, [r1, #0]
 8005cd6:	4614      	mov	r4, r2
 8005cd8:	b99c      	cbnz	r4, 8005d02 <_malloc_r+0x56>
 8005cda:	4f20      	ldr	r7, [pc, #128]	; (8005d5c <_malloc_r+0xb0>)
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	b923      	cbnz	r3, 8005cea <_malloc_r+0x3e>
 8005ce0:	4621      	mov	r1, r4
 8005ce2:	4630      	mov	r0, r6
 8005ce4:	f000 f862 	bl	8005dac <_sbrk_r>
 8005ce8:	6038      	str	r0, [r7, #0]
 8005cea:	4629      	mov	r1, r5
 8005cec:	4630      	mov	r0, r6
 8005cee:	f000 f85d 	bl	8005dac <_sbrk_r>
 8005cf2:	1c43      	adds	r3, r0, #1
 8005cf4:	d123      	bne.n	8005d3e <_malloc_r+0x92>
 8005cf6:	230c      	movs	r3, #12
 8005cf8:	6033      	str	r3, [r6, #0]
 8005cfa:	4630      	mov	r0, r6
 8005cfc:	f000 f86c 	bl	8005dd8 <__malloc_unlock>
 8005d00:	e7e3      	b.n	8005cca <_malloc_r+0x1e>
 8005d02:	6823      	ldr	r3, [r4, #0]
 8005d04:	1b5b      	subs	r3, r3, r5
 8005d06:	d417      	bmi.n	8005d38 <_malloc_r+0x8c>
 8005d08:	2b0b      	cmp	r3, #11
 8005d0a:	d903      	bls.n	8005d14 <_malloc_r+0x68>
 8005d0c:	6023      	str	r3, [r4, #0]
 8005d0e:	441c      	add	r4, r3
 8005d10:	6025      	str	r5, [r4, #0]
 8005d12:	e004      	b.n	8005d1e <_malloc_r+0x72>
 8005d14:	6863      	ldr	r3, [r4, #4]
 8005d16:	42a2      	cmp	r2, r4
 8005d18:	bf0c      	ite	eq
 8005d1a:	600b      	streq	r3, [r1, #0]
 8005d1c:	6053      	strne	r3, [r2, #4]
 8005d1e:	4630      	mov	r0, r6
 8005d20:	f000 f85a 	bl	8005dd8 <__malloc_unlock>
 8005d24:	f104 000b 	add.w	r0, r4, #11
 8005d28:	1d23      	adds	r3, r4, #4
 8005d2a:	f020 0007 	bic.w	r0, r0, #7
 8005d2e:	1ac2      	subs	r2, r0, r3
 8005d30:	d0cc      	beq.n	8005ccc <_malloc_r+0x20>
 8005d32:	1a1b      	subs	r3, r3, r0
 8005d34:	50a3      	str	r3, [r4, r2]
 8005d36:	e7c9      	b.n	8005ccc <_malloc_r+0x20>
 8005d38:	4622      	mov	r2, r4
 8005d3a:	6864      	ldr	r4, [r4, #4]
 8005d3c:	e7cc      	b.n	8005cd8 <_malloc_r+0x2c>
 8005d3e:	1cc4      	adds	r4, r0, #3
 8005d40:	f024 0403 	bic.w	r4, r4, #3
 8005d44:	42a0      	cmp	r0, r4
 8005d46:	d0e3      	beq.n	8005d10 <_malloc_r+0x64>
 8005d48:	1a21      	subs	r1, r4, r0
 8005d4a:	4630      	mov	r0, r6
 8005d4c:	f000 f82e 	bl	8005dac <_sbrk_r>
 8005d50:	3001      	adds	r0, #1
 8005d52:	d1dd      	bne.n	8005d10 <_malloc_r+0x64>
 8005d54:	e7cf      	b.n	8005cf6 <_malloc_r+0x4a>
 8005d56:	bf00      	nop
 8005d58:	200001f8 	.word	0x200001f8
 8005d5c:	200001fc 	.word	0x200001fc

08005d60 <_realloc_r>:
 8005d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d62:	4607      	mov	r7, r0
 8005d64:	4614      	mov	r4, r2
 8005d66:	460e      	mov	r6, r1
 8005d68:	b921      	cbnz	r1, 8005d74 <_realloc_r+0x14>
 8005d6a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005d6e:	4611      	mov	r1, r2
 8005d70:	f7ff bf9c 	b.w	8005cac <_malloc_r>
 8005d74:	b922      	cbnz	r2, 8005d80 <_realloc_r+0x20>
 8005d76:	f7ff ff49 	bl	8005c0c <_free_r>
 8005d7a:	4625      	mov	r5, r4
 8005d7c:	4628      	mov	r0, r5
 8005d7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d80:	f000 f830 	bl	8005de4 <_malloc_usable_size_r>
 8005d84:	42a0      	cmp	r0, r4
 8005d86:	d20f      	bcs.n	8005da8 <_realloc_r+0x48>
 8005d88:	4621      	mov	r1, r4
 8005d8a:	4638      	mov	r0, r7
 8005d8c:	f7ff ff8e 	bl	8005cac <_malloc_r>
 8005d90:	4605      	mov	r5, r0
 8005d92:	2800      	cmp	r0, #0
 8005d94:	d0f2      	beq.n	8005d7c <_realloc_r+0x1c>
 8005d96:	4631      	mov	r1, r6
 8005d98:	4622      	mov	r2, r4
 8005d9a:	f7ff ff0f 	bl	8005bbc <memcpy>
 8005d9e:	4631      	mov	r1, r6
 8005da0:	4638      	mov	r0, r7
 8005da2:	f7ff ff33 	bl	8005c0c <_free_r>
 8005da6:	e7e9      	b.n	8005d7c <_realloc_r+0x1c>
 8005da8:	4635      	mov	r5, r6
 8005daa:	e7e7      	b.n	8005d7c <_realloc_r+0x1c>

08005dac <_sbrk_r>:
 8005dac:	b538      	push	{r3, r4, r5, lr}
 8005dae:	4d06      	ldr	r5, [pc, #24]	; (8005dc8 <_sbrk_r+0x1c>)
 8005db0:	2300      	movs	r3, #0
 8005db2:	4604      	mov	r4, r0
 8005db4:	4608      	mov	r0, r1
 8005db6:	602b      	str	r3, [r5, #0]
 8005db8:	f7fb fd2e 	bl	8001818 <_sbrk>
 8005dbc:	1c43      	adds	r3, r0, #1
 8005dbe:	d102      	bne.n	8005dc6 <_sbrk_r+0x1a>
 8005dc0:	682b      	ldr	r3, [r5, #0]
 8005dc2:	b103      	cbz	r3, 8005dc6 <_sbrk_r+0x1a>
 8005dc4:	6023      	str	r3, [r4, #0]
 8005dc6:	bd38      	pop	{r3, r4, r5, pc}
 8005dc8:	20000554 	.word	0x20000554

08005dcc <__malloc_lock>:
 8005dcc:	4801      	ldr	r0, [pc, #4]	; (8005dd4 <__malloc_lock+0x8>)
 8005dce:	f000 b811 	b.w	8005df4 <__retarget_lock_acquire_recursive>
 8005dd2:	bf00      	nop
 8005dd4:	2000055c 	.word	0x2000055c

08005dd8 <__malloc_unlock>:
 8005dd8:	4801      	ldr	r0, [pc, #4]	; (8005de0 <__malloc_unlock+0x8>)
 8005dda:	f000 b80c 	b.w	8005df6 <__retarget_lock_release_recursive>
 8005dde:	bf00      	nop
 8005de0:	2000055c 	.word	0x2000055c

08005de4 <_malloc_usable_size_r>:
 8005de4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005de8:	1f18      	subs	r0, r3, #4
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	bfbc      	itt	lt
 8005dee:	580b      	ldrlt	r3, [r1, r0]
 8005df0:	18c0      	addlt	r0, r0, r3
 8005df2:	4770      	bx	lr

08005df4 <__retarget_lock_acquire_recursive>:
 8005df4:	4770      	bx	lr

08005df6 <__retarget_lock_release_recursive>:
 8005df6:	4770      	bx	lr

08005df8 <_init>:
 8005df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dfa:	bf00      	nop
 8005dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dfe:	bc08      	pop	{r3}
 8005e00:	469e      	mov	lr, r3
 8005e02:	4770      	bx	lr

08005e04 <_fini>:
 8005e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e06:	bf00      	nop
 8005e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e0a:	bc08      	pop	{r3}
 8005e0c:	469e      	mov	lr, r3
 8005e0e:	4770      	bx	lr
